{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/Creation/NewEvent.js\";\nimport React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport { format, compareAsc } from 'date-fns';\nimport StoreDataContext from '../../context/StoreDataContext';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport EventsData from '../../containers/Store/EventsData'; //import numToDay from '../Calendar/numToDay';\n//import DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\n//import ReactDatePicker from '../Calendar/ReactDatePicker';\n//import Icon from '../Calendar/Icon';\n//import { Form, Input, FormGroup, Container, Label } from 'reactstrap';\n// import {\n//   DateRangePicker,\n//   SingleDatePicker,\n//   DayPickerRangeController\n// } from 'react-dates';\n// import { fi } from 'date-fns/locale';\n\nclass NewEvent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      eventId: '',\n      eventTitle: '',\n      eventNote: '',\n      eventCategory: '',\n      eventStartTimeDate: '',\n      eventFinishTimeDate: '',\n      //later: If one-day event\n      eventDuration: '',\n      //later: T -> schedule it on calendarData\n      //F--> put into unScheduledEventsList for that day\n      blockOffTimeSlot: false,\n      showStartTimeDate: false,\n      showFinishTimeDate: false,\n      eventDeadline: '',\n      //later: show multiday non-continous event\n      showMultidayNonContinousDate: false\n    };\n\n    this.onSubmit = event => {\n      event.preventDefault(); //if forgot to fill out the title it will focus input box\n\n      if (!this.state.eventTitle) {\n        this.emptyTitle.current.focus();\n        return alert('Give the event a name!');\n      } // let start = this.state.startTimeDate;\n\n\n      if (this.state.dayObjName) {\n        let dataRequestMessage = {\n          //if task/event scheduled on calendar\n          typeOfData: 'calendar',\n          handlerChoice: '1',\n          dataLocation: this.state.dayObjName,\n          infoType: 'newEvent',\n          info: this.state\n        };\n        this.context.dataRequestHandler(event, dataRequestMessage);\n        this.resetState();\n      }\n    };\n\n    this.resetState = () => {\n      let contentChoiceObj = {\n        target: {\n          value: '9'\n        }\n      };\n      this.setState({\n        eventId: '',\n        eventTitle: '',\n        eventNote: '',\n        eventCategory: '',\n        //task + date + start time\n        eventStartTimeDate: '',\n        eventFinishTimeDate: '',\n        eventDuration: '',\n        //\n        blockOffTimeSlot: false,\n        //required\n        showStartTimeDate: false,\n        //later: show another datePicker to pick a multiday event\n        showFinishTimeDate: false,\n        //later: show multiday non-continous event\n        showMultidayNonContinousDate: false,\n        eventDeadline: '',\n        //later: If one-day event\n        eventDuration: '',\n        //later: T -> schedule it on calendarData\n        //F--> put into unScheduledEventsList for that day\n        blockOffTimeSlot: ''\n      }, () => this.context.contentViewHandler(contentChoiceObj));\n    };\n\n    this.finishTimeDateHandler = date => {\n      let eventFinishTimeDate = {\n        dateObjectString: date.dateObjectString,\n        dateString: date.dateString,\n        day: date.day,\n        date: date.date,\n        month: date.month,\n        year: date.year,\n        timeString: date.time,\n        hour: date.hour,\n        minute: date.minute\n      }; // let currentShowFinishTimeDate = this.state.showFinishTimeDate\n      // showFinishTimeDate: !currentShowFinishTimeDate\n\n      this.setState({\n        finishTimeDate: eventFinishTimeDate\n      });\n    };\n\n    this.eventTitleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.eventNoteChange = e => {\n      this.setState({\n        eventNote: e.target.value\n      });\n    };\n\n    this.eventTypeChange = e => {\n      this.setState({\n        eventType: e.target.value\n      });\n    };\n\n    this.emptyTitle = React.createRef();\n  }\n\n  //if now day obj !available, will make one for that day, add events to it, else add events to that day\n  handleStartTimeDateChange(date) {\n    //let currentShowStartTimeDate = this.state.showStartTimeDate;\n    let day = format(date, 'E');\n    let dateDigit = format(date, 'dd');\n    let year = format(date, 'yy');\n    let month = format(date, 'MM');\n    let dayObjName = year + month + dateDigit + day;\n    console.log(`day: ${day} type: ${typeof day}`);\n    console.log(`date: ${dateDigit} type: ${typeof dateDigit}`);\n    console.log(`year: ${year} type: ${typeof year}`);\n    console.log(`month: ${month} type: ${typeof month}`);\n    console.log(`dayObjName: ${dayObjName} type: ${typeof dayObjName}`);\n    this.setState({\n      dayObjName: dayObjName,\n      eventStartTimeDate: {\n        dateObjectString: date.dateObjectString,\n        dateString: date.dateString,\n        day: date.day,\n        date: date.date,\n        month: date.month,\n        year: date.year,\n        timeString: date.time,\n        hour: date.hour,\n        minute: date.minute\n      }\n    });\n  }\n\n  render() {\n    //EventsData.toyCapability();\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Event Title\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"eventTitle\",\n      className: \"form-control\",\n      ref: this.emptyTitle //defaultValue=\"NBA AllStar Game\"\n      ,\n      value: this.state.eventTitle,\n      onChange: e => this.eventTitleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Event Type\"), React.createElement(\"select\", {\n      name: \"assignedTimeStart\",\n      className: \"form-control\",\n      placeholder: \"Enter Start Time.\",\n      onChange: e => this.eventTypeChange(e),\n      id: \"assignedTimeStart\",\n      defaultValue: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Appointment\"), React.createElement(\"option\", {\n      value: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Meeting\"), React.createElement(\"option\", {\n      value: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"One Time - Scheduled\"), React.createElement(\"option\", {\n      value: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"One Time - Unschedule\"), React.createElement(\"option\", {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"Multi Day Event\"))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Note\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"eventNote\",\n      className: \"form-control\",\n      defaultValue: \"Watch on Chanel 13\" //value={this.state.eventNote}\n      ,\n      onChange: e => this.eventNoteChange(e) //ref={eventNoteRef => eventNoteRef.focus()}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(DatePicker, {\n      placeholderText: \"Choose Start Time\",\n      selected: this.state.startDate,\n      onChange: date => this.handleStartTimeDateChange(date),\n      showTimeSelect: true,\n      timeFormat: \"HH:mm\",\n      timeIntervals: 30,\n      timeCaption: \"Start\",\n      dateFormat: \"MMMM dd, yyyy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nNewEvent.contextType = StoreDataContext;\nexport default NewEvent; // let date2 = {\n//   date: 31,\n//   dateObjectString:\n//     'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n//   toISOString: '2020-01-31T13:00:00.000Z',\n//   toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   dateString: 'Fri Jan 31 2020',\n//   timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n//   year: 2020,\n//   yearShort: 120,\n//   month: 0,\n//   day: 5,\n//   time: '8:00:00 AM',\n//   hour: 8,\n//   minute: 0,\n//   UTCDate: 31,\n//   toLocalString: '1/31/2020, 8:00:00 AM',\n//   toLocalDateString: '1/31/2020',\n//   toLocaleTimeString: '8:00:00 AM'\n// };","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/Creation/NewEvent.js"],"names":["React","Component","DatePicker","format","compareAsc","StoreDataContext","EventsData","NewEvent","constructor","props","state","eventId","eventTitle","eventNote","eventCategory","eventStartTimeDate","eventFinishTimeDate","eventDuration","blockOffTimeSlot","showStartTimeDate","showFinishTimeDate","eventDeadline","showMultidayNonContinousDate","onSubmit","event","preventDefault","emptyTitle","current","focus","alert","dayObjName","dataRequestMessage","typeOfData","handlerChoice","dataLocation","infoType","info","context","dataRequestHandler","resetState","contentChoiceObj","target","value","setState","contentViewHandler","finishTimeDateHandler","date","dateObjectString","dateString","day","month","year","timeString","time","hour","minute","finishTimeDate","eventTitleChange","e","name","eventNoteChange","eventTypeChange","eventType","createRef","handleStartTimeDateChange","dateDigit","console","log","render","startDate","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport { format, compareAsc } from 'date-fns';\nimport StoreDataContext from '../../context/StoreDataContext';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport EventsData from '../../containers/Store/EventsData';\n//import numToDay from '../Calendar/numToDay';\n//import DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\n//import ReactDatePicker from '../Calendar/ReactDatePicker';\n//import Icon from '../Calendar/Icon';\n//import { Form, Input, FormGroup, Container, Label } from 'reactstrap';\n// import {\n//   DateRangePicker,\n//   SingleDatePicker,\n//   DayPickerRangeController\n// } from 'react-dates';\n// import { fi } from 'date-fns/locale';\n\nclass NewEvent extends Component {\n  constructor(props) {\n    super(props);\n    this.emptyTitle = React.createRef();\n  }\n\n  state = {\n    eventId: '',\n    eventTitle: '',\n    eventNote: '',\n    eventCategory: '',\n    eventStartTimeDate: '',\n    eventFinishTimeDate: '',\n    //later: If one-day event\n    eventDuration: '',\n    //later: T -> schedule it on calendarData\n    //F--> put into unScheduledEventsList for that day\n    blockOffTimeSlot: false,\n    showStartTimeDate: false,\n    showFinishTimeDate: false,\n    eventDeadline: '',\n    //later: show multiday non-continous event\n    showMultidayNonContinousDate: false\n  };\n\n  onSubmit = event => {\n    event.preventDefault();\n    //if forgot to fill out the title it will focus input box\n    if (!this.state.eventTitle) {\n      this.emptyTitle.current.focus();\n      return alert('Give the event a name!');\n    }\n    // let start = this.state.startTimeDate;\n\n    if (this.state.dayObjName) {\n      let dataRequestMessage = {\n        //if task/event scheduled on calendar\n        typeOfData: 'calendar',\n        handlerChoice: '1',\n        dataLocation: this.state.dayObjName,\n        infoType: 'newEvent',\n        info: this.state\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage);\n\n      this.resetState();\n    }\n  };\n\n  resetState = () => {\n    let contentChoiceObj = {\n      target: {\n        value: '9'\n      }\n    };\n\n    this.setState(\n      {\n        eventId: '',\n        eventTitle: '',\n        eventNote: '',\n        eventCategory: '', //task + date + start time\n        eventStartTimeDate: '',\n        eventFinishTimeDate: '',\n        eventDuration: '', //\n        blockOffTimeSlot: false,\n        //required\n        showStartTimeDate: false,\n        //later: show another datePicker to pick a multiday event\n        showFinishTimeDate: false,\n\n        //later: show multiday non-continous event\n        showMultidayNonContinousDate: false,\n        eventDeadline: '',\n        //later: If one-day event\n        eventDuration: '',\n        //later: T -> schedule it on calendarData\n        //F--> put into unScheduledEventsList for that day\n        blockOffTimeSlot: ''\n      },\n      () => this.context.contentViewHandler(contentChoiceObj)\n    );\n  };\n\n  finishTimeDateHandler = date => {\n    let eventFinishTimeDate = {\n      dateObjectString: date.dateObjectString,\n      dateString: date.dateString,\n      day: date.day,\n      date: date.date,\n      month: date.month,\n      year: date.year,\n      timeString: date.time,\n      hour: date.hour,\n      minute: date.minute\n    };\n\n    // let currentShowFinishTimeDate = this.state.showFinishTimeDate\n    // showFinishTimeDate: !currentShowFinishTimeDate\n    this.setState({ finishTimeDate: eventFinishTimeDate });\n  };\n\n  eventTitleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n  eventNoteChange = e => {\n    this.setState({\n      eventNote: e.target.value\n    });\n  };\n\n  eventTypeChange = e => {\n    this.setState({\n      eventType: e.target.value\n    });\n  };\n\n  //if now day obj !available, will make one for that day, add events to it, else add events to that day\n  handleStartTimeDateChange(date) {\n    //let currentShowStartTimeDate = this.state.showStartTimeDate;\n    let day = format(date, 'E');\n    let dateDigit = format(date, 'dd');\n    let year = format(date, 'yy');\n    let month = format(date, 'MM');\n    let dayObjName = year + month + dateDigit + day;\n\n    console.log(`day: ${day} type: ${typeof day}`);\n    console.log(`date: ${dateDigit} type: ${typeof dateDigit}`);\n    console.log(`year: ${year} type: ${typeof year}`);\n    console.log(`month: ${month} type: ${typeof month}`);\n    console.log(`dayObjName: ${dayObjName} type: ${typeof dayObjName}`);\n\n    this.setState({\n      dayObjName: dayObjName,\n      eventStartTimeDate: {\n        dateObjectString: date.dateObjectString,\n        dateString: date.dateString,\n        day: date.day,\n        date: date.date,\n        month: date.month,\n        year: date.year,\n        timeString: date.time,\n        hour: date.hour,\n        minute: date.minute\n      }\n    });\n  }\n\n  static contextType = StoreDataContext;\n\n  render() {\n    //EventsData.toyCapability();\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <form>\n            <div className=\"form-group\">\n              <label>Event Title</label>\n              <input\n                type=\"text\"\n                name=\"eventTitle\"\n                className=\"form-control\"\n                ref={this.emptyTitle}\n                //defaultValue=\"NBA AllStar Game\"\n                value={this.state.eventTitle}\n                onChange={e => this.eventTitleChange(e)}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>Event Type</label>\n              <select\n                name=\"assignedTimeStart\"\n                className=\"form-control\"\n                placeholder=\"Enter Start Time.\"\n                onChange={e => this.eventTypeChange(e)}\n                id=\"assignedTimeStart\"\n                defaultValue=\"1\"\n              >\n                <option value=\"1\">Appointment</option>\n                <option value=\"2\">Meeting</option>\n                <option value=\"3\">One Time - Scheduled</option>\n                <option value=\"4\">One Time - Unschedule</option>\n                <option value=\"5\">Multi Day Event</option>\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label>Note</label>\n              <input\n                type=\"text\"\n                name=\"eventNote\"\n                className=\"form-control\"\n                defaultValue=\"Watch on Chanel 13\"\n                //value={this.state.eventNote}\n                onChange={e => this.eventNoteChange(e)}\n                //ref={eventNoteRef => eventNoteRef.focus()}\n              />\n\n              {/* <DatePickerPicker\n                startDateTimeHandler={date => this.startDateTimeHandler(date)}\n                finishTimeDateHandler={date => this.finishTimeHandler(date)}\n              /> */}\n\n              <DatePicker\n                placeholderText=\"Choose Start Time\"\n                selected={this.state.startDate}\n                onChange={date => this.handleStartTimeDateChange(date)}\n                showTimeSelect\n                timeFormat=\"HH:mm\"\n                timeIntervals={30}\n                timeCaption=\"Start\"\n                dateFormat=\"MMMM dd, yyyy\"\n              />\n            </div>\n\n            <button onClick={e => this.onSubmit(e)}>Submit</button>\n          </form>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NewEvent;\n\n// let date2 = {\n//   date: 31,\n//   dateObjectString:\n//     'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n//   toISOString: '2020-01-31T13:00:00.000Z',\n//   toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   dateString: 'Fri Jan 31 2020',\n//   timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n//   year: 2020,\n//   yearShort: 120,\n//   month: 0,\n//   day: 5,\n//   time: '8:00:00 AM',\n//   hour: 8,\n//   minute: 0,\n//   UTCDate: 31,\n//   toLocalString: '1/31/2020, 8:00:00 AM',\n//   toLocalDateString: '1/31/2020',\n//   toLocaleTimeString: '8:00:00 AM'\n// };\n"]},"metadata":{},"sourceType":"module"}