{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/RightCockpit.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport classes from '../../components/Cockpit/Cockpit.module.css';\nimport Cockpit from '../../components/Cockpit/Cockpit';\nimport Cockpit2 from '../../components/Cockpit/Cockpit2';\nimport Navbar2 from '../../components/Cockpit/Navbar/Navbar2';\nimport Tasks from '../../components/ViewContent/Tasks/Tasks';\nimport TodayTasks from '../../components/ViewContent/TodayTasks/TodayTasks';\nimport Lessons from '../../components/ViewContent/Syllabus/MaxReact/Lessons';\nimport ViewContentOptions from '../../components/Cockpit/ViewContentOptions';\nimport NewTask from '../../components/Creation/newTask';\nimport DisplayContent from '../../components/Cockpit/displayContent';\nimport Syllabus from '../../components/Creation/Syllabus';\nimport NewEvent from '../../components/Creation/NewEvent';\n\nclass RightCockpit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: [],\n      showEvents: false,\n      tasks: [{\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      }, {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      }, {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }],\n      Monday: [{\n        id: 'morning',\n        timeOfDay: '',\n        task: 'comprar comida'\n      }, {\n        id: 'afternoon',\n        timeOfDay: '',\n        task: 'eat lunch'\n      }, {\n        id: 'evening',\n        timeOfDay: '',\n        task: 'play ball'\n      }],\n      newTaskTitle: '',\n      newTaskLocation: '',\n      isGoing: true,\n      numberOfGuests: 2,\n      maxReact: [{\n        id: 'xvlwil',\n        lesson: '90. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbskk',\n        lesson: '91. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      contentChoice: '0',\n      showCockpit: true,\n      lastHeader: [],\n      lastTodayTasksHeader: [],\n      lastLessonHeader: [],\n      reRenderTasks: false,\n      syllabi: []\n    };\n\n    this.newTaskInfo2 = event => {\n      let newSyllabus = event.target.value; //let newSyllabus2 = event.target.hoot;\n\n      const wtf = this.state.syllabi;\n      wtf.push(newSyllabus);\n      this.setState({\n        syllabi: wtf\n      });\n      console.log(\"this is this.state.syllabi after maxReact push \".concat(JSON.stringify(this.state.syllabi, null, 2)));\n    };\n\n    this.contentViewHandler = event => {\n      let newViewChoice = event.target.value;\n      console.log(JSON.stringify(newViewChoice, null, 2)); //console.log(event.target.['location'].value);\n\n      let maxReact2 = new Syllabus('maxReact2', 'maxReact22222', '11asfd', 'Use this in fusfsasgnctions', '11.Read allasf about this'); //if array is empty no need to use spread operator\n\n      const wtf = this.state.syllabi;\n      wtf.push(maxReact2);\n      console.log(\"this is wtf after maxReact push \".concat(JSON.stringify(wtf, null, 2)));\n      this.setState({\n        syllabi: wtf\n      }); // console.log(\n      //   `this is syllabi object after maxReact1 ${JSON.stringify(\n      //     this.state.syllabi,\n      //     null,\n      //     2\n      //   )}`\n      // );\n      // //console.log(this.state.syllabi[0].syllabusTitle);\n      // let maxReact2 = new Syllabus(\n      //   'maxReact2',\n      //   'maxReact22222',\n      //   '11asfd',\n      //   'Use this in fusfsasgnctions',\n      //   '11.Read allasf about this'\n      // );\n      // const wtf2 = [this.state.syllabi];\n      // //if pushing... don't nead to spread the syllabi array out\n      // //console.log(` ${}`)\n      // wtf2.push(maxReact2);\n      // console.log(`this is wtf2 after the push${JSON.stringify(wtf2, null, 2)}`);\n      // //console.log(`This is wtf2 after push ${wtf2}`);\n      // this.setState({ syllabi: wtf2 });\n      // console.log(\n      //   `this is this.state.syllabi after setState ${JSON.stringify(\n      //     this.state.syllabi,\n      //     null,\n      //     2\n      //   )}`\n      // );\n      // for (let x = 0; x <= 2; x++) {\n      //   console.log(\n      //     `this is inside loop ${x}  ${JSON.stringify(\n      //       this.state.syllabi[x].syllabusTitle\n      //     )}`\n      //   );\n      // }\n      //console.log(\n      // `this is syllabi object ${JSON.stringify(this.state.syllabi[0], null, 3)}`)\n      // //console.log(\n      //   `this is syllabi object 1 ${JSON.stringify(\n      //     this.state.syllabi[1],\n      //     null,\n      //     3\n      //   )}`\n      // );\n      //Comparing new contentChoice with previous contentChoice\n      //if newContentChoice === oldContentChoice\n      //turn off the view\n\n      this.setState({\n        contentChoice: newViewChoice\n      });\n\n      if (newViewChoice === this.state.contentChoice) {\n        return this.setState({\n          contentChoice: '0'\n        });\n      } else {\n        switch (newViewChoice) {\n          case '1':\n            //All tasks\n            if (this.state.tasks != 0) {\n              this.setState({\n                lastHeader: this.state.tasks[0]\n              });\n            } else {\n              this.setState({\n                lastHeader: this.state.lastHeader\n              });\n            }\n\n            break;\n\n          case '2':\n            //TodaysTasks\n            if (this.state.Monday != 0) {\n              this.setState({\n                lastTodayTasksHeader: this.state.Monday[0]\n              });\n            } else {\n              this.setState({\n                lastTodayTasksHeader: this.state.lastTodayTasksHeader\n              });\n            }\n\n            break;\n\n          case '3':\n            //Syllabus\n            if (this.state.maxReact.length != 0) {\n              this.setState({\n                lastLessonHeader: this.state.maxReact[0]\n              });\n            } else {\n              this.setState({\n                lastLessonHeader: this.state.lastLessonHeader\n              });\n            }\n\n            break;\n        }\n      }\n    };\n\n    this.deleteTaskhandler = taskIndex => {\n      alert('Are you sure you want to delete this task?');\n      let tasks = []; // switch (this.state.contentChoice) {\n      //   case '1':\n      //     tasks = [...this.state.tasks];\n      //     break;\n      //   case '2':\n      //     tasks = [...this.state.Monday];\n      // }\n      // tasks.splice(taskIndex, 1);\n      // switch (this.state.contentChoice) {\n      //   case '1':\n      //     this.setState({ tasks: tasks });\n      //     break;\n      //   case '2':\n      //     this.setState({ Monday: tasks });\n      // }\n\n      switch (this.state.contentChoice) {\n        case '1':\n          tasks = [...this.state.tasks];\n          break;\n\n        case '2':\n          tasks = [...this.state.Monday];\n          break;\n\n        case '3':\n          tasks = [...this.state.maxReact];\n      }\n\n      tasks.splice(taskIndex, 1); // switch (this.state.contentChoice) {\n      //   case '1':\n      //     tasks = [...this.state.obj];\n      //     break;\n      //   case '2':\n      //     tasks = [...this.state.obj];\n      // }\n\n      switch (this.state.contentChoice) {\n        case '1':\n          this.setState({\n            tasks: tasks\n          });\n          break;\n\n        case '2':\n          this.setState({\n            Monday: tasks\n          });\n          break;\n\n        case '3':\n          this.setState({\n            maxReact: tasks\n          });\n      } // if (this.state.contentChoice === '1') {\n      //   //get tasks array\n      //   tasks = [...this.state.tasks];\n      //   tasks.splice(taskIndex, 1);\n      //   this.setState({ tasks: tasks });\n      // } else {\n      //   //get tasks array\n      //   tasks = [...this.state.Monday];\n      //   tasks.splice(taskIndex, 1);\n      //   this.setState({ Monday: tasks });\n      // }\n\n\n      this.setState({\n        reRenderTasks: true\n      }); // //splice task of interst\n      // tasks.splice(taskIndex, 1);\n      // //update new list of tasks to state\n      // this.setState({ tasks: tasks });\n      //this.setState({ showTasksCounter: false });\n    };\n\n    this.deleteTodayTaskhandler = taskIndex => {\n      alert('Are you sure you want to delete this task?');\n      this.setState({\n        reRenderTodayTasks: true\n      }); //get tasks array\n\n      const Monday = [...this.state.Monday]; //splice task of interst\n\n      Monday.splice(taskIndex, 1); //update new list of tasks to state\n\n      this.setState({\n        Monday: Monday\n      }); //this.setState({ showTasksCounter: false });\n    };\n\n    this.taskChangeHandler = (event, taskChangedId) => {\n      //find the task that matches the taskChangedId\n      const foundTaskId = this.state.tasks.findIndex(currentId => {\n        return currentId.id === taskChangedId;\n      }); //create new task item that we will put into array\n\n      const updatedTask = _objectSpread({}, this.state.tasks[foundTaskId]);\n\n      updatedTask.todo = event.target.value; //pull out the states tasks array\n\n      const tasks = [...this.state.tasks]; //update the task with id of interest w/ new task description\n\n      tasks[foundTaskId] = updatedTask; //update the state\n\n      this.setState({\n        tasks: tasks\n      });\n    };\n\n    this.newTaskHandler = event => {\n      console.log('hey I am in newTaskhandler');\n      console.log(event); //let newTask = { ...event };\n      //console.log(event);\n      // switch (event.target.name) {\n      //   case 'newTaskTitle':\n      //     console.log('got it here in newTasktitle');\n      //     break;\n      //   case 'location':\n      //     console.log('nbanbanbanba nba');\n      //     break;\n      //   case 'deadline':\n      //     console.log('I am in the deadline baby');\n      //     break;\n      // }\n      //console.log(event.target.value);\n      // let newTaskTitle = event.target.newTaskTitle;\n      // let newTaskTitleValue = event.target.value;\n      // let newLocation = event.target.location;\n      // let newLocationValue = event.target.value;\n      // console.log(`this is eventTargetvalue ${newTaskTitleValue}`);\n      // this.setState({\n      //   newTaskTitle: newTaskTitleValue,\n      //   newTaskLocation: newLocationValue\n      // });\n      // let oldTasks = [...this.state.tasks];\n      // oldTasks.push({\n      //   id: 'qrwrwq',\n      //   todo: 'Find work',\n      //   deadline: 'Lunes',\n      //   location: 'Poplado'\n      // });\n      // let newTitle = event.target.value.newTaskTitle;\n      // console.log(`this is inside of app.js newTaskHandler ${newTitle}`);\n    };\n\n    this.newTaskLocationHandler = event => {\n      // let location = event.target.value;\n      // console.log(event.name);\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.todayTaskChangeHandler = (event, taskChangedId) => {\n      //find the task that matches the taskChangedId\n      const foundTaskId = this.state.Monday.findIndex(currentId => {\n        return currentId.id === taskChangedId;\n      }); //create new task item that we will put into array\n\n      const updatedTask = _objectSpread({}, this.state.Monday[foundTaskId]);\n\n      updatedTask.task = event.target.value; //pull out the states tasks array\n\n      const Monday = [...this.state.Monday]; //update the task with id of interest w/ new task description\n\n      Monday[foundTaskId] = updatedTask; //update the state\n\n      this.setState({\n        Monday: Monday\n      });\n    };\n\n    this.deleteLessonhandler = taskIndex => {\n      alert('Are you sure you want to delete this task?');\n      this.setState({\n        reRenderTasks: true\n      }); //get tasks array\n\n      const lessons = [...this.state.maxReact]; //splice task of interst\n\n      lessons.splice(taskIndex, 1); //update new list of tasks to state\n\n      this.setState({\n        maxReact: lessons\n      });\n    };\n\n    this.lessonChangeHandler = (event, taskChangeId) => {\n      const foundTaskId = this.state.maxReact.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReact[foundTaskId]); //using updated values to define the lesson of the particular pulled out lesson\n\n\n      updatedLessons.lesson = event.target.value; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReact]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskId] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReact: lessons\n      });\n    };\n\n    this.newestEvent = e => {\n      console.log(e); // console.log(JSON.stringify(e.target.name, null, 2));\n      // console.log(JSON.stringify(e.target.value, null, 2));\n\n      let currentEvent = this.state.events;\n      let incomingEvent = {\n        title: e.title\n      }; //obj\n\n      console.log(incomingEvent); //console.log(JSON.stringify(incomingEvent, null, 3));\n      // let newestEvent = currentEvent.push(incomingEvent);\n      // this.setState({ events: newestEvent });\n      // this.setState({ showEvents: true });\n    };\n  } // const useSignUpForm = (callback) => {\n  //   const [inputs, setInputs] = useState({});\n  //   const handleSubmit = (event) => {\n  //     if (event) {\n  //       event.preventDefault();\n  //     }\n  //   }\n  //   const handleInputChange = (event) => {\n  //     event.persist();\n  //     setInputs(inputs => ({...inputs, [event.target.name]: event.target.value}));\n  //   }\n  //   return {\n  //     handleSubmit,\n  //     handleInputChange,\n  //     inputs\n  //   };\n  // }\n\n\n  render() {\n    let viewOptions = null;\n\n    if (this.state.showCockpit == true) {\n      viewOptions = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453\n        },\n        __self: this\n      }, React.createElement(Cockpit, {\n        title: this.props.appTitle,\n        allTasksClicked: this.toggleShowTasksHandler,\n        tasksLength: this.state.tasks.length,\n        todayTasksClicked: this.displayTodayScheduleHandler,\n        deleteCockpit: () => {\n          this.setState({\n            showCockpit: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454\n        },\n        __self: this\n      }));\n    }\n\n    let displayCockpit = React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"d-flex flex-row \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card text-white bg-info m-1 p-1 col-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"p-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, viewOptions)), React.createElement(\"div\", {\n      className: \"card bg-light m-1 p-1 col-9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"p-1 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, React.createElement(DisplayContent, {\n      deleteTaskhandler: this.deleteTaskhandler,\n      everything: this.state,\n      newTaskInfo: event => this.contentViewHandler(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    })))));\n    let navbar = React.createElement(Navbar2, {\n      newTaskInfoComing: event => this.newTaskHandler(event),\n      newTaskInfo: event => this.eventContentViewHandler(event),\n      title: this.props.appTitle,\n      tasksLength: this.state.tasks.length,\n      clicked: event => this.contentViewHandler(event),\n      clickedSyllabus: event => this.contentViewHandler(event),\n      clickedNewTask: event => this.contentViewHandler(event),\n      newTaskInfo2: event => this.newTaskHandler(event),\n      deleteCockpit: () => {\n        this.setState({\n          showCockpit: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, this.props.newTaskInfoComing);\n    let viewContentOptions = React.createElement(ViewContentOptions, {\n      viewContent: event => this.contentViewHandler(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }); //testing out Class without having component for syllabus\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, navbar, React.createElement(NewEvent, {\n      newestEvent: e => this.newestEvent(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }), viewContentOptions, displayCockpit, this.state.showEvents ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, this.state.events[0]) : null);\n  }\n\n}\n\nexport default RightCockpit; //<div> {JSON.stringify(this.state.events, null, 3)}</div>","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/RightCockpit.js"],"names":["React","Component","classes","Cockpit","Cockpit2","Navbar2","Tasks","TodayTasks","Lessons","ViewContentOptions","NewTask","DisplayContent","Syllabus","NewEvent","RightCockpit","constructor","props","state","events","showEvents","tasks","id","todo","deadline","location","Monday","timeOfDay","task","newTaskTitle","newTaskLocation","isGoing","numberOfGuests","maxReact","lesson","completion","contentChoice","showCockpit","lastHeader","lastTodayTasksHeader","lastLessonHeader","reRenderTasks","syllabi","newTaskInfo2","event","newSyllabus","target","value","wtf","push","setState","console","log","JSON","stringify","contentViewHandler","newViewChoice","maxReact2","length","deleteTaskhandler","taskIndex","alert","splice","deleteTodayTaskhandler","reRenderTodayTasks","taskChangeHandler","taskChangedId","foundTaskId","findIndex","currentId","updatedTask","newTaskHandler","newTaskLocationHandler","type","checked","name","todayTaskChangeHandler","deleteLessonhandler","lessons","lessonChangeHandler","taskChangeId","updatedLessons","newestEvent","e","currentEvent","incomingEvent","title","render","viewOptions","appTitle","toggleShowTasksHandler","displayTodayScheduleHandler","displayCockpit","navbar","eventContentViewHandler","newTaskInfoComing","viewContentOptions"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from '../../components/Cockpit/Cockpit.module.css';\nimport Cockpit from '../../components/Cockpit/Cockpit';\nimport Cockpit2 from '../../components/Cockpit/Cockpit2';\nimport Navbar2 from '../../components/Cockpit/Navbar/Navbar2';\nimport Tasks from '../../components/ViewContent/Tasks/Tasks';\nimport TodayTasks from '../../components/ViewContent/TodayTasks/TodayTasks';\nimport Lessons from '../../components/ViewContent/Syllabus/MaxReact/Lessons';\nimport ViewContentOptions from '../../components/Cockpit/ViewContentOptions';\nimport NewTask from '../../components/Creation/newTask';\nimport DisplayContent from '../../components/Cockpit/displayContent';\nimport Syllabus from '../../components/Creation/Syllabus';\nimport NewEvent from '../../components/Creation/NewEvent';\nclass RightCockpit extends Component {\n  constructor(props) {\n    super(props);\n  }\n  // const useSignUpForm = (callback) => {\n  //   const [inputs, setInputs] = useState({});\n  //   const handleSubmit = (event) => {\n  //     if (event) {\n  //       event.preventDefault();\n  //     }\n  //   }\n\n  //   const handleInputChange = (event) => {\n  //     event.persist();\n  //     setInputs(inputs => ({...inputs, [event.target.name]: event.target.value}));\n\n  //   }\n  //   return {\n  //     handleSubmit,\n  //     handleInputChange,\n  //     inputs\n  //   };\n  // }\n\n  state = {\n    events: [],\n    showEvents: false,\n    tasks: [\n      {\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      },\n      {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      },\n      {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }\n    ],\n    Monday: [\n      { id: 'morning', timeOfDay: '', task: 'comprar comida' },\n      { id: 'afternoon', timeOfDay: '', task: 'eat lunch' },\n      { id: 'evening', timeOfDay: '', task: 'play ball' }\n    ],\n    newTaskTitle: '',\n    newTaskLocation: '',\n    isGoing: true,\n    numberOfGuests: 2,\n    maxReact: [\n      { id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n      { id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n      {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    contentChoice: '0',\n    showCockpit: true,\n    lastHeader: [],\n    lastTodayTasksHeader: [],\n    lastLessonHeader: [],\n    reRenderTasks: false,\n    syllabi: []\n  };\n  newTaskInfo2 = event => {\n    let newSyllabus = event.target.value;\n    //let newSyllabus2 = event.target.hoot;\n\n    const wtf = this.state.syllabi;\n    wtf.push(newSyllabus);\n    this.setState({ syllabi: wtf });\n    console.log(\n      `this is this.state.syllabi after maxReact push ${JSON.stringify(\n        this.state.syllabi,\n        null,\n        2\n      )}`\n    );\n  };\n  contentViewHandler = event => {\n    let newViewChoice = event.target.value;\n    console.log(JSON.stringify(newViewChoice, null, 2));\n    //console.log(event.target.['location'].value);\n\n    let maxReact2 = new Syllabus(\n      'maxReact2',\n      'maxReact22222',\n      '11asfd',\n      'Use this in fusfsasgnctions',\n      '11.Read allasf about this'\n    );\n\n    //if array is empty no need to use spread operator\n    const wtf = this.state.syllabi;\n\n    wtf.push(maxReact2);\n    console.log(\n      `this is wtf after maxReact push ${JSON.stringify(wtf, null, 2)}`\n    );\n\n    this.setState({ syllabi: wtf });\n    // console.log(\n    //   `this is syllabi object after maxReact1 ${JSON.stringify(\n    //     this.state.syllabi,\n    //     null,\n    //     2\n    //   )}`\n    // );\n    // //console.log(this.state.syllabi[0].syllabusTitle);\n\n    // let maxReact2 = new Syllabus(\n    //   'maxReact2',\n    //   'maxReact22222',\n    //   '11asfd',\n    //   'Use this in fusfsasgnctions',\n    //   '11.Read allasf about this'\n    // );\n\n    // const wtf2 = [this.state.syllabi];\n    // //if pushing... don't nead to spread the syllabi array out\n    // //console.log(` ${}`)\n    // wtf2.push(maxReact2);\n    // console.log(`this is wtf2 after the push${JSON.stringify(wtf2, null, 2)}`);\n    // //console.log(`This is wtf2 after push ${wtf2}`);\n    // this.setState({ syllabi: wtf2 });\n    // console.log(\n    //   `this is this.state.syllabi after setState ${JSON.stringify(\n    //     this.state.syllabi,\n    //     null,\n    //     2\n    //   )}`\n    // );\n    // for (let x = 0; x <= 2; x++) {\n    //   console.log(\n    //     `this is inside loop ${x}  ${JSON.stringify(\n    //       this.state.syllabi[x].syllabusTitle\n    //     )}`\n    //   );\n    // }\n    //console.log(\n    // `this is syllabi object ${JSON.stringify(this.state.syllabi[0], null, 3)}`)\n\n    // //console.log(\n    //   `this is syllabi object 1 ${JSON.stringify(\n    //     this.state.syllabi[1],\n    //     null,\n    //     3\n    //   )}`\n    // );\n\n    //Comparing new contentChoice with previous contentChoice\n    //if newContentChoice === oldContentChoice\n    //turn off the view\n    this.setState({ contentChoice: newViewChoice });\n    if (newViewChoice === this.state.contentChoice) {\n      return this.setState({ contentChoice: '0' });\n    } else {\n      switch (newViewChoice) {\n        case '1': //All tasks\n          if (this.state.tasks != 0) {\n            this.setState({ lastHeader: this.state.tasks[0] });\n          } else {\n            this.setState({ lastHeader: this.state.lastHeader });\n          }\n          break;\n\n        case '2': //TodaysTasks\n          if (this.state.Monday != 0) {\n            this.setState({ lastTodayTasksHeader: this.state.Monday[0] });\n          } else {\n            this.setState({\n              lastTodayTasksHeader: this.state.lastTodayTasksHeader\n            });\n          }\n          break;\n\n        case '3': //Syllabus\n          if (this.state.maxReact.length != 0) {\n            this.setState({ lastLessonHeader: this.state.maxReact[0] });\n          } else {\n            this.setState({ lastLessonHeader: this.state.lastLessonHeader });\n          }\n\n          break;\n      }\n    }\n  };\n\n  //delete a task\n  deleteTaskhandler = taskIndex => {\n    alert('Are you sure you want to delete this task?');\n\n    let tasks = [];\n\n    // switch (this.state.contentChoice) {\n    //   case '1':\n    //     tasks = [...this.state.tasks];\n    //     break;\n    //   case '2':\n    //     tasks = [...this.state.Monday];\n    // }\n    // tasks.splice(taskIndex, 1);\n\n    // switch (this.state.contentChoice) {\n    //   case '1':\n    //     this.setState({ tasks: tasks });\n    //     break;\n    //   case '2':\n    //     this.setState({ Monday: tasks });\n    // }\n\n    switch (this.state.contentChoice) {\n      case '1':\n        tasks = [...this.state.tasks];\n        break;\n      case '2':\n        tasks = [...this.state.Monday];\n        break;\n      case '3':\n        tasks = [...this.state.maxReact];\n    }\n\n    tasks.splice(taskIndex, 1);\n\n    // switch (this.state.contentChoice) {\n    //   case '1':\n    //     tasks = [...this.state.obj];\n    //     break;\n    //   case '2':\n    //     tasks = [...this.state.obj];\n    // }\n\n    switch (this.state.contentChoice) {\n      case '1':\n        this.setState({ tasks: tasks });\n        break;\n      case '2':\n        this.setState({ Monday: tasks });\n        break;\n      case '3':\n        this.setState({ maxReact: tasks });\n    }\n\n    // if (this.state.contentChoice === '1') {\n    //   //get tasks array\n    //   tasks = [...this.state.tasks];\n    //   tasks.splice(taskIndex, 1);\n    //   this.setState({ tasks: tasks });\n    // } else {\n    //   //get tasks array\n    //   tasks = [...this.state.Monday];\n    //   tasks.splice(taskIndex, 1);\n    //   this.setState({ Monday: tasks });\n    // }\n\n    this.setState({ reRenderTasks: true });\n\n    // //splice task of interst\n    // tasks.splice(taskIndex, 1);\n\n    // //update new list of tasks to state\n    // this.setState({ tasks: tasks });\n\n    //this.setState({ showTasksCounter: false });\n  };\n\n  deleteTodayTaskhandler = taskIndex => {\n    alert('Are you sure you want to delete this task?');\n    this.setState({ reRenderTodayTasks: true });\n\n    //get tasks array\n    const Monday = [...this.state.Monday];\n\n    //splice task of interst\n    Monday.splice(taskIndex, 1);\n\n    //update new list of tasks to state\n    this.setState({ Monday: Monday });\n\n    //this.setState({ showTasksCounter: false });\n  };\n\n  //dynamic edit task\n  taskChangeHandler = (event, taskChangedId) => {\n    //find the task that matches the taskChangedId\n    const foundTaskId = this.state.tasks.findIndex(currentId => {\n      return currentId.id === taskChangedId;\n    });\n\n    //create new task item that we will put into array\n    const updatedTask = { ...this.state.tasks[foundTaskId] };\n    updatedTask.todo = event.target.value;\n\n    //pull out the states tasks array\n    const tasks = [...this.state.tasks];\n\n    //update the task with id of interest w/ new task description\n    tasks[foundTaskId] = updatedTask;\n\n    //update the state\n    this.setState({ tasks: tasks });\n  };\n\n  //dynamic edit task for Today (Monday)\n  newTaskHandler = event => {\n    console.log('hey I am in newTaskhandler');\n    console.log(event);\n\n    //let newTask = { ...event };\n    //console.log(event);\n\n    // switch (event.target.name) {\n    //   case 'newTaskTitle':\n    //     console.log('got it here in newTasktitle');\n    //     break;\n    //   case 'location':\n    //     console.log('nbanbanbanba nba');\n    //     break;\n    //   case 'deadline':\n    //     console.log('I am in the deadline baby');\n    //     break;\n    // }\n\n    //console.log(event.target.value);\n    // let newTaskTitle = event.target.newTaskTitle;\n    // let newTaskTitleValue = event.target.value;\n    // let newLocation = event.target.location;\n    // let newLocationValue = event.target.value;\n    // console.log(`this is eventTargetvalue ${newTaskTitleValue}`);\n    // this.setState({\n    //   newTaskTitle: newTaskTitleValue,\n    //   newTaskLocation: newLocationValue\n    // });\n\n    // let oldTasks = [...this.state.tasks];\n    // oldTasks.push({\n    //   id: 'qrwrwq',\n    //   todo: 'Find work',\n    //   deadline: 'Lunes',\n    //   location: 'Poplado'\n    // });\n\n    // let newTitle = event.target.value.newTaskTitle;\n    // console.log(`this is inside of app.js newTaskHandler ${newTitle}`);\n  };\n  newTaskLocationHandler = event => {\n    // let location = event.target.value;\n    // console.log(event.name);\n\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  todayTaskChangeHandler = (event, taskChangedId) => {\n    //find the task that matches the taskChangedId\n    const foundTaskId = this.state.Monday.findIndex(currentId => {\n      return currentId.id === taskChangedId;\n    });\n\n    //create new task item that we will put into array\n    const updatedTask = { ...this.state.Monday[foundTaskId] };\n\n    updatedTask.task = event.target.value;\n\n    //pull out the states tasks array\n    const Monday = [...this.state.Monday];\n\n    //update the task with id of interest w/ new task description\n    Monday[foundTaskId] = updatedTask;\n\n    //update the state\n    this.setState({ Monday: Monday });\n  };\n\n  deleteLessonhandler = taskIndex => {\n    alert('Are you sure you want to delete this task?');\n    this.setState({ reRenderTasks: true });\n\n    //get tasks array\n    const lessons = [...this.state.maxReact];\n\n    //splice task of interst\n    lessons.splice(taskIndex, 1);\n\n    //update new list of tasks to state\n    this.setState({ maxReact: lessons });\n  };\n\n  lessonChangeHandler = (event, taskChangeId) => {\n    const foundTaskId = this.state.maxReact.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReact[foundTaskId] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    updatedLessons.lesson = event.target.value;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReact];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskId] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReact: lessons });\n  };\n  newestEvent = e => {\n    console.log(e);\n    // console.log(JSON.stringify(e.target.name, null, 2));\n    // console.log(JSON.stringify(e.target.value, null, 2));\n    let currentEvent = this.state.events;\n    let incomingEvent = { title: e.title }; //obj\n    console.log(incomingEvent);\n\n    //console.log(JSON.stringify(incomingEvent, null, 3));\n    // let newestEvent = currentEvent.push(incomingEvent);\n    // this.setState({ events: newestEvent });\n    // this.setState({ showEvents: true });\n  };\n  render() {\n    let viewOptions = null;\n    if (this.state.showCockpit == true) {\n      viewOptions = (\n        <React.Fragment>\n          <Cockpit\n            title={this.props.appTitle}\n            allTasksClicked={this.toggleShowTasksHandler}\n            tasksLength={this.state.tasks.length}\n            todayTasksClicked={this.displayTodayScheduleHandler}\n            deleteCockpit={() => {\n              this.setState({ showCockpit: false });\n            }}\n          />\n        </React.Fragment>\n      );\n    }\n\n    let displayCockpit = (\n      <div className=\"container\">\n        <div className=\"d-flex flex-row \">\n          <div className=\"card text-white bg-info m-1 p-1 col-3\">\n            <div className=\"p-1\">{viewOptions}</div>\n          </div>\n          <div className=\"card bg-light m-1 p-1 col-9\">\n            <div className=\"p-1 \">\n              <DisplayContent\n                deleteTaskhandler={this.deleteTaskhandler}\n                everything={this.state}\n                newTaskInfo={event => this.contentViewHandler(event)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n\n    let navbar = (\n      <Navbar2\n        newTaskInfoComing={event => this.newTaskHandler(event)}\n        newTaskInfo={event => this.eventContentViewHandler(event)}\n        title={this.props.appTitle}\n        tasksLength={this.state.tasks.length}\n        clicked={event => this.contentViewHandler(event)}\n        clickedSyllabus={event => this.contentViewHandler(event)}\n        clickedNewTask={event => this.contentViewHandler(event)}\n        newTaskInfo2={event => this.newTaskHandler(event)}\n        deleteCockpit={() => {\n          this.setState({ showCockpit: false });\n        }}\n      >\n        {this.props.newTaskInfoComing}\n      </Navbar2>\n    );\n\n    let viewContentOptions = (\n      <ViewContentOptions\n        viewContent={event => this.contentViewHandler(event)}\n      />\n    );\n    //testing out Class without having component for syllabus\n\n    return (\n      <React.Fragment>\n        {navbar}\n        <NewEvent newestEvent={e => this.newestEvent(e)} />\n        {viewContentOptions}\n        {displayCockpit}\n        {this.state.showEvents ? <p>{this.state.events[0]}</p> : null}\n      </React.Fragment>\n    );\n  }\n}\nexport default RightCockpit;\n//<div> {JSON.stringify(this.state.events, null, 3)}</div>\n"]},"metadata":{},"sourceType":"module"}