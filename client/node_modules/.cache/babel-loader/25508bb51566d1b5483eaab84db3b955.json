{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/src/ResourceEvents.js\";\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport AddMore from './AddMore';\nimport Summary from './Summary';\nimport SelectedArea from './SelectedArea';\nimport { CellUnits, DATETIME_FORMAT, SummaryPos } from './index';\nimport { getPos } from './Util';\nimport { DnDTypes } from './DnDTypes';\nconst supportTouch = 'ontouchstart' in window;\n\nclass ResourceEvents extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initDrag = ev => {\n      const isSelecting = this.state.isSelecting;\n      if (isSelecting) return;\n      if ((ev.srcElement || ev.target) !== this.eventContainer) return;\n      ev.stopPropagation();\n      const resourceEvents = this.props.resourceEvents;\n      if (resourceEvents.groupOnly) return;\n      let clientX = 0;\n\n      if (supportTouch) {\n        if (ev.changedTouches.length == 0) return;\n        const touch = ev.changedTouches[0];\n        clientX = touch.pageX;\n      } else {\n        if (ev.buttons !== undefined && ev.buttons !== 1) return;\n        clientX = ev.clientX;\n      }\n\n      const schedulerData = this.props.schedulerData;\n      let cellWidth = schedulerData.getContentCellWidth();\n      let pos = getPos(this.eventContainer);\n      let startX = clientX - pos.x;\n      let leftIndex = Math.floor(startX / cellWidth);\n      let left = leftIndex * cellWidth;\n      let rightIndex = Math.ceil(startX / cellWidth);\n      let width = (rightIndex - leftIndex) * cellWidth;\n      this.setState({\n        startX: startX,\n        left: left,\n        leftIndex: leftIndex,\n        width: width,\n        rightIndex: rightIndex,\n        isSelecting: true\n      });\n\n      if (supportTouch) {\n        document.documentElement.addEventListener('touchmove', this.doDrag, false);\n        document.documentElement.addEventListener('touchend', this.stopDrag, false);\n        document.documentElement.addEventListener('touchcancel', this.cancelDrag, false);\n      } else {\n        document.documentElement.addEventListener('mousemove', this.doDrag, false);\n        document.documentElement.addEventListener('mouseup', this.stopDrag, false);\n      }\n\n      document.onselectstart = function () {\n        return false;\n      };\n\n      document.ondragstart = function () {\n        return false;\n      };\n    };\n\n    this.doDrag = ev => {\n      ev.stopPropagation();\n      let clientX = 0;\n\n      if (supportTouch) {\n        if (ev.changedTouches.length == 0) return;\n        const touch = ev.changedTouches[0];\n        clientX = touch.pageX;\n      } else {\n        clientX = ev.clientX;\n      }\n\n      const startX = this.state.startX;\n      const schedulerData = this.props.schedulerData;\n      const headers = schedulerData.headers;\n      let cellWidth = schedulerData.getContentCellWidth();\n      let pos = getPos(this.eventContainer);\n      let currentX = clientX - pos.x;\n      let leftIndex = Math.floor(Math.min(startX, currentX) / cellWidth);\n      leftIndex = leftIndex < 0 ? 0 : leftIndex;\n      let left = leftIndex * cellWidth;\n      let rightIndex = Math.ceil(Math.max(startX, currentX) / cellWidth);\n      rightIndex = rightIndex > headers.length ? headers.length : rightIndex;\n      let width = (rightIndex - leftIndex) * cellWidth;\n      this.setState({\n        leftIndex: leftIndex,\n        left: left,\n        rightIndex: rightIndex,\n        width: width,\n        isSelecting: true\n      });\n    };\n\n    this.stopDrag = ev => {\n      ev.stopPropagation();\n      const _this$props = this.props,\n            schedulerData = _this$props.schedulerData,\n            newEvent = _this$props.newEvent,\n            resourceEvents = _this$props.resourceEvents;\n      const headers = schedulerData.headers,\n            events = schedulerData.events,\n            config = schedulerData.config,\n            cellUnit = schedulerData.cellUnit,\n            localeMoment = schedulerData.localeMoment;\n      const _this$state = this.state,\n            leftIndex = _this$state.leftIndex,\n            rightIndex = _this$state.rightIndex;\n\n      if (supportTouch) {\n        document.documentElement.removeEventListener('touchmove', this.doDrag, false);\n        document.documentElement.removeEventListener('touchend', this.stopDrag, false);\n        document.documentElement.removeEventListener('touchcancel', this.cancelDrag, false);\n      } else {\n        document.documentElement.removeEventListener('mousemove', this.doDrag, false);\n        document.documentElement.removeEventListener('mouseup', this.stopDrag, false);\n      }\n\n      document.onselectstart = null;\n      document.ondragstart = null;\n      let startTime = headers[leftIndex].time;\n      let endTime = resourceEvents.headerItems[rightIndex - 1].end;\n      if (cellUnit !== CellUnits.Hour) endTime = localeMoment(resourceEvents.headerItems[rightIndex - 1].start).hour(23).minute(59).second(59).format(DATETIME_FORMAT);\n      let slotId = resourceEvents.slotId;\n      let slotName = resourceEvents.slotName;\n      this.setState({\n        startX: 0,\n        leftIndex: 0,\n        left: 0,\n        rightIndex: 0,\n        width: 0,\n        isSelecting: false\n      });\n      let hasConflict = false;\n\n      if (config.checkConflict) {\n        let start = localeMoment(startTime),\n            end = localeMoment(endTime);\n        events.forEach(e => {\n          if (schedulerData._getEventSlotId(e) === slotId) {\n            let eStart = localeMoment(e.start),\n                eEnd = localeMoment(e.end);\n            if (start >= eStart && start < eEnd || end > eStart && end <= eEnd || eStart >= start && eStart < end || eEnd > start && eEnd <= end) hasConflict = true;\n          }\n        });\n      }\n\n      if (hasConflict) {\n        const conflictOccurred = this.props.conflictOccurred;\n\n        if (conflictOccurred != undefined) {\n          conflictOccurred(schedulerData, 'New', {\n            id: undefined,\n            start: startTime,\n            end: endTime,\n            slotId: slotId,\n            slotName: slotName,\n            title: undefined\n          }, DnDTypes.EVENT, slotId, slotName, startTime, endTime);\n        } else {\n          console.log('Conflict occurred, set conflictOccurred func in Scheduler to handle it');\n        }\n      } else {\n        if (newEvent != undefined) newEvent(schedulerData, slotId, slotName, startTime, endTime);\n      }\n    };\n\n    this.cancelDrag = ev => {\n      ev.stopPropagation();\n      const isSelecting = this.state.isSelecting;\n\n      if (isSelecting) {\n        document.documentElement.removeEventListener('touchmove', this.doDrag, false);\n        document.documentElement.removeEventListener('touchend', this.stopDrag, false);\n        document.documentElement.removeEventListener('touchcancel', this.cancelDrag, false);\n        document.onselectstart = null;\n        document.ondragstart = null;\n        this.setState({\n          startX: 0,\n          leftIndex: 0,\n          left: 0,\n          rightIndex: 0,\n          width: 0,\n          isSelecting: false\n        });\n      }\n    };\n\n    this.onAddMoreClick = headerItem => {\n      const _this$props2 = this.props,\n            onSetAddMoreState = _this$props2.onSetAddMoreState,\n            resourceEvents = _this$props2.resourceEvents,\n            schedulerData = _this$props2.schedulerData;\n\n      if (!!onSetAddMoreState) {\n        const config = schedulerData.config;\n        let cellWidth = schedulerData.getContentCellWidth();\n        let index = resourceEvents.headerItems.indexOf(headerItem);\n\n        if (index !== -1) {\n          let left = index * (cellWidth - 1);\n          let pos = getPos(this.eventContainer);\n          left = left + pos.x;\n          let top = pos.y;\n          let height = (headerItem.count + 1) * config.eventItemLineHeight + 20;\n          onSetAddMoreState({\n            headerItem: headerItem,\n            left: left,\n            top: top,\n            height: height\n          });\n        }\n      }\n    };\n\n    this.eventContainerRef = element => {\n      this.eventContainer = element;\n    };\n\n    this.state = {\n      isSelecting: false,\n      left: 0,\n      width: 0\n    };\n  }\n\n  componentDidMount() {\n    const schedulerData = this.props.schedulerData;\n    const config = schedulerData.config;\n\n    if (config.creatable === true) {\n      if (supportTouch) {// this.eventContainer.addEventListener('touchstart', this.initDrag, false);\n      } else {\n        this.eventContainer.addEventListener('mousedown', this.initDrag, false);\n      }\n    }\n  }\n\n  componentWillReceiveProps(np) {\n    if (supportTouch) {// this.eventContainer.removeEventListener('touchstart', this.initDrag, false);\n    } else {\n      this.eventContainer.removeEventListener('mousedown', this.initDrag, false);\n    }\n\n    if (np.schedulerData.config.creatable) {\n      if (supportTouch) {// this.eventContainer.addEventListener('touchstart', this.initDrag, false);\n      } else {\n        this.eventContainer.addEventListener('mousedown', this.initDrag, false);\n      }\n    }\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          resourceEvents = _this$props3.resourceEvents,\n          schedulerData = _this$props3.schedulerData,\n          connectDropTarget = _this$props3.connectDropTarget,\n          dndSource = _this$props3.dndSource;\n    const cellUnit = schedulerData.cellUnit,\n          startDate = schedulerData.startDate,\n          endDate = schedulerData.endDate,\n          config = schedulerData.config,\n          localeMoment = schedulerData.localeMoment;\n    const _this$state2 = this.state,\n          isSelecting = _this$state2.isSelecting,\n          left = _this$state2.left,\n          width = _this$state2.width;\n    let cellWidth = schedulerData.getContentCellWidth();\n    let cellMaxEvents = schedulerData.getCellMaxEvents();\n    let rowWidth = schedulerData.getContentTableWidth();\n    let DnDEventItem = dndSource.getDragSource();\n    let selectedArea = isSelecting ? React.createElement(SelectedArea, Object.assign({}, this.props, {\n      left: left,\n      width: width,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    });\n    let eventList = [];\n    resourceEvents.headerItems.forEach((headerItem, index) => {\n      if (headerItem.count > 0 || headerItem.summary != undefined) {\n        let isTop = config.summaryPos === SummaryPos.TopRight || config.summaryPos === SummaryPos.Top || config.summaryPos === SummaryPos.TopLeft;\n        let marginTop = resourceEvents.hasSummary && isTop ? 1 + config.eventItemLineHeight : 1;\n        let renderEventsMaxIndex = headerItem.addMore === 0 ? cellMaxEvents : headerItem.addMoreIndex;\n        headerItem.events.forEach((evt, idx) => {\n          if (idx < renderEventsMaxIndex && evt !== undefined && evt.render) {\n            let durationStart = localeMoment(startDate);\n            let durationEnd = localeMoment(endDate).add(1, 'days');\n\n            if (cellUnit === CellUnits.Hour) {\n              durationStart = localeMoment(startDate).add(config.dayStartFrom, 'hours');\n              durationEnd = localeMoment(endDate).add(config.dayStopTo + 1, 'hours');\n            }\n\n            let eventStart = localeMoment(evt.eventItem.start);\n            let eventEnd = localeMoment(evt.eventItem.end);\n            let isStart = eventStart >= durationStart;\n            let isEnd = eventEnd <= durationEnd;\n            let left = index * cellWidth + (index > 0 ? 2 : 3);\n            let width = evt.span * cellWidth - (index > 0 ? 5 : 6) > 0 ? evt.span * cellWidth - (index > 0 ? 5 : 6) : 0;\n            let top = marginTop + idx * config.eventItemLineHeight;\n            let eventItem = React.createElement(DnDEventItem, Object.assign({}, this.props, {\n              key: evt.eventItem.id,\n              eventItem: evt.eventItem,\n              isStart: isStart,\n              isEnd: isEnd,\n              isInPopover: false,\n              left: left,\n              width: width,\n              top: top,\n              leftIndex: index,\n              rightIndex: index + evt.span,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 282\n              },\n              __self: this\n            }));\n            eventList.push(eventItem);\n          }\n        });\n\n        if (headerItem.addMore > 0) {\n          let left = index * cellWidth + (index > 0 ? 2 : 3);\n          let width = cellWidth - (index > 0 ? 5 : 6);\n          let top = marginTop + headerItem.addMoreIndex * config.eventItemLineHeight;\n          let addMoreItem = React.createElement(AddMore, Object.assign({}, this.props, {\n            key: headerItem.time,\n            headerItem: headerItem,\n            number: headerItem.addMore,\n            left: left,\n            width: width,\n            top: top,\n            clickAction: this.onAddMoreClick,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 303\n            },\n            __self: this\n          }));\n          eventList.push(addMoreItem);\n        }\n\n        if (headerItem.summary != undefined) {\n          let top = isTop ? 1 : resourceEvents.rowHeight - config.eventItemLineHeight + 1;\n          let left = index * cellWidth + (index > 0 ? 2 : 3);\n          let width = cellWidth - (index > 0 ? 5 : 6);\n          let key = \"\".concat(resourceEvents.slotId, \"_\").concat(headerItem.time);\n          let summary = React.createElement(Summary, {\n            key: key,\n            schedulerData: schedulerData,\n            summary: headerItem.summary,\n            left: left,\n            width: width,\n            top: top,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 321\n            },\n            __self: this\n          });\n          eventList.push(summary);\n        }\n      }\n    });\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      style: {\n        width: rowWidth\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, connectDropTarget(React.createElement(\"div\", {\n      ref: this.eventContainerRef,\n      className: \"event-container\",\n      style: {\n        height: resourceEvents.rowHeight\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, selectedArea, eventList))));\n  }\n\n}\n\nResourceEvents.propTypes = {\n  resourceEvents: PropTypes.object.isRequired,\n  schedulerData: PropTypes.object.isRequired,\n  dndSource: PropTypes.object.isRequired,\n  onSetAddMoreState: PropTypes.func,\n  updateEventStart: PropTypes.func,\n  updateEventEnd: PropTypes.func,\n  moveEvent: PropTypes.func,\n  movingEvent: PropTypes.func,\n  conflictOccurred: PropTypes.func,\n  subtitleGetter: PropTypes.func,\n  eventItemClick: PropTypes.func,\n  viewEventClick: PropTypes.func,\n  viewEventText: PropTypes.string,\n  viewEvent2Click: PropTypes.func,\n  viewEvent2Text: PropTypes.string,\n  newEvent: PropTypes.func,\n  eventItemTemplateResolver: PropTypes.func\n};\nexport default ResourceEvents;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/src/ResourceEvents.js"],"names":["React","Component","PropTypes","AddMore","Summary","SelectedArea","CellUnits","DATETIME_FORMAT","SummaryPos","getPos","DnDTypes","supportTouch","window","ResourceEvents","constructor","props","initDrag","ev","isSelecting","state","srcElement","target","eventContainer","stopPropagation","resourceEvents","groupOnly","clientX","changedTouches","length","touch","pageX","buttons","undefined","schedulerData","cellWidth","getContentCellWidth","pos","startX","x","leftIndex","Math","floor","left","rightIndex","ceil","width","setState","document","documentElement","addEventListener","doDrag","stopDrag","cancelDrag","onselectstart","ondragstart","headers","currentX","min","max","newEvent","events","config","cellUnit","localeMoment","removeEventListener","startTime","time","endTime","headerItems","end","Hour","start","hour","minute","second","format","slotId","slotName","hasConflict","checkConflict","forEach","e","_getEventSlotId","eStart","eEnd","conflictOccurred","id","title","EVENT","console","log","onAddMoreClick","headerItem","onSetAddMoreState","index","indexOf","top","y","height","count","eventItemLineHeight","eventContainerRef","element","componentDidMount","creatable","componentWillReceiveProps","np","render","connectDropTarget","dndSource","startDate","endDate","cellMaxEvents","getCellMaxEvents","rowWidth","getContentTableWidth","DnDEventItem","getDragSource","selectedArea","eventList","summary","isTop","summaryPos","TopRight","Top","TopLeft","marginTop","hasSummary","renderEventsMaxIndex","addMore","addMoreIndex","evt","idx","durationStart","durationEnd","add","dayStartFrom","dayStopTo","eventStart","eventItem","eventEnd","isStart","isEnd","span","push","addMoreItem","rowHeight","key","propTypes","object","isRequired","func","updateEventStart","updateEventEnd","moveEvent","movingEvent","subtitleGetter","eventItemClick","viewEventClick","viewEventText","string","viewEvent2Click","viewEvent2Text","eventItemTemplateResolver"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {PropTypes} from 'prop-types'\r\nimport AddMore from './AddMore'\r\nimport Summary from './Summary'\r\nimport SelectedArea from './SelectedArea'\r\nimport {CellUnits, DATETIME_FORMAT, SummaryPos} from './index'\r\nimport {getPos} from './Util'\r\nimport {DnDTypes} from './DnDTypes'\r\nconst supportTouch = 'ontouchstart' in window;\r\n\r\nclass ResourceEvents extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isSelecting: false,\r\n            left: 0,\r\n            width: 0,\r\n        }\r\n    }\r\n\r\n    static propTypes = {\r\n        resourceEvents: PropTypes.object.isRequired,\r\n        schedulerData: PropTypes.object.isRequired,\r\n        dndSource: PropTypes.object.isRequired,\r\n        onSetAddMoreState: PropTypes.func,\r\n        updateEventStart: PropTypes.func,\r\n        updateEventEnd: PropTypes.func,\r\n        moveEvent: PropTypes.func,\r\n        movingEvent: PropTypes.func,\r\n        conflictOccurred: PropTypes.func,\r\n        subtitleGetter: PropTypes.func,\r\n        eventItemClick: PropTypes.func,\r\n        viewEventClick: PropTypes.func,\r\n        viewEventText:PropTypes.string,\r\n        viewEvent2Click: PropTypes.func,\r\n        viewEvent2Text: PropTypes.string,\r\n        newEvent: PropTypes.func,\r\n        eventItemTemplateResolver: PropTypes.func,\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {schedulerData} = this.props;\r\n        const {config} = schedulerData;\r\n        if(config.creatable === true) {\r\n            if(supportTouch) {\r\n                // this.eventContainer.addEventListener('touchstart', this.initDrag, false);\r\n            } else {\r\n                this.eventContainer.addEventListener('mousedown', this.initDrag, false);\r\n            }            \r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(np) {\r\n        if(supportTouch) {\r\n            // this.eventContainer.removeEventListener('touchstart', this.initDrag, false);\r\n        } else {\r\n            this.eventContainer.removeEventListener('mousedown', this.initDrag, false);\r\n        }        \r\n        if(np.schedulerData.config.creatable) {\r\n            if(supportTouch) {\r\n                // this.eventContainer.addEventListener('touchstart', this.initDrag, false);\r\n            } else {\r\n                this.eventContainer.addEventListener('mousedown', this.initDrag, false);\r\n            }\r\n        }            \r\n    }\r\n\r\n    initDrag = (ev) => {\r\n        const { isSelecting } = this.state;\r\n        if(isSelecting) return;\r\n        if((ev.srcElement || ev.target) !== this.eventContainer) return;\r\n\r\n        ev.stopPropagation();\r\n        \r\n        const {resourceEvents} = this.props;\r\n        if(resourceEvents.groupOnly) return;\r\n        let clientX = 0;\r\n        if(supportTouch) {\r\n            if(ev.changedTouches.length == 0) return;\r\n            const touch = ev.changedTouches[0];\r\n            clientX = touch.pageX;\r\n        } else {\r\n            if(ev.buttons !== undefined && ev.buttons !== 1) return;\r\n            clientX = ev.clientX;\r\n        }\r\n\r\n        const {schedulerData} = this.props;\r\n        let cellWidth = schedulerData.getContentCellWidth();\r\n        let pos = getPos(this.eventContainer);\r\n        let startX = clientX - pos.x;\r\n        let leftIndex = Math.floor(startX/cellWidth);\r\n        let left = leftIndex*cellWidth;\r\n        let rightIndex = Math.ceil(startX/cellWidth);\r\n        let width = (rightIndex - leftIndex)*cellWidth;\r\n\r\n        this.setState({\r\n            startX: startX,\r\n            left: left,\r\n            leftIndex: leftIndex,\r\n            width: width,\r\n            rightIndex: rightIndex,\r\n            isSelecting: true\r\n        });\r\n\r\n        if(supportTouch) {\r\n            document.documentElement.addEventListener('touchmove', this.doDrag, false);\r\n            document.documentElement.addEventListener('touchend', this.stopDrag, false);\r\n            document.documentElement.addEventListener('touchcancel', this.cancelDrag, false);\r\n        } else {\r\n            document.documentElement.addEventListener('mousemove', this.doDrag, false);\r\n            document.documentElement.addEventListener('mouseup', this.stopDrag, false);\r\n        }\r\n        document.onselectstart = function () {\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\tdocument.ondragstart = function () {\r\n\t\t\treturn false;\r\n\t\t};\r\n    }\r\n\r\n    doDrag = (ev) => {\r\n        ev.stopPropagation();\r\n\r\n        let clientX = 0;\r\n        if(supportTouch) {\r\n            if(ev.changedTouches.length == 0) return;\r\n            const touch = ev.changedTouches[0];\r\n            clientX = touch.pageX;\r\n        } else {\r\n            clientX = ev.clientX;\r\n        }\r\n        const { startX } = this.state;\r\n        const {schedulerData} = this.props;\r\n        const {headers} = schedulerData;\r\n        let cellWidth = schedulerData.getContentCellWidth();\r\n        let pos = getPos(this.eventContainer);\r\n        let currentX = clientX - pos.x;\r\n        let leftIndex = Math.floor(Math.min(startX, currentX)/cellWidth);\r\n        leftIndex = leftIndex < 0 ? 0 : leftIndex;\r\n        let left = leftIndex*cellWidth;\r\n        let rightIndex = Math.ceil(Math.max(startX, currentX)/cellWidth);\r\n        rightIndex = rightIndex > headers.length ? headers.length : rightIndex;\r\n        let width = (rightIndex - leftIndex)*cellWidth;\r\n\r\n        this.setState({\r\n            leftIndex: leftIndex,\r\n            left: left,\r\n            rightIndex: rightIndex,\r\n            width: width,\r\n            isSelecting: true\r\n        });\r\n    }\r\n\r\n    stopDrag = (ev) => {\r\n        ev.stopPropagation();\r\n\r\n        const {schedulerData, newEvent, resourceEvents} = this.props;\r\n        const {headers, events, config, cellUnit, localeMoment} = schedulerData;\r\n        const { leftIndex, rightIndex } = this.state;\r\n        if(supportTouch) {\r\n            document.documentElement.removeEventListener('touchmove', this.doDrag, false);\r\n            document.documentElement.removeEventListener('touchend', this.stopDrag, false);\r\n            document.documentElement.removeEventListener('touchcancel', this.cancelDrag, false);\r\n        } else {\r\n            document.documentElement.removeEventListener('mousemove', this.doDrag, false);\r\n            document.documentElement.removeEventListener('mouseup', this.stopDrag, false);\r\n        }\r\n        document.onselectstart = null;\r\n        document.ondragstart = null;\r\n\r\n        let startTime = headers[leftIndex].time;\r\n        let endTime = resourceEvents.headerItems[rightIndex - 1].end;\r\n        if(cellUnit !== CellUnits.Hour)\r\n            endTime = localeMoment(resourceEvents.headerItems[rightIndex - 1].start).hour(23).minute(59).second(59).format(DATETIME_FORMAT);\r\n        let slotId = resourceEvents.slotId;\r\n        let slotName = resourceEvents.slotName;\r\n\r\n        this.setState({\r\n            startX: 0,\r\n            leftIndex: 0,\r\n            left: 0,\r\n            rightIndex: 0,\r\n            width: 0,\r\n            isSelecting: false\r\n        });\r\n\r\n        let hasConflict = false;\r\n        if(config.checkConflict){\r\n            let start = localeMoment(startTime),\r\n                end = localeMoment(endTime);\r\n\r\n            events.forEach((e) =>{\r\n                if(schedulerData._getEventSlotId(e) === slotId) {\r\n                    let eStart = localeMoment(e.start),\r\n                        eEnd = localeMoment(e.end);\r\n                    if((start >= eStart && start < eEnd) || (end > eStart && end <= eEnd) || (eStart >= start && eStart < end) || (eEnd > start && eEnd <= end))\r\n                        hasConflict = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        if(hasConflict) {\r\n            const {conflictOccurred} = this.props;\r\n            if(conflictOccurred != undefined){\r\n                conflictOccurred(schedulerData, 'New', {\r\n                    id: undefined,\r\n                    start: startTime,\r\n                    end: endTime,\r\n                    slotId: slotId,\r\n                    slotName: slotName,\r\n                    title: undefined,\r\n                }, DnDTypes.EVENT, slotId, slotName, startTime, endTime);\r\n            }\r\n            else {\r\n                console.log('Conflict occurred, set conflictOccurred func in Scheduler to handle it');\r\n            }\r\n        }\r\n        else {\r\n            if(newEvent != undefined)\r\n                newEvent(schedulerData, slotId, slotName, startTime, endTime);\r\n        }\r\n    }\r\n\r\n    cancelDrag = (ev) => {\r\n        ev.stopPropagation();\r\n\r\n        const { isSelecting } = this.state;\r\n        if(isSelecting) {\r\n            document.documentElement.removeEventListener('touchmove', this.doDrag, false);\r\n            document.documentElement.removeEventListener('touchend', this.stopDrag, false);\r\n            document.documentElement.removeEventListener('touchcancel', this.cancelDrag, false);\r\n            document.onselectstart = null;\r\n            document.ondragstart = null;\r\n            this.setState({\r\n                startX: 0,\r\n                leftIndex: 0,\r\n                left: 0,\r\n                rightIndex: 0,\r\n                width: 0,\r\n                isSelecting: false\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {resourceEvents, schedulerData, connectDropTarget, dndSource} = this.props;\r\n        const {cellUnit, startDate, endDate, config, localeMoment} = schedulerData;\r\n        const {isSelecting, left, width} = this.state;\r\n        let cellWidth = schedulerData.getContentCellWidth();\r\n        let cellMaxEvents = schedulerData.getCellMaxEvents();\r\n        let rowWidth = schedulerData.getContentTableWidth();\r\n        let DnDEventItem = dndSource.getDragSource();\r\n\r\n        let selectedArea = isSelecting ? <SelectedArea {...this.props} left={left} width={width} /> : <div />;\r\n\r\n        let eventList = [];\r\n        resourceEvents.headerItems.forEach((headerItem, index) => {\r\n\r\n            if (headerItem.count > 0 || headerItem.summary != undefined) {\r\n\r\n                let isTop = config.summaryPos === SummaryPos.TopRight || config.summaryPos === SummaryPos.Top || config.summaryPos === SummaryPos.TopLeft;\r\n                let marginTop = resourceEvents.hasSummary && isTop ? 1 + config.eventItemLineHeight : 1;\r\n                let renderEventsMaxIndex = headerItem.addMore === 0 ? cellMaxEvents : headerItem.addMoreIndex;\r\n\r\n                headerItem.events.forEach((evt, idx) => {\r\n                    if(idx < renderEventsMaxIndex && evt !== undefined && evt.render) {\r\n                        let durationStart = localeMoment(startDate);\r\n                        let durationEnd = localeMoment(endDate).add(1, 'days');\r\n                        if(cellUnit === CellUnits.Hour){\r\n                            durationStart = localeMoment(startDate).add(config.dayStartFrom, 'hours');\r\n                            durationEnd = localeMoment(endDate).add(config.dayStopTo + 1, 'hours');\r\n                        }\r\n                        let eventStart = localeMoment(evt.eventItem.start);\r\n                        let eventEnd = localeMoment(evt.eventItem.end);\r\n                        let isStart = eventStart >= durationStart;\r\n                        let isEnd = eventEnd <= durationEnd;\r\n                        let left = index*cellWidth + (index > 0 ? 2 : 3);\r\n                        let width = (evt.span * cellWidth - (index > 0 ? 5 : 6)) > 0 ? (evt.span * cellWidth - (index > 0 ? 5 : 6)) : 0;\r\n                        let top = marginTop + idx*config.eventItemLineHeight;\r\n                        let eventItem = <DnDEventItem\r\n                                                   {...this.props}\r\n                                                   key={evt.eventItem.id}\r\n                                                   eventItem={evt.eventItem}\r\n                                                   isStart={isStart}\r\n                                                   isEnd={isEnd}\r\n                                                   isInPopover={false}\r\n                                                   left={left}\r\n                                                   width={width}\r\n                                                   top={top}\r\n                                                   leftIndex={index}\r\n                                                   rightIndex={index + evt.span}\r\n                                                   />\r\n                        eventList.push(eventItem);\r\n                    }\r\n                });\r\n\r\n                if(headerItem.addMore > 0) {\r\n                    let left = index*cellWidth + (index > 0 ? 2 : 3);\r\n                    let width = cellWidth - (index > 0 ? 5 : 6);\r\n                    let top = marginTop + headerItem.addMoreIndex*config.eventItemLineHeight;\r\n                    let addMoreItem = <AddMore\r\n                                            {...this.props}\r\n                                            key={headerItem.time}\r\n                                            headerItem={headerItem}\r\n                                            number={headerItem.addMore}\r\n                                            left={left}\r\n                                            width={width}\r\n                                            top={top}\r\n                                            clickAction={this.onAddMoreClick}\r\n                                        />;\r\n                    eventList.push(addMoreItem);\r\n                }\r\n\r\n                if(headerItem.summary != undefined) {\r\n                    let top = isTop ? 1 : resourceEvents.rowHeight - config.eventItemLineHeight + 1;\r\n                    let left = index*cellWidth + (index > 0 ? 2 : 3);\r\n                    let width = cellWidth - (index > 0 ? 5 : 6);\r\n                    let key = `${resourceEvents.slotId}_${headerItem.time}`;\r\n                    let summary = <Summary key={key} schedulerData={schedulerData} summary={headerItem.summary} left={left} width={width} top={top} />;\r\n                    eventList.push(summary);\r\n                }\r\n            }\r\n        });\r\n\r\n        return (\r\n            <tr>\r\n                <td style={{width: rowWidth}}>\r\n                    {\r\n                        connectDropTarget(\r\n                            <div ref={this.eventContainerRef} className=\"event-container\" style={{height: resourceEvents.rowHeight}}>\r\n                                {selectedArea}\r\n                                {eventList}\r\n                            </div>\r\n                        )\r\n                    }\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    onAddMoreClick = (headerItem) => {\r\n        const {onSetAddMoreState, resourceEvents, schedulerData} = this.props;\r\n        if(!!onSetAddMoreState){\r\n            const {config} = schedulerData;\r\n            let cellWidth = schedulerData.getContentCellWidth();\r\n            let index = resourceEvents.headerItems.indexOf(headerItem);\r\n            if(index !== -1){\r\n                let left = index*(cellWidth -1);\r\n                let pos = getPos(this.eventContainer);\r\n                left = left + pos.x;\r\n                let top = pos.y;\r\n                let height = (headerItem.count + 1) * config.eventItemLineHeight + 20;\r\n\r\n                onSetAddMoreState({\r\n                    headerItem: headerItem,\r\n                    left: left,\r\n                    top: top,\r\n                    height: height\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    eventContainerRef = (element) => {\r\n        this.eventContainer = element;\r\n    }\r\n}\r\n\r\nexport default ResourceEvents\r\n"]},"metadata":{},"sourceType":"module"}