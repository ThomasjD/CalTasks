{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/RightCockpit.js\";\nimport React, { Component } from 'react';\nimport classes from '../../components/Cockpit/Cockpit.module.css';\nimport Cockpit from '../../components/Cockpit/Cockpit';\nimport Cockpit2 from '../../components/Cockpit/Cockpit2';\nimport Navbar2 from '../../components/Cockpit/Navbar/Navbar2';\nimport Tasks from '../../components/ViewContent/Tasks/Tasks';\nimport TodayTasks from '../../components/ViewContent/TodayTasks/TodayTasks';\nimport Lessons from '../../components/ViewContent/Syllabus/MaxReact/Lessons';\nimport ViewContentOptions from '../../components/Cockpit/ViewContentOptions';\nimport NewTask from '../../components/Creation/newTask';\nimport DisplayContent from '../../components/Cockpit/displayContent';\nimport Syllabus from '../../components/Creation/Syllabus';\nimport classes2 from './RightCockpit.module.css';\nimport DatePickerPicker from './DatePicker.js';\nimport ShowAllTasksAfterAddingTask from '../../context/tasksContext';\nimport SyllabusContext from '../../context/syllabusContext';\nimport TasksDataContext from '../../context/tasksContext';\n\nclass RightCockpit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: [],\n      showEvents: false,\n      showDatePicker: false,\n      newTask: [],\n      tasks: [{\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      }, {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      }, {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }],\n      Monday: [{\n        id: 'morning',\n        timeOfDay: '',\n        task: 'comprar comida'\n      }, {\n        id: 'afternoon',\n        timeOfDay: '',\n        task: 'eat lunch'\n      }, {\n        id: 'evening',\n        timeOfDay: '',\n        task: 'play ball'\n      }],\n      newTaskTitle: '',\n      newTaskLocation: '',\n      isGoing: true,\n      numberOfGuests: 2,\n      contentChoice: '0',\n      showCockpit: true,\n      lastHeader: [],\n      lastTodayTasksHeader: [],\n      lastLessonHeader: [],\n      reRenderTasks: false,\n      syllabi: [],\n      contentChoiceHandlerTestNum: 7,\n      realNum: '8',\n      showLeftOverLessonsFromSyllabus: false,\n      SyllabusDataStructure: {},\n      blowfish: 'hootie'\n    };\n\n    this.newTaskInfo2 = event => {\n      let newSyllabus = event.target.value;\n      const syllabi = this.state.syllabi;\n      syllabi.push(newSyllabus);\n      this.setState({\n        syllabi: syllabi\n      });\n      console.log(\"this is this.state.syllabi after maxReact push \".concat(JSON.stringify(this.state.syllabi, null, 2)));\n    };\n\n    this.contentViewHandler = event => {\n      console.log('inside contentViewer');\n      let newViewChoice = event.target.value;\n      this.setState({\n        contentChoice: newViewChoice\n      }); //Comparing new contentChoice with previous contentChoice\n      //if newContentChoice === oldContentChoice\n      //turn off the view\n\n      if (newViewChoice === this.state.contentChoice) {\n        return this.setState({\n          contentChoice: '0'\n        });\n      } else {\n        switch (newViewChoice) {\n          case '1':\n            //All tasks\n            this.context.dataRequestHandler(event, 'tasks', '1', null, null); // if (this.state.tasks != 0) {\n            //   this.setState({ lastHeader: this.state.tasks[0] });\n            // } else {\n            //   this.setState({ lastHeader: this.state.lastHeader });\n            // }\n\n            break;\n\n          case '2':\n            //TodaysTasks\n            // if (this.state.Monday != 0) {\n            //   this.setState({ lastTodayTasksHeader: this.state.Monday[0] });\n            // } else {\n            //   this.setState({\n            //     lastTodayTasksHeader: this.state.lastTodayTasksHeader\n            //   });\n            // }\n            this.context.dataRequestHandler(event, 'tasks', '2', null, null);\n            break;\n\n          case '3':\n            //Syllabus (for viewing Syllabus)\n            //reaching out to SyllabusData\n            this.context.dataRequestHandler(event, 'syllabus', '1', null, null);\n            break;\n\n          case '6':\n            //Adding Lessons from Syllabus\n            //syllabusData\n            //this.props.sendSyllabusDataHandler('6');\n            this.context.dataRequestHandler(event, 'syllabus', '6', null, null); //this.props.showLeftOverLessonsFromSyllabus();\n\n            break;\n\n          case '7':\n            console.log('Inside case 7');\n            break;\n        }\n      }\n    };\n\n    this.newestTaskHandler = contentChoice => {\n      let newContentChoice = contentChoice;\n      let contentViewObject = {\n        target: {\n          value: newContentChoice\n        }\n      };\n      this.contentViewHandler(contentViewObject);\n    };\n\n    this.newTaskLocationHandler = event => {\n      // let location = event.target.value;\n      // console.log(event.name);\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value,\n        realNum: '1'\n      });\n    };\n\n    this.newestEventHandler = e => {\n      console.log(e); // console.log(JSON.stringify(e.target.name, null, 2));\n      // console.log(JSON.stringify(e.target.value, null, 2));\n      //let currentEvent = this.state.events;\n\n      let incomingEvent = {\n        title: e.title,\n        name: e.name\n      }; //obj\n\n      let newestEvent = [...this.state.events, incomingEvent];\n      console.log(newestEvent[0].title); //console.log(JSON.stringify(incomingEvent, null, 3));\n      // let newestEvent = currentEvent.push(incomingEvent);\n\n      this.setState({\n        events: newestEvent\n      });\n      this.setState({\n        showEvents: true\n      });\n    };\n\n    this.newestSyllabusHandler = contentChoice => {\n      //this handler send message to contentViewHandler to render the new assigned contentchoice\n      //console.log(`i am inside of newestSyllabusHandler event: ${event}`);\n      let newContentChoice = contentChoice;\n      let contentViewObject = {\n        target: {\n          value: newContentChoice\n        }\n      };\n      this.contentViewHandler(contentViewObject);\n    };\n  }\n\n  // static contextType = SyllabusContext;\n  render() {\n    let viewOptions = null;\n\n    if (this.state.showCockpit == true) {\n      viewOptions = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(Cockpit, {\n        title: this.props.appTitle,\n        allTasksClicked: this.toggleShowTasksHandler,\n        tasksLength: this.state.tasks.length,\n        todayTasksClicked: this.displayTodayScheduleHandler,\n        deleteCockpit: () => {\n          this.setState({\n            showCockpit: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }));\n    }\n\n    let displayCockpit = React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row d-flex d-lg-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-lg-4 order-1 float-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card text-white bg-info m-3 p-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, viewOptions))), React.createElement(\"div\", {\n      className: \"col-lg-8 order-0 float-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card bg-light m-3 p-3 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(DisplayContent, {\n      contentViewHandler: event => this.contentViewHandler(event),\n      newestSyllabus: event => this.newestSyllabusHandler(event),\n      deleteTaskhandler: this.deleteTaskhandler,\n      todayTaskChangeHandler: this.todayTaskChangeHandler,\n      taskChangeHandler: this.taskChangeHandler,\n      everything: this.state,\n      everythingSyllabus: this.props.everythingSyllabus,\n      lessonChangeHandler: this.props.lessonChangeHandler,\n      newestTaskHandler: event => this.newestTaskHandler(event),\n      newestEvent: event => this.newestEventHandler(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }))));\n    let navbar = React.createElement(Navbar2, {\n      newTaskInfoComing: event => this.newTaskHandler(event),\n      newTaskInfo: event => this.eventContentViewHandler(event),\n      clickedNewEvent: event => this.contentViewHandler(event),\n      title: this.props.appTitle,\n      tasksLength: this.state.tasks.length,\n      clicked: event => this.contentViewHandler(event),\n      clickedSyllabus: event => this.contentViewHandler(event),\n      clickedNewTask: event => this.contentViewHandler(event),\n      newTaskInfo2: event => this.newTaskHandler(event),\n      deleteCockpit: () => {\n        this.setState({\n          showCockpit: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, this.props.newTaskInfoComing);\n    let viewContentOptions = React.createElement(ViewContentOptions, {\n      contentViewHandler: event => this.contentViewHandler(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    });\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, navbar, viewContentOptions, displayCockpit);\n  }\n\n}\n\nRightCockpit.contextType = TasksDataContext;\nexport default RightCockpit;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/RightCockpit.js"],"names":["React","Component","classes","Cockpit","Cockpit2","Navbar2","Tasks","TodayTasks","Lessons","ViewContentOptions","NewTask","DisplayContent","Syllabus","classes2","DatePickerPicker","ShowAllTasksAfterAddingTask","SyllabusContext","TasksDataContext","RightCockpit","constructor","props","state","events","showEvents","showDatePicker","newTask","tasks","id","todo","deadline","location","Monday","timeOfDay","task","newTaskTitle","newTaskLocation","isGoing","numberOfGuests","contentChoice","showCockpit","lastHeader","lastTodayTasksHeader","lastLessonHeader","reRenderTasks","syllabi","contentChoiceHandlerTestNum","realNum","showLeftOverLessonsFromSyllabus","SyllabusDataStructure","blowfish","newTaskInfo2","event","newSyllabus","target","value","push","setState","console","log","JSON","stringify","contentViewHandler","newViewChoice","context","dataRequestHandler","newestTaskHandler","newContentChoice","contentViewObject","newTaskLocationHandler","type","checked","name","newestEventHandler","e","incomingEvent","title","newestEvent","newestSyllabusHandler","render","viewOptions","appTitle","toggleShowTasksHandler","length","displayTodayScheduleHandler","displayCockpit","deleteTaskhandler","todayTaskChangeHandler","taskChangeHandler","everythingSyllabus","lessonChangeHandler","navbar","newTaskHandler","eventContentViewHandler","newTaskInfoComing","viewContentOptions","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from '../../components/Cockpit/Cockpit.module.css';\nimport Cockpit from '../../components/Cockpit/Cockpit';\nimport Cockpit2 from '../../components/Cockpit/Cockpit2';\nimport Navbar2 from '../../components/Cockpit/Navbar/Navbar2';\nimport Tasks from '../../components/ViewContent/Tasks/Tasks';\nimport TodayTasks from '../../components/ViewContent/TodayTasks/TodayTasks';\nimport Lessons from '../../components/ViewContent/Syllabus/MaxReact/Lessons';\nimport ViewContentOptions from '../../components/Cockpit/ViewContentOptions';\nimport NewTask from '../../components/Creation/newTask';\nimport DisplayContent from '../../components/Cockpit/displayContent';\nimport Syllabus from '../../components/Creation/Syllabus';\nimport classes2 from './RightCockpit.module.css';\nimport DatePickerPicker from './DatePicker.js';\nimport ShowAllTasksAfterAddingTask from '../../context/tasksContext';\nimport SyllabusContext from '../../context/syllabusContext';\nimport TasksDataContext from '../../context/tasksContext';\n\nclass RightCockpit extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    events: [],\n    showEvents: false,\n    showDatePicker: false,\n    newTask: [],\n    tasks: [\n      {\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      },\n      {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      },\n      {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }\n    ],\n    Monday: [\n      { id: 'morning', timeOfDay: '', task: 'comprar comida' },\n      { id: 'afternoon', timeOfDay: '', task: 'eat lunch' },\n      { id: 'evening', timeOfDay: '', task: 'play ball' }\n    ],\n    newTaskTitle: '',\n    newTaskLocation: '',\n    isGoing: true,\n    numberOfGuests: 2,\n    contentChoice: '0',\n    showCockpit: true,\n    lastHeader: [],\n    lastTodayTasksHeader: [],\n    lastLessonHeader: [],\n    reRenderTasks: false,\n    syllabi: [],\n    contentChoiceHandlerTestNum: 7,\n    realNum: '8',\n    showLeftOverLessonsFromSyllabus: false,\n    SyllabusDataStructure: {},\n    blowfish: 'hootie'\n  };\n\n  newTaskInfo2 = event => {\n    let newSyllabus = event.target.value;\n\n    const syllabi = this.state.syllabi;\n    syllabi.push(newSyllabus);\n    this.setState({ syllabi: syllabi });\n    console.log(\n      `this is this.state.syllabi after maxReact push ${JSON.stringify(\n        this.state.syllabi,\n        null,\n        2\n      )}`\n    );\n  };\n\n  /*\n      console.log(newViewChoice);\n    console.log(JSON.stringify(newViewChoice, null, 2));\n    //console.log(event.target.['location'].value);\n\n    let maxReact2 = new Syllabus(\n      'maxReact2',\n      'maxReact22222',\n      '11asfd',\n      'Use this in fusfsasgnctions',\n      '11.Read allasf about this'\n    );\n\n    //if array is empty no need to use spread operator\n    const tryOutSyllabi = this.state.syllabi;\n\n    tryOutSyllabi.push(maxReact2);\n\n    this.setState({ syllabi: tryOutSyllabi });\n*/\n\n  contentViewHandler = event => {\n    console.log('inside contentViewer');\n    let newViewChoice = event.target.value;\n    this.setState({ contentChoice: newViewChoice });\n\n    //Comparing new contentChoice with previous contentChoice\n    //if newContentChoice === oldContentChoice\n    //turn off the view\n\n    if (newViewChoice === this.state.contentChoice) {\n      return this.setState({ contentChoice: '0' });\n    } else {\n      switch (newViewChoice) {\n        case '1': //All tasks\n          this.context.dataRequestHandler(event, 'tasks', '1', null, null);\n          // if (this.state.tasks != 0) {\n          //   this.setState({ lastHeader: this.state.tasks[0] });\n          // } else {\n          //   this.setState({ lastHeader: this.state.lastHeader });\n          // }\n          break;\n\n        case '2': //TodaysTasks\n          // if (this.state.Monday != 0) {\n          //   this.setState({ lastTodayTasksHeader: this.state.Monday[0] });\n          // } else {\n          //   this.setState({\n          //     lastTodayTasksHeader: this.state.lastTodayTasksHeader\n          //   });\n          // }\n\n          this.context.dataRequestHandler(event, 'tasks', '2', null, null);\n\n          break;\n\n        case '3': //Syllabus (for viewing Syllabus)\n          //reaching out to SyllabusData\n\n          this.context.dataRequestHandler(event, 'syllabus', '1', null, null);\n\n          break;\n\n        case '6': //Adding Lessons from Syllabus\n          //syllabusData\n          //this.props.sendSyllabusDataHandler('6');\n          this.context.dataRequestHandler(event, 'syllabus', '6', null, null);\n          //this.props.showLeftOverLessonsFromSyllabus();\n          break;\n        case '7':\n          console.log('Inside case 7');\n\n          break;\n      }\n    }\n  };\n\n  //dynamic edit task for Today (Monday)\n  newestTaskHandler = contentChoice => {\n    let newContentChoice = contentChoice;\n    let contentViewObject = {\n      target: {\n        value: newContentChoice\n      }\n    };\n\n    this.contentViewHandler(contentViewObject);\n  };\n\n  newTaskLocationHandler = event => {\n    // let location = event.target.value;\n    // console.log(event.name);\n\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n      realNum: '1'\n    });\n  };\n\n  newestEventHandler = e => {\n    console.log(e);\n    // console.log(JSON.stringify(e.target.name, null, 2));\n    // console.log(JSON.stringify(e.target.value, null, 2));\n    //let currentEvent = this.state.events;\n    let incomingEvent = { title: e.title, name: e.name }; //obj\n\n    let newestEvent = [...this.state.events, incomingEvent];\n    console.log(newestEvent[0].title);\n    //console.log(JSON.stringify(incomingEvent, null, 3));\n    // let newestEvent = currentEvent.push(incomingEvent);\n    this.setState({ events: newestEvent });\n    this.setState({ showEvents: true });\n  };\n\n  newestSyllabusHandler = contentChoice => {\n    //this handler send message to contentViewHandler to render the new assigned contentchoice\n    //console.log(`i am inside of newestSyllabusHandler event: ${event}`);\n\n    let newContentChoice = contentChoice;\n    let contentViewObject = {\n      target: {\n        value: newContentChoice\n      }\n    };\n\n    this.contentViewHandler(contentViewObject);\n  };\n\n  //static usually used in getDerivedStateFromProps\n  //static contextType = ShowAllTasksAfterAddingTask;\n  static contextType = TasksDataContext;\n  // static contextType = SyllabusContext;\n  render() {\n    let viewOptions = null;\n    if (this.state.showCockpit == true) {\n      viewOptions = (\n        <React.Fragment>\n          <Cockpit\n            title={this.props.appTitle}\n            allTasksClicked={this.toggleShowTasksHandler}\n            tasksLength={this.state.tasks.length}\n            todayTasksClicked={this.displayTodayScheduleHandler}\n            deleteCockpit={() => {\n              this.setState({ showCockpit: false });\n            }}\n          />\n        </React.Fragment>\n      );\n    }\n\n    let displayCockpit = (\n      <div className=\"container\">\n        <div className=\"row d-flex d-lg-block\">\n          <div className=\"col-lg-4 order-1 float-left\">\n            <div className=\"card text-white bg-info m-3 p-3\">{viewOptions}</div>\n          </div>\n        </div>\n\n        <div className=\"col-lg-8 order-0 float-left\">\n          <div className=\"card bg-light m-3 p-3 \">\n            <DisplayContent\n              contentViewHandler={event => this.contentViewHandler(event)}\n              newestSyllabus={event => this.newestSyllabusHandler(event)}\n              deleteTaskhandler={this.deleteTaskhandler}\n              todayTaskChangeHandler={this.todayTaskChangeHandler}\n              taskChangeHandler={this.taskChangeHandler}\n              everything={this.state}\n              everythingSyllabus={this.props.everythingSyllabus}\n              lessonChangeHandler={this.props.lessonChangeHandler}\n              newestTaskHandler={event => this.newestTaskHandler(event)}\n              newestEvent={event => this.newestEventHandler(event)}\n            />\n          </div>\n        </div>\n      </div>\n    );\n\n    let navbar = (\n      <Navbar2\n        newTaskInfoComing={event => this.newTaskHandler(event)}\n        newTaskInfo={event => this.eventContentViewHandler(event)}\n        clickedNewEvent={event => this.contentViewHandler(event)}\n        title={this.props.appTitle}\n        tasksLength={this.state.tasks.length}\n        clicked={event => this.contentViewHandler(event)}\n        clickedSyllabus={event => this.contentViewHandler(event)}\n        clickedNewTask={event => this.contentViewHandler(event)}\n        newTaskInfo2={event => this.newTaskHandler(event)}\n        deleteCockpit={() => {\n          this.setState({ showCockpit: false });\n        }}\n      >\n        {this.props.newTaskInfoComing}\n      </Navbar2>\n    );\n\n    let viewContentOptions = (\n      <ViewContentOptions\n        contentViewHandler={event => this.contentViewHandler(event)}\n      />\n    );\n\n    return (\n      <React.Fragment>\n        {navbar}\n\n        {viewContentOptions}\n\n        {displayCockpit}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default RightCockpit;\n"]},"metadata":{},"sourceType":"module"}