{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/Creation/NewEvent.js\";\nimport React, { Component } from 'react';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport ReactDatePicker from '../Calendar/ReactDatePicker'; //import RightCockpitContext from '../../context/RightCockpitContext';\n\nimport TasksDataContext from '../../context/tasksContext';\nimport Icon from '../Calendar/Icon';\nimport { Form, Input, FormGroup, Container, Label } from 'reactstrap';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\nimport { fi } from 'date-fns/locale';\n\nclass NewEvent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      eventId: '',\n      //task + date + start time\n      eventTitle: '',\n      eventNote: '',\n      eventCategory: '',\n      //errand,multiday event, single day event, (radial choices)\n      //required\n      startTimeDate: '',\n      finishTimeDate: '',\n      eventDuration: '',\n      //\n      blockOffTimeSlot: false,\n      showStartTimeDate: false,\n      showFinishTimeDate: false,\n      deadline: ''\n    };\n\n    this.newEventHandler = (event, info) => {\n      //let contentchoice = event.target.value;\n      let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n      let handlerChoice = ''; //string: '#' handler inside of database\n\n      let dataLocation = ''; // string: where obj found inside database\n\n      let infoType = ''; //string: index/id/\n      //let info = ''; //string: actual info\n      // let value = '';\n\n      let dataRequestMessage = {};\n\n      switch (this.props.contentChoice) {\n        case '5':\n          typeOfData = 'events';\n          handlerChoice = '1';\n          dataLocation = '';\n          infoType = 'id'; //info = '';\n\n          break;\n\n        case '4':\n          break;\n\n        case '5':\n          break;\n\n        case '6':\n          break;\n      }\n\n      dataRequestMessage = {\n        typeOfData: typeOfData,\n        handlerChoice: handlerChoice,\n        dataLocation: dataLocation,\n        infoType: infoType,\n        info: info\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage);\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      let typeOfData = 'events';\n      let handlerChoice = '';\n      let dataLocation = '';\n      let infoType = 'newEvent';\n      let info = this.state; // this.setState({ blue: 'blue' }, event =>\n      //   this.context.dataRequestHandler(\n      //     event,\n      //     typeOfData,\n      //     handlerChoice,\n      //     infoType,\n      //     info\n      //   )\n      // );\n\n      let dataRequestMessage = {\n        typeOfData: typeOfData,\n        handlerChoice: handlerChoice,\n        dataLocation: dataLocation,\n        infoType: infoType,\n        info: info\n      };\n      this.resetState(e, e => this.context.dataRequestHandler(e, dataRequestMessage));\n    };\n\n    this.resetState = event => {\n      let dataLocation = this.state.startTimeDate.day;\n      let dataRequestMessage = {\n        typeOfData: 'tasks',\n        handlerChoice: '9',\n        dataLocation: dataLocation,\n        infoType: 'pickedDayTasks',\n        info: ''\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage);\n      this.setState({\n        eventId: '',\n        //task + date + start time\n        eventTitle: '',\n        eventNote: '',\n        eventCategory: '',\n        //errand,multiday event, single day event, (radial choices)\n        //required\n        startTimeDate: '',\n        finishTimeDate: '',\n        showStartTimeDate: false,\n        showFinishTimeDate: false,\n        deadline: '',\n        eventDuration: '',\n        //\n        blockOffTimeSlot: ''\n      }, this.props.contentView('3'));\n      let contentViewObject = {\n        target: {\n          value: '9'\n        }\n      };\n      this.props.contentViewHandler(contentViewObject); //send new view\n    };\n\n    this.handleDateChange = date => {\n      //let date = event.target.value;\n      this.setState({\n        startTimeDate: date,\n        showStartTimeDate: true\n      });\n    };\n\n    this.startDateTimeHandler = date => {\n      let eventStartTimeDate = {\n        dateObjectString: date.dateObjectString,\n        dateString: date.dateString,\n        day: date.day,\n        date: date.date,\n        month: date.month,\n        year: date.year,\n        timeString: date.time,\n        hour: date.hour,\n        minute: date.minute\n      };\n      this.setState({\n        startTimeDate: eventStartTimeDate,\n        showFinishTimeDate: true\n      });\n      alert(`eventStartTimeDate.dateString: ${eventStartTimeDate.dateString}`);\n    };\n\n    this.finishTimeDateHandler = date => {\n      let eventFinishTimeDate = {\n        dateObjectString: date.dateObjectString,\n        dateString: date.dateString,\n        day: date.day,\n        date: date.date,\n        month: date.month,\n        year: date.year,\n        timeString: date.time,\n        hour: date.hour,\n        minute: date.minute\n      }; // let currentShowFinishTimeDate = this.state.showFinishTimeDate\n      // showFinishTimeDate: !currentShowFinishTimeDate\n\n      this.setState({\n        finishTimeDate: eventFinishTimeDate\n      });\n    };\n\n    this.eventTitleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.eventNoteChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.eventTypeChange = e => {\n      this.setState({\n        eventType: e.target.value\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"Event Title\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"eventTitle\",\n      className: \"form-control\",\n      defaultValue: \"NBA AllStar Game\",\n      value: this.state.eventTitle,\n      onChange: e => this.eventTitleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"Event Type\"), React.createElement(\"select\", {\n      name: \"assignedTimeStart\",\n      className: \"form-control\",\n      placeholder: \"Enter Start Time.\",\n      onChange: e => this.eventTypeChange(e),\n      id: \"assignedTimeStart\",\n      defaultValue: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"Appointment\"), React.createElement(\"option\", {\n      value: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"Meeting\"), React.createElement(\"option\", {\n      value: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"One Time - Scheduled\"), React.createElement(\"option\", {\n      value: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"One Time - Unschedule\"), React.createElement(\"option\", {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"Multi Day Event\"))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Note\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"eventNote\",\n      className: \"form-control\",\n      defaultValue: \"Watch on Chanel 13\",\n      value: this.state.eventNote,\n      onChange: e => this.eventNoteChange(e) //ref={eventNoteRef => eventNoteRef.focus()}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), React.createElement(DatePickerPicker, {\n      startDateTimeHandler: date => this.startDateTimeHandler(date),\n      finishTimeDateHandler: date => this.finishTimeHandler(date),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nNewEvent.contextType = TasksDataContext;\nexport default NewEvent;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/Creation/NewEvent.js"],"names":["React","Component","DatePickerPicker","ReactDatePicker","TasksDataContext","Icon","Form","Input","FormGroup","Container","Label","DateRangePicker","SingleDatePicker","DayPickerRangeController","fi","NewEvent","state","eventId","eventTitle","eventNote","eventCategory","startTimeDate","finishTimeDate","eventDuration","blockOffTimeSlot","showStartTimeDate","showFinishTimeDate","deadline","newEventHandler","event","info","typeOfData","handlerChoice","dataLocation","infoType","dataRequestMessage","props","contentChoice","context","dataRequestHandler","onSubmit","e","preventDefault","resetState","day","setState","contentView","contentViewObject","target","value","contentViewHandler","handleDateChange","date","startDateTimeHandler","eventStartTimeDate","dateObjectString","dateString","month","year","timeString","time","hour","minute","alert","finishTimeDateHandler","eventFinishTimeDate","eventTitleChange","name","eventNoteChange","eventTypeChange","eventType","render","finishTimeHandler","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport ReactDatePicker from '../Calendar/ReactDatePicker';\n//import RightCockpitContext from '../../context/RightCockpitContext';\nimport TasksDataContext from '../../context/tasksContext';\nimport Icon from '../Calendar/Icon';\nimport { Form, Input, FormGroup, Container, Label } from 'reactstrap';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport {\n  DateRangePicker,\n  SingleDatePicker,\n  DayPickerRangeController\n} from 'react-dates';\nimport { fi } from 'date-fns/locale';\n\nclass NewEvent extends Component {\n  state = {\n    eventId: '', //task + date + start time\n    eventTitle: '',\n    eventNote: '',\n    eventCategory: '', //errand,multiday event, single day event, (radial choices)\n    //required\n    startTimeDate: '',\n    finishTimeDate: '',\n    eventDuration: '', //\n    blockOffTimeSlot: false,\n    showStartTimeDate: false,\n    showFinishTimeDate: false,\n    deadline: ''\n  };\n\n  newEventHandler = (event, info) => {\n    //let contentchoice = event.target.value;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    //let info = ''; //string: actual info\n\n    // let value = '';\n    let dataRequestMessage = {};\n    switch (this.props.contentChoice) {\n      case '5':\n        typeOfData = 'events';\n        handlerChoice = '1';\n        dataLocation = '';\n        infoType = 'id';\n        //info = '';\n        break;\n      case '4':\n        break;\n      case '5':\n        break;\n      case '6':\n        break;\n    }\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    this.context.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    let typeOfData = 'events';\n    let handlerChoice = '';\n    let dataLocation = '';\n    let infoType = 'newEvent';\n    let info = this.state;\n\n    // this.setState({ blue: 'blue' }, event =>\n    //   this.context.dataRequestHandler(\n    //     event,\n    //     typeOfData,\n    //     handlerChoice,\n    //     infoType,\n    //     info\n    //   )\n    // );\n\n    let dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    this.resetState(e, e =>\n      this.context.dataRequestHandler(e, dataRequestMessage)\n    );\n  };\n\n  resetState = event => {\n    let dataLocation = this.state.startTimeDate.day;\n\n    let dataRequestMessage = {\n      typeOfData: 'tasks',\n      handlerChoice: '9',\n      dataLocation: dataLocation,\n      infoType: 'pickedDayTasks',\n      info: ''\n    };\n\n    this.context.dataRequestHandler(event, dataRequestMessage);\n\n    this.setState(\n      {\n        eventId: '', //task + date + start time\n        eventTitle: '',\n        eventNote: '',\n        eventCategory: '', //errand,multiday event, single day event, (radial choices)\n        //required\n        startTimeDate: '',\n        finishTimeDate: '',\n        showStartTimeDate: false,\n        showFinishTimeDate: false,\n        deadline: '',\n        eventDuration: '', //\n        blockOffTimeSlot: ''\n      },\n      this.props.contentView('3')\n    );\n    let contentViewObject = {\n      target: {\n        value: '9'\n      }\n    };\n    this.props.contentViewHandler(contentViewObject);\n    //send new view\n  };\n  handleDateChange = date => {\n    //let date = event.target.value;\n    this.setState({\n      startTimeDate: date,\n      showStartTimeDate: true\n    });\n  };\n\n  startDateTimeHandler = date => {\n    let eventStartTimeDate = {\n      dateObjectString: date.dateObjectString,\n      dateString: date.dateString,\n      day: date.day,\n      date: date.date,\n      month: date.month,\n      year: date.year,\n      timeString: date.time,\n      hour: date.hour,\n      minute: date.minute\n    };\n    this.setState({\n      startTimeDate: eventStartTimeDate,\n      showFinishTimeDate: true\n    });\n    alert(`eventStartTimeDate.dateString: ${eventStartTimeDate.dateString}`);\n  };\n\n  finishTimeDateHandler = date => {\n    let eventFinishTimeDate = {\n      dateObjectString: date.dateObjectString,\n      dateString: date.dateString,\n      day: date.day,\n      date: date.date,\n      month: date.month,\n      year: date.year,\n      timeString: date.time,\n      hour: date.hour,\n      minute: date.minute\n    };\n\n    // let currentShowFinishTimeDate = this.state.showFinishTimeDate\n    // showFinishTimeDate: !currentShowFinishTimeDate\n    this.setState({ finishTimeDate: eventFinishTimeDate });\n  };\n\n  eventTitleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n  eventNoteChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  eventTypeChange = e => {\n    this.setState({\n      eventType: e.target.value\n    });\n  };\n  //static contextType = TasksDataContext;\n  static contextType = TasksDataContext;\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <form>\n            <div className=\"form-group\">\n              <label>Event Title</label>\n              <input\n                type=\"text\"\n                name=\"eventTitle\"\n                className=\"form-control\"\n                defaultValue=\"NBA AllStar Game\"\n                value={this.state.eventTitle}\n                onChange={e => this.eventTitleChange(e)}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>Event Type</label>\n              <select\n                name=\"assignedTimeStart\"\n                className=\"form-control\"\n                placeholder=\"Enter Start Time.\"\n                onChange={e => this.eventTypeChange(e)}\n                id=\"assignedTimeStart\"\n                defaultValue=\"1\"\n              >\n                <option value=\"1\">Appointment</option>\n                <option value=\"2\">Meeting</option>\n                <option value=\"3\">One Time - Scheduled</option>\n                <option value=\"4\">One Time - Unschedule</option>\n                <option value=\"5\">Multi Day Event</option>\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label>Note</label>\n              <input\n                type=\"text\"\n                name=\"eventNote\"\n                className=\"form-control\"\n                defaultValue=\"Watch on Chanel 13\"\n                value={this.state.eventNote}\n                onChange={e => this.eventNoteChange(e)}\n                //ref={eventNoteRef => eventNoteRef.focus()}\n              />\n\n              <DatePickerPicker\n                startDateTimeHandler={date => this.startDateTimeHandler(date)}\n                finishTimeDateHandler={date => this.finishTimeHandler(date)}\n              />\n            </div>\n\n            <button onClick={e => this.onSubmit(e)}>Submit</button>\n          </form>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NewEvent;\n"]},"metadata":{},"sourceType":"module"}