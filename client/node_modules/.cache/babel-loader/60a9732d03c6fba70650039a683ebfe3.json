{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/example/DragAndDrop.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Col from 'antd/lib/col';\nimport Row from 'antd/lib/row';\nimport 'antd/lib/grid/style/index.css';\nimport Scheduler, { SchedulerData, ViewTypes, DnDSource, DemoData } from '../src/index';\nimport { DnDTypes } from './DnDTypes';\nimport TaskItem from './TaskItem';\nimport TaskList from './TaskList';\nimport ResourceItem from './ResourceItem';\nimport ResourceList from './ResourceList';\nimport Nav from './Nav';\nimport ViewSrcCode from './ViewSrcCode';\nimport withDragDropContext from './withDnDContext';\n\nclass DragAndDrop extends Component {\n  constructor(props) {\n    super(props);\n\n    this.prevClick = schedulerData => {\n      schedulerData.prev();\n      schedulerData.setEvents(DemoData.eventsForTaskView);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.nextClick = schedulerData => {\n      schedulerData.next();\n      schedulerData.setEvents(DemoData.eventsForTaskView);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.onViewChange = (schedulerData, view) => {\n      schedulerData.setViewType(view.viewType, view.showAgenda, view.isEventPerspective);\n      schedulerData.config.creatable = !view.isEventPerspective;\n      schedulerData.setEvents(DemoData.eventsForTaskView);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.onSelectDate = (schedulerData, date) => {\n      schedulerData.setDate(date);\n      schedulerData.setEvents(DemoData.eventsForTaskView);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.eventClicked = (schedulerData, event) => {\n      alert(\"You just clicked an event: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.ops1 = (schedulerData, event) => {\n      alert(\"You just executed ops1 to event: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.ops2 = (schedulerData, event) => {\n      alert(\"You just executed ops2 to event: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\n      if (confirm(\"Do you want to create a new event? {slotId: \".concat(slotId, \", slotName: \").concat(slotName, \", start: \").concat(start, \", end: \").concat(end, \", type: \").concat(type, \", item: \").concat(item, \"}\"))) {\n        let newFreshId = 0;\n        schedulerData.events.forEach(item => {\n          if (item.id >= newFreshId) newFreshId = item.id + 1;\n        });\n        let newEvent = {\n          id: newFreshId,\n          title: 'New event you just created',\n          start: start,\n          end: end,\n          resourceId: slotId,\n          bgColor: 'purple'\n        };\n\n        if (type === DnDTypes.RESOURCE) {\n          newEvent = _objectSpread({}, newEvent, {\n            groupId: slotId,\n            groupName: slotName,\n            resourceId: item.id\n          });\n        } else if (type === DnDTypes.TASK) {\n          newEvent = _objectSpread({}, newEvent, {\n            groupId: item.id,\n            groupName: item.name\n          });\n        }\n\n        schedulerData.addEvent(newEvent);\n        this.setState({\n          viewModel: schedulerData\n        });\n      }\n    };\n\n    this.updateEventStart = (schedulerData, event, newStart) => {\n      if (confirm(\"Do you want to adjust the start of the event? {eventId: \".concat(event.id, \", eventTitle: \").concat(event.title, \", newStart: \").concat(newStart, \"}\"))) {\n        schedulerData.updateEventStart(event, newStart);\n      }\n\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.updateEventEnd = (schedulerData, event, newEnd) => {\n      if (confirm(\"Do you want to adjust the end of the event? {eventId: \".concat(event.id, \", eventTitle: \").concat(event.title, \", newEnd: \").concat(newEnd, \"}\"))) {\n        schedulerData.updateEventEnd(event, newEnd);\n      }\n\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\n      if (confirm(\"Do you want to move the event? {eventId: \".concat(event.id, \", eventTitle: \").concat(event.title, \", newSlotId: \").concat(slotId, \", newSlotName: \").concat(slotName, \", newStart: \").concat(start, \", newEnd: \").concat(end))) {\n        schedulerData.moveEvent(event, slotId, slotName, start, end);\n        this.setState({\n          viewModel: schedulerData\n        });\n      }\n    };\n\n    this.movingEvent = (schedulerData, slotId, slotName, newStart, newEnd, action, type, item) => {\n      console.log('moving event', schedulerData, slotId, slotName, newStart, newEnd, action, type, item);\n    };\n\n    this.subtitleGetter = (schedulerData, event) => {\n      return schedulerData.isEventPerspective ? schedulerData.getResourceById(event.resourceId).name : event.groupName;\n    };\n\n    this.toggleExpandFunc = (schedulerData, slotId) => {\n      schedulerData.toggleExpandStatus(slotId);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    let _schedulerData = new SchedulerData('2017-12-18', ViewTypes.Month, false, false, {\n      schedulerWidth: '80%',\n      schedulerMaxHeight: 500,\n      views: [{\n        viewName: 'Agenda View',\n        viewType: ViewTypes.Month,\n        showAgenda: true,\n        isEventPerspective: false\n      }, {\n        viewName: 'Resource View',\n        viewType: ViewTypes.Month,\n        showAgenda: false,\n        isEventPerspective: false\n      }, {\n        viewName: 'Task View',\n        viewType: ViewTypes.Month,\n        showAgenda: false,\n        isEventPerspective: true\n      }]\n    });\n\n    _schedulerData.localeMoment.locale('en');\n\n    _schedulerData.setResources(DemoData.resources);\n\n    _schedulerData.setEvents(DemoData.eventsForTaskView);\n\n    this.state = {\n      viewModel: _schedulerData,\n      taskDndSource: new DnDSource(props => {\n        return props.task;\n      }, TaskItem, DnDTypes.TASK),\n      resourceDndSource: new DnDSource(props => {\n        return props.resource;\n      }, ResourceItem, DnDTypes.RESOURCE)\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          viewModel = _this$state.viewModel,\n          taskDndSource = _this$state.taskDndSource,\n          resourceDndSource = _this$state.resourceDndSource;\n    let h3 = viewModel.isEventPerspective ? 'Drag and drop from outside: Drag a resource and drop to the task view' : 'Drag and drop from outside: Drag a task and drop to the resource view';\n    let dndList = viewModel.isEventPerspective ? React.createElement(ResourceList, {\n      schedulerData: viewModel,\n      newEvent: this.newEvent,\n      resourceDndSource: resourceDndSource,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }) : React.createElement(TaskList, {\n      schedulerData: viewModel,\n      newEvent: this.newEvent,\n      taskDndSource: taskDndSource,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }); //register the external DnDSources\n\n    let dndSources = [taskDndSource, resourceDndSource];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, h3, React.createElement(ViewSrcCode, {\n      srcCodeUrl: \"https://github.com/StephenChou1017/react-big-scheduler/blob/master/example/DragAndDrop.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(Scheduler, {\n      schedulerData: viewModel,\n      prevClick: this.prevClick,\n      nextClick: this.nextClick,\n      onSelectDate: this.onSelectDate,\n      onViewChange: this.onViewChange,\n      eventItemClick: this.eventClicked,\n      viewEventClick: this.ops1,\n      viewEventText: \"Ops 1\",\n      viewEvent2Text: \"Ops 2\",\n      viewEvent2Click: this.ops2,\n      updateEventStart: this.updateEventStart,\n      updateEventEnd: this.updateEventEnd,\n      moveEvent: this.moveEvent,\n      movingEvent: this.movingEvent,\n      newEvent: this.newEvent,\n      subtitleGetter: this.subtitleGetter,\n      dndSources: dndSources,\n      toggleExpandFunc: this.toggleExpandFunc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })), React.createElement(Col, {\n      span: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, dndList))));\n  }\n\n}\n\nexport default withDragDropContext(DragAndDrop);","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/example/DragAndDrop.js"],"names":["React","Component","PropTypes","Col","Row","Scheduler","SchedulerData","ViewTypes","DnDSource","DemoData","DnDTypes","TaskItem","TaskList","ResourceItem","ResourceList","Nav","ViewSrcCode","withDragDropContext","DragAndDrop","constructor","props","prevClick","schedulerData","prev","setEvents","eventsForTaskView","setState","viewModel","nextClick","next","onViewChange","view","setViewType","viewType","showAgenda","isEventPerspective","config","creatable","onSelectDate","date","setDate","eventClicked","event","alert","id","title","ops1","ops2","newEvent","slotId","slotName","start","end","type","item","confirm","newFreshId","events","forEach","resourceId","bgColor","RESOURCE","groupId","groupName","TASK","name","addEvent","updateEventStart","newStart","updateEventEnd","newEnd","moveEvent","movingEvent","action","console","log","subtitleGetter","getResourceById","toggleExpandFunc","toggleExpandStatus","Month","schedulerWidth","schedulerMaxHeight","views","viewName","localeMoment","locale","setResources","resources","state","taskDndSource","task","resourceDndSource","resource","render","h3","dndList","dndSources","textAlign"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {PropTypes} from 'prop-types'\r\nimport Col from 'antd/lib/col'\r\nimport Row from 'antd/lib/row'\r\nimport 'antd/lib/grid/style/index.css'\r\nimport Scheduler, {SchedulerData, ViewTypes, DnDSource, DemoData} from '../src/index'\r\nimport {DnDTypes} from './DnDTypes'\r\nimport TaskItem from './TaskItem'\r\nimport TaskList from './TaskList'\r\nimport ResourceItem from './ResourceItem'\r\nimport ResourceList from './ResourceList'\r\nimport Nav from './Nav'\r\nimport ViewSrcCode from './ViewSrcCode'\r\nimport withDragDropContext from './withDnDContext'\r\n\r\nclass DragAndDrop extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        let schedulerData = new SchedulerData('2017-12-18', ViewTypes.Month, false, false, {\r\n            schedulerWidth: '80%',\r\n            schedulerMaxHeight: 500,\r\n            views: [\r\n                {viewName: 'Agenda View', viewType: ViewTypes.Month, showAgenda: true, isEventPerspective: false},\r\n                {viewName: 'Resource View', viewType: ViewTypes.Month, showAgenda: false, isEventPerspective: false},\r\n                {viewName: 'Task View', viewType: ViewTypes.Month, showAgenda: false, isEventPerspective: true},\r\n            ]\r\n        });\r\n        schedulerData.localeMoment.locale('en');\r\n        schedulerData.setResources(DemoData.resources);\r\n        schedulerData.setEvents(DemoData.eventsForTaskView);\r\n        this.state = {\r\n            viewModel: schedulerData,\r\n            taskDndSource: new DnDSource((props) => {return props.task;}, TaskItem, DnDTypes.TASK),\r\n            resourceDndSource: new DnDSource((props) => {return props.resource;}, ResourceItem, DnDTypes.RESOURCE),\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {viewModel, taskDndSource, resourceDndSource} = this.state;\r\n        let h3 = viewModel.isEventPerspective ? 'Drag and drop from outside: Drag a resource and drop to the task view' : 'Drag and drop from outside: Drag a task and drop to the resource view';\r\n        let dndList = viewModel.isEventPerspective ? (\r\n            <ResourceList schedulerData={viewModel} newEvent={this.newEvent} resourceDndSource={resourceDndSource}/>\r\n        ) : (\r\n            <TaskList schedulerData={viewModel} newEvent={this.newEvent} taskDndSource={taskDndSource} />\r\n        );\r\n\r\n        //register the external DnDSources\r\n        let dndSources = [taskDndSource, resourceDndSource];\r\n        return (\r\n            <div>\r\n                <Nav />\r\n                <div>\r\n                    <h3 style={{textAlign: 'center'}}>{h3}<ViewSrcCode srcCodeUrl=\"https://github.com/StephenChou1017/react-big-scheduler/blob/master/example/DragAndDrop.js\" /></h3>\r\n                    <Row>\r\n                        <Col span={20}>\r\n                            <Scheduler schedulerData={viewModel}\r\n                                       prevClick={this.prevClick}\r\n                                       nextClick={this.nextClick}\r\n                                       onSelectDate={this.onSelectDate}\r\n                                       onViewChange={this.onViewChange}\r\n                                       eventItemClick={this.eventClicked}\r\n                                       viewEventClick={this.ops1}\r\n                                       viewEventText=\"Ops 1\"\r\n                                       viewEvent2Text=\"Ops 2\"\r\n                                       viewEvent2Click={this.ops2}\r\n                                       updateEventStart={this.updateEventStart}\r\n                                       updateEventEnd={this.updateEventEnd}\r\n                                       moveEvent={this.moveEvent}\r\n                                       movingEvent={this.movingEvent}\r\n                                       newEvent={this.newEvent}\r\n                                       subtitleGetter={this.subtitleGetter}\r\n                                       dndSources={dndSources}\r\n                                       toggleExpandFunc={this.toggleExpandFunc}\r\n                            />\r\n                        </Col>\r\n                        <Col span={4}>\r\n                            {dndList}\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    prevClick = (schedulerData)=> {\r\n        schedulerData.prev();\r\n        schedulerData.setEvents(DemoData.eventsForTaskView);\r\n        this.setState({\r\n            viewModel: schedulerData\r\n        })\r\n    }\r\n\r\n    nextClick = (schedulerData)=> {\r\n        schedulerData.next();\r\n        schedulerData.setEvents(DemoData.eventsForTaskView);\r\n        this.setState({\r\n            viewModel: schedulerData\r\n        })\r\n    }\r\n\r\n    onViewChange = (schedulerData, view) => {\r\n        schedulerData.setViewType(view.viewType, view.showAgenda, view.isEventPerspective);\r\n        schedulerData.config.creatable = !view.isEventPerspective;\r\n        schedulerData.setEvents(DemoData.eventsForTaskView);\r\n        this.setState({\r\n            viewModel: schedulerData\r\n        })\r\n    }\r\n\r\n    onSelectDate = (schedulerData, date) => {\r\n        schedulerData.setDate(date);\r\n        schedulerData.setEvents(DemoData.eventsForTaskView);\r\n        this.setState({\r\n            viewModel: schedulerData\r\n        })\r\n    }\r\n\r\n    eventClicked = (schedulerData, event) => {\r\n        alert(`You just clicked an event: {id: ${event.id}, title: ${event.title}}`);\r\n    };\r\n\r\n    ops1 = (schedulerData, event) => {\r\n        alert(`You just executed ops1 to event: {id: ${event.id}, title: ${event.title}}`);\r\n    };\r\n\r\n    ops2 = (schedulerData, event) => {\r\n        alert(`You just executed ops2 to event: {id: ${event.id}, title: ${event.title}}`);\r\n    };\r\n\r\n    newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\r\n        if(confirm(`Do you want to create a new event? {slotId: ${slotId}, slotName: ${slotName}, start: ${start}, end: ${end}, type: ${type}, item: ${item}}`)){\r\n\r\n            let newFreshId = 0;\r\n            schedulerData.events.forEach((item) => {\r\n                if(item.id >= newFreshId)\r\n                    newFreshId = item.id + 1;\r\n            });\r\n\r\n            let newEvent = {\r\n                id: newFreshId,\r\n                title: 'New event you just created',\r\n                start: start,\r\n                end: end,\r\n                resourceId: slotId,\r\n                bgColor: 'purple'\r\n            }\r\n\r\n            if(type === DnDTypes.RESOURCE){\r\n                newEvent = {\r\n                    ...newEvent,\r\n                    groupId: slotId,\r\n                    groupName: slotName,\r\n                    resourceId: item.id\r\n                };\r\n            }\r\n            else if(type === DnDTypes.TASK){\r\n                newEvent = {\r\n                    ...newEvent,\r\n                    groupId: item.id,\r\n                    groupName: item.name\r\n                };\r\n            }\r\n\r\n            schedulerData.addEvent(newEvent);\r\n            this.setState({\r\n                viewModel: schedulerData\r\n            })\r\n        }\r\n    }\r\n\r\n    updateEventStart = (schedulerData, event, newStart) => {\r\n        if(confirm(`Do you want to adjust the start of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newStart: ${newStart}}`)) {\r\n            schedulerData.updateEventStart(event, newStart);\r\n        }\r\n        this.setState({\r\n            viewModel: schedulerData\r\n        })\r\n    }\r\n\r\n    updateEventEnd = (schedulerData, event, newEnd) => {\r\n        if(confirm(`Do you want to adjust the end of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newEnd: ${newEnd}}`)) {\r\n            schedulerData.updateEventEnd(event, newEnd);\r\n        }\r\n        this.setState({\r\n            viewModel: schedulerData\r\n        })\r\n    }\r\n\r\n    moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\r\n        if(confirm(`Do you want to move the event? {eventId: ${event.id}, eventTitle: ${event.title}, newSlotId: ${slotId}, newSlotName: ${slotName}, newStart: ${start}, newEnd: ${end}`)) {\r\n            schedulerData.moveEvent(event, slotId, slotName, start, end);\r\n            this.setState({\r\n                viewModel: schedulerData\r\n            })\r\n        }\r\n    }\r\n\r\n    movingEvent = (schedulerData, slotId, slotName, newStart, newEnd, action, type, item) => {\r\n        console.log('moving event', schedulerData, slotId, slotName, newStart, newEnd, action, type, item);\r\n    }\r\n\r\n    subtitleGetter = (schedulerData, event) => {\r\n        return schedulerData.isEventPerspective ? schedulerData.getResourceById(event.resourceId).name : event.groupName;\r\n    }\r\n\r\n    toggleExpandFunc = (schedulerData, slotId) => {\r\n        schedulerData.toggleExpandStatus(slotId);\r\n        this.setState({\r\n            viewModel: schedulerData\r\n        });\r\n    }\r\n}\r\n\r\nexport default withDragDropContext(DragAndDrop)\r\n"]},"metadata":{},"sourceType":"module"}