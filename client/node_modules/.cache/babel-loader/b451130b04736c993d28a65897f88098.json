{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/Store/SyllabusData.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react'; //import classes from '../../components/Cockpit/Cockpit.module.css';\n\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport Store from './Store';\nimport EventsData from './EventsData';\nimport SyllabusContext from '../../context/syllabusContext';\n\nclass Syllabus extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      maxReact: [{\n        id: 'xvlwil',\n        lesson: '90. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbskk',\n        lesson: '91. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      maxReactWorkLeft: [{\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      }, {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      }, {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }],\n      minReact: [{\n        id: 'xvldddwil',\n        lesson: '936670. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbnnskk',\n        lesson: '93531. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhsdhck2',\n        lesson: '9100. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      lastLessonHeader: [],\n      realNum: 8,\n      crunk: 'Hootie',\n      showLeftOverLessonsFromSyllabus: false,\n      TasksData: 'd',\n      nothing: 'nothing',\n      showData2: false\n    };\n\n    this.assignLessonFromSyllabus = () => {\n      this.setState({\n        showLeftOverLessonsFromSyllabus: true\n      });\n\n      if (this.state.maxReact.length != 0) {\n        this.setState({\n          lastLessonHeader: this.state.maxReact[0]\n        });\n      } else {\n        this.setState({\n          lastLessonHeader: this.state.lastLessonHeader\n        });\n      }\n    };\n\n    this.deleteLessonFromOriginalSyllabusHandler = taskIndex => {\n      alert('Are you sure you want to add this lesson?');\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      currentOriginalLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReactWorkLeft: currentOriginalLessons\n      }, () => this.props.receiveSyllabusDataHandler(this.state));\n    };\n\n    this.addLessonFromOriginalSyllabusHandler = taskIndex => {\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      let lessonToAdd = currentOriginalLessons[taskIndex]; //add to maxReact the picked lesson\n\n      console.log('I am inside addNewLesonHandler');\n      let currentMaxReactSyllabus = [...this.state.maxReact];\n      currentMaxReactSyllabus.push(lessonToAdd); //currentMaxReactSyllabus.push(newLesson);\n\n      console.log(currentMaxReactSyllabus);\n      let currentShowLeftOverLessonsFromSyllabus = this.state.showLeftOverLessonsFromSyllabus; //showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus,\n      //Showing current left over Lessons from Syllabus (after addition/deletion)\n\n      this.setState({\n        maxReact: currentMaxReactSyllabus\n      }, this.deleteLessonFromOriginalSyllabusHandler(taskIndex));\n    };\n\n    this.TasksDataHandler = word => {\n      // console.log(word);\n      // let TasksData = word;\n      this.setState({\n        TasksData: word\n      });\n    };\n\n    this.TasksDataHandler2 = () => {\n      this.setState({\n        showData2: 'Hey so TaskDataHandler2 got called bec of handlerchoice passed in from RightCockpit -> Store -> SyllabusData'\n      }, () => {\n        this.props.receiveSyllabusDataHandler(this.state);\n      });\n    };\n\n    this.lastLessonHeaderHandler = () => {\n      switch (this.props.syllabusHandlerChoice) {\n        case '1':\n          if (this.state.maxReact.length != 0) {\n            this.setState({\n              lastLessonHeader: this.state.maxReact[0]\n            }, () => {\n              this.props.receiveSyllabusDataHandler(this.state);\n            });\n          } else {\n            this.setState({\n              lastLessonHeader: this.state.lastLessonHeader\n            }, () => {\n              this.props.receiveSyllabusDataHandler(this.state);\n            });\n          }\n\n          break;\n\n        case '6':\n          if (this.state.maxReactWorkLeft.length != 0) {\n            this.setState({\n              lastLessonHeader: this.state.maxReactWorkLeft[0]\n            }, () => {\n              this.props.receiveSyllabusDataHandler(this.state);\n            });\n          } else {\n            this.setState({\n              lastLessonHeader: this.state.lastLessonHeader\n            }, () => {\n              this.props.receiveSyllabusDataHandler(this.state);\n            });\n          }\n\n          break;\n      }\n    };\n\n    this.showLeftOverLessonsFromSyllabusHandler = () => {// this.setState(\n      //   { showLeftOverLessonsFromSyllabus: true },\n      //   () => this.lastLessonHeaderHandler(),\n      //   () => {\n      //     this.props.receiveSyllabusDataHandler(this.state);\n      //   }\n      // );\n      // this.lastLessonHeaderHandler();\n      // if(this.state.)\n      // this.props.receiveSyllabusDataHandler(this.state);\n    };\n\n    this.deleteLessonFromAssignedSyllabusHandler = taskIndex => {\n      alert('Are you sure you want to delete this Lesson? Mate');\n      let currentScheduledLessons = [...this.state.maxReact];\n      currentScheduledLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReact: currentScheduledLessons\n      }, () => this.props.receiveSyllabusDataHandler(this.state));\n    };\n\n    this.leftOverLessonChangeHandler = (lessonValue, taskChangeId) => {\n      const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReactWorkLeft[foundTaskId]); //using updated values to define the lesson of the particular pulled out lesson\n\n\n      updatedLessons.lesson = lessonValue; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReactWorkLeft]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskId] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReactWorkLeft: lessons\n      }, () => this.props.receiveSyllabusDataHandler(this.state));\n    };\n\n    this.lessonChangeHandler = (lessonValue, taskChangeId) => {\n      console.log('what');\n      console.log(\"Inside of lessonChangeHandler id: \".concat(taskChangeId)); //Find the index of the lessons that matches the id sent in\n\n      const foundTaskIndex = this.state.maxReact.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReact[foundTaskIndex]); //using updated values to define the lesson of the particular pulled out lesson\n      //updatedLessons.lesson = event.target.value;\n\n\n      updatedLessons.lesson = lessonValue; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReact]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskIndex] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReact: lessons\n      }, () => this.props.receiveSyllabusDataHandler(this.state));\n    };\n  }\n\n  render() {\n    //syllabusHandlerChoice\n    switch (this.props.syllabusHandlerChoice) {\n      case '1':\n        this.lastLessonHeaderHandler();\n        break;\n\n      case '2':\n        break;\n\n      case '3':\n        this.props.resetSyllabusHandlerChoice(this.deleteLessonFromAssignedSyllabusHandler(this.props.index));\n        break;\n\n      case '4':\n        let id = this.props.id;\n        let newValue = this.props.value;\n        this.props.resetSyllabusHandlerChoice(this.lessonChangeHandler(newValue, id));\n        break;\n\n      case '5':\n        this.props.resetSyllabusHandlerChoice(this.addLessonFromOriginalSyllabusHandler(this.props.index)); // this.setState(\n        //   {\n        //     showLeftOverLessonsFromSyllabus: true\n        //   },\n        //   this.props.resetSyllabusHandlerChoice(() =>\n        //     this.addLessonFromOriginalSyllabusHandler(index)\n        //   )\n        // );\n        //let deleteIndex = this.props.index;\n        //() => this.lastLessonHeaderHandler()\n\n        break;\n\n      case '6':\n        // leftOverLessonChangeHandler;\n        this.lastLessonHeaderHandler();\n        this.setState({\n          showLeftOverLessonsFromSyllabus: true\n        }, this.props.resetSyllabusHandlerChoice(this.leftOverLessonChangeHandler(this.props.value, this.props.id)));\n        break;\n\n      case '7':\n        //let index = this.props.index;\n        //this.addLessonFromOriginalSyllabusHandler(index);\n        this.props.resetSyllabusHandlerChoice(this.addLessonFromOriginalSyllabusHandler(this.props.index));\n        break;\n\n      case '8':\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"I'm inside of SyllabusData \");\n  }\n\n}\n/*\n    return (\n      <div>\n        <TasksData\n          data={this.TasksDataHandler}\n          showData2={this.state.showData2}\n          dataHandler2={this.TasksDataHandler2}\n        ></TasksData>\n\n        <RightCockpit\n          displayWord={displayWord}\n          dataHandler2={this.TasksDataHandler2}\n          showData2={this.state.showData2}\n          showData3={this.state.showData3}\n          data2={this.state.TasksData}\n          syllabusEverything={this.state}\n          dataHandler={this.TasksDataHandler2}\n          lastLessonHeaderHandler={event => this.lastLessonHeaderHandler(event)}\n          assignLessonFromSyllabus={event =>\n            this.assignLessonFromSyllabus(event)\n          }\n          deleteLessonFromAssignedSyllabusHandler={event =>\n            this.deleteLessonFromAssignedSyllabusHandler(event)\n          }\n          deleteLessonFromOriginalSyllabusHandler={event =>\n            this.deleteLessonFromOriginalSyllabusHandler(event)\n          }\n          addLessonFromOriginalSyllabusHandler={event =>\n            this.addLessonFromOriginalSyllabusHandler(event)\n          }\n          lessonChangeHandler={(event, taskIndex) =>\n            this.lessonChangeHandler(event, taskIndex)\n          }\n          showLeftOverLessonsFromSyllabus={event =>\n            this.showLeftOverLessonsFromSyllabus(event)\n          }\n          leftOverLessonChangeHandler={event =>\n            this.leftOverLessonChangeHandler(event)\n          }\n          data={this.state.TasksData}\n        ></RightCockpit>\n      </div>\n    );\n  }\n}\n*/\n\n\nSyllabus.contextType = SyllabusContext;\nexport default Syllabus;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/Store/SyllabusData.js"],"names":["React","Component","RightCockpit","TasksData","Store","EventsData","SyllabusContext","Syllabus","state","maxReact","id","lesson","completion","maxReactWorkLeft","minReact","lastLessonHeader","realNum","crunk","showLeftOverLessonsFromSyllabus","nothing","showData2","assignLessonFromSyllabus","setState","length","deleteLessonFromOriginalSyllabusHandler","taskIndex","alert","currentOriginalLessons","splice","props","receiveSyllabusDataHandler","addLessonFromOriginalSyllabusHandler","lessonToAdd","console","log","currentMaxReactSyllabus","push","currentShowLeftOverLessonsFromSyllabus","TasksDataHandler","word","TasksDataHandler2","lastLessonHeaderHandler","syllabusHandlerChoice","showLeftOverLessonsFromSyllabusHandler","deleteLessonFromAssignedSyllabusHandler","currentScheduledLessons","leftOverLessonChangeHandler","lessonValue","taskChangeId","foundTaskId","findIndex","currentId","updatedLessons","lessons","lessonChangeHandler","foundTaskIndex","render","resetSyllabusHandlerChoice","index","newValue","value","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import classes from '../../components/Cockpit/Cockpit.module.css';\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport Store from './Store';\nimport EventsData from './EventsData';\nimport SyllabusContext from '../../context/syllabusContext';\n\nclass Syllabus extends Component {\n  state = {\n    maxReact: [\n      { id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n      { id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n      {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    maxReactWorkLeft: [\n      {\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      },\n      {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      },\n      {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }\n    ],\n    minReact: [\n      {\n        id: 'xvldddwil',\n        lesson: '936670. (for props Changes)',\n        completion: false\n      },\n      {\n        id: 'bbbnnskk',\n        lesson: '93531. (for state Changes)',\n        completion: false\n      },\n      {\n        id: 'kjhsdhck2',\n        lesson: '9100. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    lastLessonHeader: [],\n    realNum: 8,\n    crunk: 'Hootie',\n    showLeftOverLessonsFromSyllabus: false,\n    TasksData: 'd',\n    nothing: 'nothing',\n    showData2: false\n  };\n  // syllabusDataHandler = () => {\n  //   let sendBacKminReact = this.state.minReact;\n  //   console.log(sendBacKminReact);\n  // };\n  static contextType = SyllabusContext;\n  assignLessonFromSyllabus = () => {\n    this.setState({ showLeftOverLessonsFromSyllabus: true });\n\n    if (this.state.maxReact.length != 0) {\n      this.setState({ lastLessonHeader: this.state.maxReact[0] });\n    } else {\n      this.setState({ lastLessonHeader: this.state.lastLessonHeader });\n    }\n  };\n\n  deleteLessonFromOriginalSyllabusHandler = taskIndex => {\n    alert('Are you sure you want to add this lesson?');\n\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n\n    currentOriginalLessons.splice(taskIndex, 1);\n\n    this.setState({ maxReactWorkLeft: currentOriginalLessons }, () =>\n      this.props.receiveSyllabusDataHandler(this.state)\n    );\n  };\n\n  addLessonFromOriginalSyllabusHandler = taskIndex => {\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n    let lessonToAdd = currentOriginalLessons[taskIndex];\n\n    //add to maxReact the picked lesson\n    console.log('I am inside addNewLesonHandler');\n    let currentMaxReactSyllabus = [...this.state.maxReact];\n    currentMaxReactSyllabus.push(lessonToAdd);\n\n    //currentMaxReactSyllabus.push(newLesson);\n    console.log(currentMaxReactSyllabus);\n    let currentShowLeftOverLessonsFromSyllabus = this.state\n      .showLeftOverLessonsFromSyllabus;\n    //showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus,\n    //Showing current left over Lessons from Syllabus (after addition/deletion)\n    this.setState(\n      {\n        maxReact: currentMaxReactSyllabus\n      },\n      this.deleteLessonFromOriginalSyllabusHandler(taskIndex)\n    );\n  };\n\n  TasksDataHandler = word => {\n    // console.log(word);\n    // let TasksData = word;\n    this.setState({ TasksData: word });\n  };\n\n  TasksDataHandler2 = () => {\n    this.setState(\n      {\n        showData2:\n          'Hey so TaskDataHandler2 got called bec of handlerchoice passed in from RightCockpit -> Store -> SyllabusData'\n      },\n      () => {\n        this.props.receiveSyllabusDataHandler(this.state);\n      }\n    );\n  };\n\n  lastLessonHeaderHandler = () => {\n    switch (this.props.syllabusHandlerChoice) {\n      case '1':\n        if (this.state.maxReact.length != 0) {\n          this.setState(\n            { lastLessonHeader: this.state.maxReact[0] },\n\n            () => {\n              this.props.receiveSyllabusDataHandler(this.state);\n            }\n          );\n        } else {\n          this.setState(\n            { lastLessonHeader: this.state.lastLessonHeader },\n\n            () => {\n              this.props.receiveSyllabusDataHandler(this.state);\n            }\n          );\n        }\n\n        break;\n      case '6':\n        if (this.state.maxReactWorkLeft.length != 0) {\n          this.setState(\n            {\n              lastLessonHeader: this.state.maxReactWorkLeft[0]\n            },\n\n            () => {\n              this.props.receiveSyllabusDataHandler(this.state);\n            }\n          );\n        } else {\n          this.setState(\n            { lastLessonHeader: this.state.lastLessonHeader },\n\n            () => {\n              this.props.receiveSyllabusDataHandler(this.state);\n            }\n          );\n        }\n        break;\n    }\n  };\n\n  showLeftOverLessonsFromSyllabusHandler = () => {\n    // this.setState(\n    //   { showLeftOverLessonsFromSyllabus: true },\n    //   () => this.lastLessonHeaderHandler(),\n    //   () => {\n    //     this.props.receiveSyllabusDataHandler(this.state);\n    //   }\n    // );\n    // this.lastLessonHeaderHandler();\n    // if(this.state.)\n    // this.props.receiveSyllabusDataHandler(this.state);\n  };\n\n  deleteLessonFromAssignedSyllabusHandler = taskIndex => {\n    alert('Are you sure you want to delete this Lesson? Mate');\n\n    let currentScheduledLessons = [...this.state.maxReact];\n    currentScheduledLessons.splice(taskIndex, 1);\n    this.setState({ maxReact: currentScheduledLessons }, () =>\n      this.props.receiveSyllabusDataHandler(this.state)\n    );\n  };\n\n  leftOverLessonChangeHandler = (lessonValue, taskChangeId) => {\n    const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReactWorkLeft[foundTaskId] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    updatedLessons.lesson = lessonValue;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReactWorkLeft];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskId] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReactWorkLeft: lessons }, () =>\n      this.props.receiveSyllabusDataHandler(this.state)\n    );\n  };\n\n  lessonChangeHandler = (lessonValue, taskChangeId) => {\n    console.log('what');\n    console.log(`Inside of lessonChangeHandler id: ${taskChangeId}`);\n\n    //Find the index of the lessons that matches the id sent in\n    const foundTaskIndex = this.state.maxReact.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReact[foundTaskIndex] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    //updatedLessons.lesson = event.target.value;\n    updatedLessons.lesson = lessonValue;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReact];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskIndex] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReact: lessons }, () =>\n      this.props.receiveSyllabusDataHandler(this.state)\n    );\n  };\n  render() {\n    //syllabusHandlerChoice\n    switch (this.props.syllabusHandlerChoice) {\n      case '1':\n        this.lastLessonHeaderHandler();\n        break;\n\n      case '2':\n        break;\n\n      case '3':\n        this.props.resetSyllabusHandlerChoice(\n          this.deleteLessonFromAssignedSyllabusHandler(this.props.index)\n        );\n        break;\n\n      case '4':\n        let id = this.props.id;\n        let newValue = this.props.value;\n        this.props.resetSyllabusHandlerChoice(\n          this.lessonChangeHandler(newValue, id)\n        );\n        break;\n\n      case '5':\n        this.props.resetSyllabusHandlerChoice(\n          this.addLessonFromOriginalSyllabusHandler(this.props.index)\n        );\n        // this.setState(\n        //   {\n        //     showLeftOverLessonsFromSyllabus: true\n        //   },\n        //   this.props.resetSyllabusHandlerChoice(() =>\n        //     this.addLessonFromOriginalSyllabusHandler(index)\n        //   )\n        // );\n        //let deleteIndex = this.props.index;\n\n        //() => this.lastLessonHeaderHandler()\n        break;\n\n      case '6':\n        // leftOverLessonChangeHandler;\n        this.lastLessonHeaderHandler();\n        this.setState(\n          {\n            showLeftOverLessonsFromSyllabus: true\n          },\n          this.props.resetSyllabusHandlerChoice(\n            this.leftOverLessonChangeHandler(this.props.value, this.props.id)\n          )\n        );\n\n        break;\n\n      case '7':\n        //let index = this.props.index;\n        //this.addLessonFromOriginalSyllabusHandler(index);\n        this.props.resetSyllabusHandlerChoice(\n          this.addLessonFromOriginalSyllabusHandler(this.props.index)\n        );\n\n        break;\n      case '8':\n    }\n\n    return <div>I'm inside of SyllabusData </div>;\n  }\n}\n/*\n    return (\n      <div>\n        <TasksData\n          data={this.TasksDataHandler}\n          showData2={this.state.showData2}\n          dataHandler2={this.TasksDataHandler2}\n        ></TasksData>\n\n        <RightCockpit\n          displayWord={displayWord}\n          dataHandler2={this.TasksDataHandler2}\n          showData2={this.state.showData2}\n          showData3={this.state.showData3}\n          data2={this.state.TasksData}\n          syllabusEverything={this.state}\n          dataHandler={this.TasksDataHandler2}\n          lastLessonHeaderHandler={event => this.lastLessonHeaderHandler(event)}\n          assignLessonFromSyllabus={event =>\n            this.assignLessonFromSyllabus(event)\n          }\n          deleteLessonFromAssignedSyllabusHandler={event =>\n            this.deleteLessonFromAssignedSyllabusHandler(event)\n          }\n          deleteLessonFromOriginalSyllabusHandler={event =>\n            this.deleteLessonFromOriginalSyllabusHandler(event)\n          }\n          addLessonFromOriginalSyllabusHandler={event =>\n            this.addLessonFromOriginalSyllabusHandler(event)\n          }\n          lessonChangeHandler={(event, taskIndex) =>\n            this.lessonChangeHandler(event, taskIndex)\n          }\n          showLeftOverLessonsFromSyllabus={event =>\n            this.showLeftOverLessonsFromSyllabus(event)\n          }\n          leftOverLessonChangeHandler={event =>\n            this.leftOverLessonChangeHandler(event)\n          }\n          data={this.state.TasksData}\n        ></RightCockpit>\n      </div>\n    );\n  }\n}\n*/\n\nexport default Syllabus;\n"]},"metadata":{},"sourceType":"module"}