{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/Store/Store.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react'; //import classes from '../../components/Cockpit/Cockpit.module.css';\n\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport SyllabusData from './SyllabusData';\nimport SyllabusContext from '../../context/syllabusContext.js';\n\nclass Store extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      maxReact: [{\n        id: 'xvlwil',\n        lesson: '90. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbskk',\n        lesson: '91. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      maxReactWorkLeft: [{\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      }, {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      }, {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }],\n      minReact: [{\n        id: 'xvldddwil',\n        lesson: '936670. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbnnskk',\n        lesson: '93531. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhsdhck2',\n        lesson: '9100. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      lastLessonHeader: [],\n      crunk: 'Hootie and teh blowfish',\n      showLeftOverLessonsFromSyllabus: false,\n      syllabusData: null,\n      syllabusHandlerChoice: '0'\n    };\n\n    this.syllabusDataHandler = () => {\n      let sendBacKminReact = this.state.minReact;\n      console.log(sendBacKminReact);\n    };\n\n    this.assignLessonFromSyllabus = () => {\n      this.setState({\n        showLeftOverLessonsFromSyllabus: true\n      });\n\n      if (this.state.maxReact.length != 0) {\n        this.setState({\n          lastLessonHeader: this.state.maxReact[0]\n        });\n      } else {\n        this.setState({\n          lastLessonHeader: this.state.lastLessonHeader\n        });\n      }\n    };\n\n    this.deleteLessonFromAssignedSyllabusHandler = (event, taskIndex) => {\n      alert('Are you sure you want to delete this Lesson?');\n      let currentScheduledLessons = [...this.state.maxReact];\n      currentScheduledLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReact: currentScheduledLessons\n      });\n    };\n\n    this.deleteLessonFromOriginalSyllabusHandler = (event, taskIndex) => {\n      alert('Are you sure you want to add this lesson?');\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      currentOriginalLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReactWorkLeft: currentOriginalLessons\n      });\n    };\n\n    this.addLessonFromOriginalSyllabusHandler = taskIndex => {\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      let lessonToAdd = currentOriginalLessons[taskIndex]; //add to maxReact the picked lesson\n\n      console.log('I am inside addNewLesonHandler');\n      let currentMaxReactSyllabus = [...this.state.maxReact];\n      currentMaxReactSyllabus.push(lessonToAdd); //currentMaxReactSyllabus.push(newLesson);\n\n      console.log(currentMaxReactSyllabus);\n      let currentShowLeftOverLessonsFromSyllabus = this.state.showLeftOverLessonsFromSyllabus; //Showing current left over Lessons from Syllabus (after addition/deletion)\n\n      this.setState({\n        showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus\n      }); //adding to redefining what maxReact is w/ new lesson\n\n      this.setState({\n        maxReact: currentMaxReactSyllabus\n      });\n      this.deleteLessonFromOriginalSyllabusHandler(taskIndex);\n    };\n\n    this.lessonChangeHandler = (event, taskChangeId) => {\n      const foundTaskId = this.state.maxReact.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReact[foundTaskId]); //using updated values to define the lesson of the particular pulled out lesson\n\n\n      updatedLessons.lesson = event.target.value; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReact]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskId] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReact: lessons\n      });\n    };\n\n    this.leftOverLessonChangeHandler = (event, taskChangeId) => {\n      const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReactWorkLeft[foundTaskId]); //using updated values to define the lesson of the particular pulled out lesson\n\n\n      updatedLessons.lesson = event.target.value; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReactWorkLeft]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskId] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReactWorkLeft: lessons\n      });\n    };\n\n    this.showLeftOverLessonsFromSyllabus = () => {\n      this.setState({\n        showLeftOverLessonsFromSyllabus: true\n      });\n      this.lastLessonHeaderHandler();\n    };\n\n    this.sendSyllabusDataHandler = handlerChoice => {\n      this.setState({\n        syllabusHandlerChoice: handlerChoice\n      });\n      console.log('Inside of sendSyllabusDataHandler');\n    };\n\n    this.receiveSyllabusDataHandler = syllabusData => {\n      //this.setState({ syllabusData: syllabusData });\n      let currentSyllabusDataState = _objectSpread({}, this.state.syllabusData);\n\n      currentSyllabusDataState = syllabusData; //this to allow setState to finish inorder for the new syllabusData to show up\n      //let currentLastLessonHeader = [...this.state.lastLessonHeader];\n      //currentLastLessonHeader.push;\n\n      this.setState({\n        syllabusData: currentSyllabusDataState,\n        syllabusHandlerChoice: '0'\n      }, () => {\n        console.log(this.state.syllabusData.lastLessonHeader);\n      }); //console.log(JSON.stringify(this.state.syllabusData[0].showData2));\n    };\n\n    this.sendSyllabusDataHandler2 = (event, index) => {\n      //let message = { action: 'add', index: index };\n      this.setState({\n        syllabusHandlerChoice: '7',\n        index: index\n      });\n      console.log('Inside of sendSyllabusDataHandler2');\n    };\n\n    this.resetSyllabusHandlerChoice = () => {\n      this.setState({\n        syllabusHandlerChoice: '0'\n      });\n    };\n\n    this.processSyllabusRequestHandler = (event, syllabusHandlerChoice, infoType, info) => {\n      console.log(\"In processSyllabusRequestHandler event.value => \".concat(event.target.value, \" \")); // console.log(\n      //   `In processSyllabusRequestHandler syllabusHandlerChoice => ${syllabusHandlerChoice} `\n      // );\n\n      let index = null;\n      let id = null;\n      let value = null;\n\n      if (infoType === 'index') {\n        index = info;\n      } else {\n        id = info;\n      } //event, index, handlerType\n\n\n      this.setState({\n        syllabusHandlerChoice: syllabusHandlerChoice,\n        index: index,\n        id: id,\n        value: event.target.value\n      });\n    };\n  }\n\n  render() {\n    let displayMessage = null;\n\n    if (this.state.syllabusHandlerChoice === '1') {\n      displayMessage = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"Hey syllabusHandlerchoice is recorded\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(SyllabusContext.Provider, {\n      value: {\n        processSyllabusRequestHandler: this.processSyllabusRequestHandler,\n        syllabusHandlerChoice: this.state.syllabusHandlerChoice,\n        index: this.state.index,\n        id: this.state.id\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(SyllabusData, {\n      value: this.state.value,\n      resetSyllabusHandlerChoice: this.resetSyllabusHandlerChoice,\n      syllabusHandlerChoice: this.state.syllabusHandlerChoice,\n      receiveSyllabusDataHandler: this.receiveSyllabusDataHandler,\n      sendSyllabusDataHandler: this.sendSyllabusDataHandler,\n      index: this.state.index,\n      id: this.state.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(RightCockpit //Syllabus\n    , {\n      sendSyllabusDataHandler: this.sendSyllabusDataHandler,\n      addLessonFromOriginalSyllabusHandler: (event, syllabusHandlerChoice, infoType, info) => this.sendSyllabusDataHandler2(event, syllabusHandlerChoice, infoType, info),\n      assignLessonFromSyllabus: event => this.assignLessonFromSyllabus(event),\n      deleteLessonFromAssignedSyllabusHandler: (event, syllabusHandlerChoice, infoType, info) => this.processSyllabusRequestHandler(event, syllabusHandlerChoice, infoType, info),\n      lessonChangeHandler: (event, taskIndex) => this.lessonChangeHandler(event, taskIndex),\n      showLeftOverLessonsFromSyllabus: event => this.showLeftOverLessonsFromSyllabus(event),\n      leftOverLessonChangeHandler: (event, syllabusHandlerChoice, infoType, info) => this.processSyllabusRequestHandler(event, syllabusHandlerChoice, infoType, info),\n      data: this.state.TasksData,\n      everythingSyllabus: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Store;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/Store/Store.js"],"names":["React","Component","RightCockpit","TasksData","SyllabusData","SyllabusContext","Store","state","maxReact","id","lesson","completion","maxReactWorkLeft","minReact","lastLessonHeader","crunk","showLeftOverLessonsFromSyllabus","syllabusData","syllabusHandlerChoice","syllabusDataHandler","sendBacKminReact","console","log","assignLessonFromSyllabus","setState","length","deleteLessonFromAssignedSyllabusHandler","event","taskIndex","alert","currentScheduledLessons","splice","deleteLessonFromOriginalSyllabusHandler","currentOriginalLessons","addLessonFromOriginalSyllabusHandler","lessonToAdd","currentMaxReactSyllabus","push","currentShowLeftOverLessonsFromSyllabus","lessonChangeHandler","taskChangeId","foundTaskId","findIndex","currentId","updatedLessons","target","value","lessons","leftOverLessonChangeHandler","lastLessonHeaderHandler","sendSyllabusDataHandler","handlerChoice","receiveSyllabusDataHandler","currentSyllabusDataState","sendSyllabusDataHandler2","index","resetSyllabusHandlerChoice","processSyllabusRequestHandler","infoType","info","render","displayMessage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import classes from '../../components/Cockpit/Cockpit.module.css';\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport SyllabusData from './SyllabusData';\nimport SyllabusContext from '../../context/syllabusContext.js';\n\nclass Store extends Component {\n  state = {\n    maxReact: [\n      { id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n      { id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n      {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    maxReactWorkLeft: [\n      {\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      },\n      {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      },\n      {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }\n    ],\n    minReact: [\n      {\n        id: 'xvldddwil',\n        lesson: '936670. (for props Changes)',\n        completion: false\n      },\n      {\n        id: 'bbbnnskk',\n        lesson: '93531. (for state Changes)',\n        completion: false\n      },\n      {\n        id: 'kjhsdhck2',\n        lesson: '9100. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    lastLessonHeader: [],\n    crunk: 'Hootie and teh blowfish',\n    showLeftOverLessonsFromSyllabus: false,\n    syllabusData: null,\n    syllabusHandlerChoice: '0'\n  };\n  syllabusDataHandler = () => {\n    let sendBacKminReact = this.state.minReact;\n    console.log(sendBacKminReact);\n  };\n  // lastLessonHeaderHandler = () => {\n  //   if (this.state.maxReact.length != 0) {\n  //     this.setState({ lastLessonHeader: this.state.maxReact[0] });\n  //   } else {\n  //     this.setState({ lastLessonHeader: this.state.lastLessonHeader });\n  //   }\n\n  //   console.log(JSON.stringify(this.state.lastLessonHeader));\n  //   console.log(this.state.lastLessonHeader);\n  // };\n\n  assignLessonFromSyllabus = () => {\n    this.setState({ showLeftOverLessonsFromSyllabus: true });\n\n    if (this.state.maxReact.length != 0) {\n      this.setState({ lastLessonHeader: this.state.maxReact[0] });\n    } else {\n      this.setState({ lastLessonHeader: this.state.lastLessonHeader });\n    }\n  };\n\n  deleteLessonFromAssignedSyllabusHandler = (event, taskIndex) => {\n    alert('Are you sure you want to delete this Lesson?');\n\n    let currentScheduledLessons = [...this.state.maxReact];\n    currentScheduledLessons.splice(taskIndex, 1);\n    this.setState({ maxReact: currentScheduledLessons });\n  };\n\n  deleteLessonFromOriginalSyllabusHandler = (event, taskIndex) => {\n    alert('Are you sure you want to add this lesson?');\n\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n\n    currentOriginalLessons.splice(taskIndex, 1);\n\n    this.setState({ maxReactWorkLeft: currentOriginalLessons });\n  };\n\n  addLessonFromOriginalSyllabusHandler = taskIndex => {\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n    let lessonToAdd = currentOriginalLessons[taskIndex];\n\n    //add to maxReact the picked lesson\n    console.log('I am inside addNewLesonHandler');\n    let currentMaxReactSyllabus = [...this.state.maxReact];\n    currentMaxReactSyllabus.push(lessonToAdd);\n\n    //currentMaxReactSyllabus.push(newLesson);\n    console.log(currentMaxReactSyllabus);\n    let currentShowLeftOverLessonsFromSyllabus = this.state\n      .showLeftOverLessonsFromSyllabus;\n\n    //Showing current left over Lessons from Syllabus (after addition/deletion)\n    this.setState({\n      showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus\n    });\n    //adding to redefining what maxReact is w/ new lesson\n    this.setState({ maxReact: currentMaxReactSyllabus });\n\n    this.deleteLessonFromOriginalSyllabusHandler(taskIndex);\n  };\n\n  lessonChangeHandler = (event, taskChangeId) => {\n    const foundTaskId = this.state.maxReact.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReact[foundTaskId] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    updatedLessons.lesson = event.target.value;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReact];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskId] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReact: lessons });\n  };\n\n  leftOverLessonChangeHandler = (event, taskChangeId) => {\n    const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReactWorkLeft[foundTaskId] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    updatedLessons.lesson = event.target.value;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReactWorkLeft];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskId] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReactWorkLeft: lessons });\n  };\n  showLeftOverLessonsFromSyllabus = () => {\n    this.setState({ showLeftOverLessonsFromSyllabus: true });\n    this.lastLessonHeaderHandler();\n  };\n\n  //Now deals with syllabusData strictly\n  sendSyllabusDataHandler = handlerChoice => {\n    this.setState({ syllabusHandlerChoice: handlerChoice });\n    console.log('Inside of sendSyllabusDataHandler');\n  };\n\n  receiveSyllabusDataHandler = syllabusData => {\n    //this.setState({ syllabusData: syllabusData });\n    let currentSyllabusDataState = { ...this.state.syllabusData };\n\n    currentSyllabusDataState = syllabusData;\n    //this to allow setState to finish inorder for the new syllabusData to show up\n\n    //let currentLastLessonHeader = [...this.state.lastLessonHeader];\n    //currentLastLessonHeader.push;\n    this.setState(\n      {\n        syllabusData: currentSyllabusDataState,\n        syllabusHandlerChoice: '0'\n      },\n      () => {\n        console.log(this.state.syllabusData.lastLessonHeader);\n      }\n    );\n    //console.log(JSON.stringify(this.state.syllabusData[0].showData2));\n  };\n  sendSyllabusDataHandler2 = (event, index) => {\n    //let message = { action: 'add', index: index };\n    this.setState({ syllabusHandlerChoice: '7', index: index });\n    console.log('Inside of sendSyllabusDataHandler2');\n  };\n  resetSyllabusHandlerChoice = () => {\n    this.setState({ syllabusHandlerChoice: '0' });\n  };\n\n  processSyllabusRequestHandler = (\n    event,\n    syllabusHandlerChoice,\n    infoType,\n    info\n  ) => {\n    console.log(\n      `In processSyllabusRequestHandler event.value => ${event.target.value} `\n    );\n    // console.log(\n    //   `In processSyllabusRequestHandler syllabusHandlerChoice => ${syllabusHandlerChoice} `\n    // );\n    let index = null;\n    let id = null;\n    let value = null;\n    if (infoType === 'index') {\n      index = info;\n    } else {\n      id = info;\n    }\n    //event, index, handlerType\n    this.setState({\n      syllabusHandlerChoice: syllabusHandlerChoice,\n      index: index,\n      id: id,\n      value: event.target.value\n    });\n  };\n\n  render() {\n    let displayMessage = null;\n    if (this.state.syllabusHandlerChoice === '1') {\n      displayMessage = <div>Hey syllabusHandlerchoice is recorded</div>;\n    }\n\n    return (\n      <div>\n        <SyllabusContext.Provider\n          value={{\n            processSyllabusRequestHandler: this.processSyllabusRequestHandler,\n            syllabusHandlerChoice: this.state.syllabusHandlerChoice,\n            index: this.state.index,\n            id: this.state.id\n          }}\n        >\n          <SyllabusData\n            value={this.state.value}\n            resetSyllabusHandlerChoice={this.resetSyllabusHandlerChoice}\n            syllabusHandlerChoice={this.state.syllabusHandlerChoice}\n            receiveSyllabusDataHandler={this.receiveSyllabusDataHandler}\n            sendSyllabusDataHandler={this.sendSyllabusDataHandler}\n            index={this.state.index}\n            id={this.state.id}\n          ></SyllabusData>\n\n          <RightCockpit\n            //Syllabus\n\n            sendSyllabusDataHandler={this.sendSyllabusDataHandler}\n            addLessonFromOriginalSyllabusHandler={(\n              event,\n              syllabusHandlerChoice,\n              infoType,\n              info\n            ) =>\n              this.sendSyllabusDataHandler2(\n                event,\n                syllabusHandlerChoice,\n                infoType,\n                info\n              )\n            }\n            assignLessonFromSyllabus={event =>\n              this.assignLessonFromSyllabus(event)\n            }\n            deleteLessonFromAssignedSyllabusHandler={(\n              event,\n              syllabusHandlerChoice,\n              infoType,\n              info\n            ) =>\n              this.processSyllabusRequestHandler(\n                event,\n                syllabusHandlerChoice,\n                infoType,\n                info\n              )\n            }\n            lessonChangeHandler={(event, taskIndex) =>\n              this.lessonChangeHandler(event, taskIndex)\n            }\n            showLeftOverLessonsFromSyllabus={event =>\n              this.showLeftOverLessonsFromSyllabus(event)\n            }\n            leftOverLessonChangeHandler={(\n              event,\n              syllabusHandlerChoice,\n              infoType,\n              info\n            ) =>\n              this.processSyllabusRequestHandler(\n                event,\n                syllabusHandlerChoice,\n                infoType,\n                info\n              )\n            }\n            data={this.state.TasksData}\n            everythingSyllabus={this.state}\n          ></RightCockpit>\n        </SyllabusContext.Provider>\n      </div>\n    );\n  }\n}\n\nexport default Store;\n"]},"metadata":{},"sourceType":"module"}