{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/containers/RightCockpit/RightCockpit.js\";\nimport React, { Component } from 'react';\nimport classes from '../../components/Cockpit/Cockpit.module.css';\nimport rightcockpitClasses from './RightCockpit.module.css';\nimport Cockpit from '../../components/Cockpit/Cockpit';\nimport Navbar from '../../components/Cockpit/Navbar/Navbar';\nimport Lessons from '../../components/ViewContent/Syllabus/MaxReact/Lessons';\nimport ViewContentOptions from '../../components/Cockpit/ViewContentOptions';\nimport NewTask from '../../components/Creation/newTask';\nimport DisplayContent from '../../components/Cockpit/displayContent';\nimport DatePickerPicker from './DatePicker.js';\nimport SyllabusContext from '../../context/syllabusContext';\nimport TasksDataContext from '../../context/tasksContext'; //import Layout from '../../hoc/Layout';\n\nimport NewEvent from '../../components/Creation/NewEvent';\nimport RightCockpitContext from '../../context/RightCockpitContext';\n\nclass RightCockpit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: [],\n      showEvents: false,\n      showDatePicker: false,\n      newTask: [],\n      newTaskTitle: '',\n      newTaskLocation: '',\n      numberOfGuests: 2,\n      contentChoice: '0',\n      showCockpit: true,\n      lastHeader: [],\n      lastTodayTasksHeader: [],\n      lastLessonHeader: [],\n      reRenderTasks: false,\n      syllabi: [],\n      contentChoiceHandlerTestNum: 7,\n      showLeftOverLessonsFromSyllabus: false\n    };\n\n    this.newTaskInfo2 = event => {\n      let newSyllabus = event.target.value;\n      const syllabi = this.state.syllabi;\n      syllabi.push(newSyllabus);\n      this.setState({\n        syllabi: syllabi\n      });\n      console.log(`this is this.state.syllabi after maxReact push ${JSON.stringify(this.state.syllabi, null, 2)}`);\n    };\n\n    this.contentViewHandler = event => {\n      console.log('inside contentViewer');\n      let newViewChoice = event.target.value;\n      this.setState({\n        contentChoice: newViewChoice\n      }); //Comparing new contentChoice with previous contentChoice\n      //if newContentChoice === oldContentChoice\n      //turn off the view\n\n      if (newViewChoice === this.state.contentChoice) {\n        return this.setState({\n          contentChoice: '0'\n        });\n      } else {\n        switch (newViewChoice) {\n          case '1':\n            //All tasks\n            this.context.dataRequestHandler(event, 'tasks', '1', null, null);\n            break;\n\n          case '2':\n            //TodaysTasks\n            this.context.dataRequestHandler(event, 'tasks', '2', null, null);\n            break;\n\n          case '3':\n            //Syllabus (for viewing Syllabus)\n            //reaching out to SyllabusData\n            this.context.dataRequestHandler(event, 'syllabus', '1', null, null);\n            break;\n\n          case '4':\n            //this.context.dataRequestHandler(event, 'syllabus', '8', null, null);\n            break;\n\n          case '6':\n            //Adding Lessons from Syllabus\n            this.context.dataRequestHandler(event, 'syllabus', '6', null, null); //this.props.showLeftOverLessonsFromSyllabus();\n\n            break;\n\n          case '7':\n            this.context.dataRequestHandler(event, 'syllabus', '8', null, null);\n            console.log('Inside case 7');\n            break;\n        }\n      }\n    };\n\n    this.newestTaskHandler = contentChoice => {\n      let newContentChoice = contentChoice;\n      let contentViewObject = {\n        target: {\n          value: newContentChoice\n        }\n      };\n      this.contentViewHandler(contentViewObject);\n    };\n\n    this.newTaskLocationHandler = event => {\n      // let location = event.target.value;\n      // console.log(event.name);\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value,\n        realNum: '1'\n      });\n    };\n\n    this.newestEventHandler = e => {\n      let incomingEvent = {\n        title: e.title,\n        name: e.name\n      }; //obj\n\n      let newestEvent = [...this.state.events, incomingEvent];\n      this.setState({\n        events: newestEvent,\n        showEvents: true\n      });\n    };\n\n    this.newContentViewHandler = (contentChoice, info) => {\n      //this handler send message to contentViewHandler to render the new assigned contentchoice\n      //console.log(`i am inside of newestSyllabusHandler event: ${event}`);\n      let newContentChoice = contentChoice;\n\n      if (info === 'Monday') {\n        let contentViewObject = {\n          target: {\n            value: newContentChoice\n          },\n          info: info\n        };\n      } else {\n        contentViewObject = {\n          target: {\n            value: newContentChoice\n          }\n        };\n      }\n\n      this.contentViewHandler(contentViewObject);\n    };\n  }\n\n  render() {\n    let leftCockpit = null;\n\n    if (this.state.showCockpit == true) {\n      leftCockpit = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(Cockpit, {\n        title: this.props.appTitle,\n        deleteCockpit: () => {\n          this.setState({\n            showCockpit: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }));\n    }\n\n    let displayCockpit = React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row d-flex d-lg-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-lg-4 order-1 float-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card text-white bg-info m-3 p-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, leftCockpit))), React.createElement(\"div\", {\n      className: \"col-lg-8 order-0 float-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card bg-light m-3 p-3 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(NewEvent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }), React.createElement(DisplayContent, {\n      contentViewHandler: event => this.contentViewHandler(event),\n      newestSyllabus: event => this.newestSyllabusHandler(event),\n      everything: this.state,\n      newestTaskHandler: event => this.newestTaskHandler(event),\n      newestEvent: event => this.newestEventHandler(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }))));\n    let navbar = React.createElement(Navbar, {\n      newTaskInfoComing: event => this.newTaskHandler(event),\n      newTaskInfo: event => this.eventContentViewHandler(event),\n      clickedNewEvent: event => this.contentViewHandler(event),\n      title: this.props.appTitle,\n      clicked: event => this.contentViewHandler(event),\n      clickedSyllabus: event => this.contentViewHandler(event),\n      clickedNewTask: event => this.contentViewHandler(event),\n      newTaskInfo2: event => this.newTaskHandler(event),\n      deleteCockpit: () => {\n        this.setState({\n          showCockpit: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, this.props.newTaskInfoComing);\n    let viewContentOptions = React.createElement(ViewContentOptions, {\n      contentViewHandler: event => this.contentViewHandler(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    });\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(RightCockpitContext.Provider, {\n      value: {\n        newContentViewHandler: this.newContentViewHandler(x)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, navbar, React.createElement(\"div\", {\n      className: \"rightcockpitClasses.deskTop\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, viewContentOptions, displayCockpit)));\n  }\n\n}\n\nRightCockpit.contextType = TasksDataContext;\nRightCockpit.contextType = SyllabusContext;\nexport default RightCockpit;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/containers/RightCockpit/RightCockpit.js"],"names":["React","Component","classes","rightcockpitClasses","Cockpit","Navbar","Lessons","ViewContentOptions","NewTask","DisplayContent","DatePickerPicker","SyllabusContext","TasksDataContext","NewEvent","RightCockpitContext","RightCockpit","constructor","props","state","events","showEvents","showDatePicker","newTask","newTaskTitle","newTaskLocation","numberOfGuests","contentChoice","showCockpit","lastHeader","lastTodayTasksHeader","lastLessonHeader","reRenderTasks","syllabi","contentChoiceHandlerTestNum","showLeftOverLessonsFromSyllabus","newTaskInfo2","event","newSyllabus","target","value","push","setState","console","log","JSON","stringify","contentViewHandler","newViewChoice","context","dataRequestHandler","newestTaskHandler","newContentChoice","contentViewObject","newTaskLocationHandler","type","checked","name","realNum","newestEventHandler","e","incomingEvent","title","newestEvent","newContentViewHandler","info","render","leftCockpit","appTitle","displayCockpit","newestSyllabusHandler","navbar","newTaskHandler","eventContentViewHandler","newTaskInfoComing","viewContentOptions","x","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from '../../components/Cockpit/Cockpit.module.css';\nimport rightcockpitClasses from './RightCockpit.module.css';\nimport Cockpit from '../../components/Cockpit/Cockpit';\nimport Navbar from '../../components/Cockpit/Navbar/Navbar';\nimport Lessons from '../../components/ViewContent/Syllabus/MaxReact/Lessons';\nimport ViewContentOptions from '../../components/Cockpit/ViewContentOptions';\nimport NewTask from '../../components/Creation/newTask';\nimport DisplayContent from '../../components/Cockpit/displayContent';\nimport DatePickerPicker from './DatePicker.js';\nimport SyllabusContext from '../../context/syllabusContext';\nimport TasksDataContext from '../../context/tasksContext';\n//import Layout from '../../hoc/Layout';\nimport NewEvent from '../../components/Creation/NewEvent';\nimport RightCockpitContext from '../../context/RightCockpitContext';\nclass RightCockpit extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    events: [],\n    showEvents: false,\n    showDatePicker: false,\n    newTask: [],\n    newTaskTitle: '',\n    newTaskLocation: '',\n    numberOfGuests: 2,\n    contentChoice: '0',\n    showCockpit: true,\n    lastHeader: [],\n    lastTodayTasksHeader: [],\n    lastLessonHeader: [],\n    reRenderTasks: false,\n    syllabi: [],\n    contentChoiceHandlerTestNum: 7,\n\n    showLeftOverLessonsFromSyllabus: false\n  };\n\n  newTaskInfo2 = event => {\n    let newSyllabus = event.target.value;\n\n    const syllabi = this.state.syllabi;\n    syllabi.push(newSyllabus);\n    this.setState({ syllabi: syllabi });\n    console.log(\n      `this is this.state.syllabi after maxReact push ${JSON.stringify(\n        this.state.syllabi,\n        null,\n        2\n      )}`\n    );\n  };\n\n  /*\n      console.log(newViewChoice);\n    console.log(JSON.stringify(newViewChoice, null, 2));\n    //console.log(event.target.['location'].value);\n\n    let maxReact2 = new Syllabus(\n      'maxReact2',\n      'maxReact22222',\n      '11asfd',\n      'Use this in fusfsasgnctions',\n      '11.Read allasf about this'\n    );\n\n    //if array is empty no need to use spread operator\n    const tryOutSyllabi = this.state.syllabi;\n\n    tryOutSyllabi.push(maxReact2);\n\n    this.setState({ syllabi: tryOutSyllabi });\n*/\n\n  contentViewHandler = event => {\n    console.log('inside contentViewer');\n    let newViewChoice = event.target.value;\n    this.setState({ contentChoice: newViewChoice });\n\n    //Comparing new contentChoice with previous contentChoice\n    //if newContentChoice === oldContentChoice\n    //turn off the view\n\n    if (newViewChoice === this.state.contentChoice) {\n      return this.setState({ contentChoice: '0' });\n    } else {\n      switch (newViewChoice) {\n        case '1': //All tasks\n          this.context.dataRequestHandler(event, 'tasks', '1', null, null);\n\n          break;\n\n        case '2': //TodaysTasks\n          this.context.dataRequestHandler(event, 'tasks', '2', null, null);\n\n          break;\n\n        case '3': //Syllabus (for viewing Syllabus)\n          //reaching out to SyllabusData\n\n          this.context.dataRequestHandler(event, 'syllabus', '1', null, null);\n\n          break;\n        case '4':\n          //this.context.dataRequestHandler(event, 'syllabus', '8', null, null);\n          break;\n\n        case '6': //Adding Lessons from Syllabus\n          this.context.dataRequestHandler(event, 'syllabus', '6', null, null);\n          //this.props.showLeftOverLessonsFromSyllabus();\n          break;\n        case '7':\n          this.context.dataRequestHandler(event, 'syllabus', '8', null, null);\n          console.log('Inside case 7');\n\n          break;\n      }\n    }\n  };\n\n  //dynamic edit task for Today (Monday)\n  newestTaskHandler = contentChoice => {\n    let newContentChoice = contentChoice;\n    let contentViewObject = {\n      target: {\n        value: newContentChoice\n      }\n    };\n\n    this.contentViewHandler(contentViewObject);\n  };\n\n  newTaskLocationHandler = event => {\n    // let location = event.target.value;\n    // console.log(event.name);\n\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n      realNum: '1'\n    });\n  };\n\n  newestEventHandler = e => {\n    let incomingEvent = { title: e.title, name: e.name }; //obj\n\n    let newestEvent = [...this.state.events, incomingEvent];\n\n    this.setState({ events: newestEvent, showEvents: true });\n  };\n\n  // newestSyllabusHandler = contentChoice => {\n  //   //this handler send message to contentViewHandler to render the new assigned contentchoice\n  //   //console.log(`i am inside of newestSyllabusHandler event: ${event}`);\n\n  //   let newContentChoice = contentChoice;\n  //   let contentViewObject = {\n  //     target: {\n  //       value: newContentChoice\n  //     }\n  //   };\n\n  //   this.contentViewHandler(contentViewObject);\n  // };\n\n  newContentViewHandler = (contentChoice, info) => {\n    //this handler send message to contentViewHandler to render the new assigned contentchoice\n    //console.log(`i am inside of newestSyllabusHandler event: ${event}`);\n\n    let newContentChoice = contentChoice;\n    if (info === 'Monday') {\n      let contentViewObject = {\n        target: {\n          value: newContentChoice\n        },\n        info: info\n      };\n    } else {\n      contentViewObject = {\n        target: {\n          value: newContentChoice\n        }\n      };\n    }\n\n    this.contentViewHandler(contentViewObject);\n  };\n\n  //static usually used in getDerivedStateFromProps\n  //static contextType = ShowAllTasksAfterAddingTask;\n  static contextType = TasksDataContext;\n  static contextType = SyllabusContext;\n  render() {\n    let leftCockpit = null;\n    if (this.state.showCockpit == true) {\n      leftCockpit = (\n        <React.Fragment>\n          <Cockpit\n            title={this.props.appTitle}\n            deleteCockpit={() => {\n              this.setState({ showCockpit: false });\n            }}\n          />\n        </React.Fragment>\n      );\n    }\n\n    let displayCockpit = (\n      <div className=\"container\">\n        <div className=\"row d-flex d-lg-block\">\n          <div className=\"col-lg-4 order-1 float-left\">\n            <div className=\"card text-white bg-info m-3 p-3\">{leftCockpit}</div>\n          </div>\n        </div>\n\n        <div className=\"col-lg-8 order-0 float-left\">\n          <div className=\"card bg-light m-3 p-3 \">\n            <NewEvent />\n            <DisplayContent\n              contentViewHandler={event => this.contentViewHandler(event)}\n              newestSyllabus={event => this.newestSyllabusHandler(event)}\n              everything={this.state}\n              newestTaskHandler={event => this.newestTaskHandler(event)}\n              newestEvent={event => this.newestEventHandler(event)}\n            />\n          </div>\n        </div>\n      </div>\n    );\n\n    let navbar = (\n      <Navbar\n        newTaskInfoComing={event => this.newTaskHandler(event)}\n        newTaskInfo={event => this.eventContentViewHandler(event)}\n        clickedNewEvent={event => this.contentViewHandler(event)}\n        title={this.props.appTitle}\n        clicked={event => this.contentViewHandler(event)}\n        clickedSyllabus={event => this.contentViewHandler(event)}\n        clickedNewTask={event => this.contentViewHandler(event)}\n        newTaskInfo2={event => this.newTaskHandler(event)}\n        deleteCockpit={() => {\n          this.setState({ showCockpit: false });\n        }}\n      >\n        {this.props.newTaskInfoComing}\n      </Navbar>\n    );\n\n    let viewContentOptions = (\n      <ViewContentOptions\n        contentViewHandler={event => this.contentViewHandler(event)}\n      />\n    );\n\n    return (\n      <React.Fragment>\n        <RightCockpitContext.Provider\n          value={{\n            newContentViewHandler: this.newContentViewHandler(x)\n          }}\n        >\n          {navbar}\n          <div className=\"rightcockpitClasses.deskTop\">\n            {viewContentOptions}\n\n            {displayCockpit}\n          </div>\n        </RightCockpitContext.Provider>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default RightCockpit;\n"]},"metadata":{},"sourceType":"module"}