{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/Creation/NewEvent.js\";\nimport React, { Component } from 'react';\nimport numToDay from '../Calendar/numToDay';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport ReactDatePicker from '../Calendar/ReactDatePicker'; //import RightCockpitContext from '../../context/RightCockpitContext';\n\nimport { format, compareAsc } from 'date-fns';\nimport StoreDataContext from '../../context/StoreDataContext';\nimport Icon from '../Calendar/Icon';\nimport { Form, Input, FormGroup, Container, Label } from 'reactstrap';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\nimport { fi } from 'date-fns/locale';\n\nclass NewEvent extends Component {\n  // state = {\n  //   eventId: '', //task + date + start time\n  //   eventTitle: '',\n  //   eventNote: '',\n  //   eventCategory: '', //errand,multiday event, single day event, (radial choices)\n  //   //required\n  //   startTimeDate: '',\n  //   finishTimeDate: '',\n  //   eventDuration: '', //\n  //   blockOffTimeSlot: false,\n  //   showStartTimeDate: false,\n  //   showFinishTimeDate: false,\n  //   deadline: ''\n  // };\n  constructor(props) {\n    super(props);\n    this.state = {\n      eventId: '',\n      eventTitle: '',\n      eventNote: '',\n      eventCategory: '',\n      startTimeDate: '',\n      finishTimeDate: '',\n      eventDuration: '',\n      //\n      blockOffTimeSlot: false,\n      showStartTimeDate: false,\n      showFinishTimeDate: false,\n      deadline: ''\n    };\n\n    this.onSubmit = event => {\n      event.preventDefault(); //if forgot to fill out the title it will focus on it\n\n      if (!this.state.eventTitle) {\n        this.emptyTitle.current.focus();\n        return alert('Give the event a name!');\n      } // let start = this.state.startTimeDate;\n      // let findDay = numToDay(start.day);\n\n\n      if (this.state.dayObjName) {\n        let dataRequestMessage = {\n          typeOfData: 'events',\n          handlerChoice: '1',\n          dataLocation: this.state.dayObjName,\n          infoType: 'newEvent',\n          info: this.state\n        };\n        this.context.dataRequestHandler(event, dataRequestMessage);\n        this.resetState();\n      }\n    };\n\n    this.resetState = () => {\n      let contentChoiceObj = {\n        target: {\n          value: '9'\n        }\n      };\n      this.setState({\n        eventId: '',\n        //task + date + start time\n        eventTitle: '',\n        eventNote: '',\n        eventCategory: '',\n        //required\n        startTimeDate: '',\n        finishTimeDate: '',\n        showStartTimeDate: false,\n        showFinishTimeDate: false,\n        deadline: '',\n        eventDuration: '',\n        //\n        blockOffTimeSlot: ''\n      }, () => this.context.contentViewHandler(contentChoiceObj));\n    };\n\n    this.handleDateChange = date => {\n      this.setState({\n        startTimeDate: date,\n        showStartTimeDate: true\n      });\n    };\n\n    this.startDateTimeHandler = date => {\n      let eventStartTimeDate = {\n        dateObjectString: date.dateObjectString,\n        dateString: date.dateString,\n        day: date.day,\n        date: date.date,\n        month: date.month,\n        year: date.year,\n        timeString: date.time,\n        hour: date.hour,\n        minute: date.minute\n      };\n      this.setState({\n        startTimeDate: eventStartTimeDate,\n        showFinishTimeDate: true\n      });\n    };\n\n    this.finishTimeDateHandler = date => {\n      let eventFinishTimeDate = {\n        dateObjectString: date.dateObjectString,\n        dateString: date.dateString,\n        day: date.day,\n        date: date.date,\n        month: date.month,\n        year: date.year,\n        timeString: date.time,\n        hour: date.hour,\n        minute: date.minute\n      }; // let currentShowFinishTimeDate = this.state.showFinishTimeDate\n      // showFinishTimeDate: !currentShowFinishTimeDate\n\n      this.setState({\n        finishTimeDate: eventFinishTimeDate\n      });\n    };\n\n    this.eventTitleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.eventNoteChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.eventTypeChange = e => {\n      this.setState({\n        eventType: e.target.value\n      });\n    };\n\n    this.emptyTitle = React.createRef();\n  }\n\n  handleStartTimeDateChange(date) {\n    //let currentShowStartTimeDate = this.state.showStartTimeDate;\n    let day = format(date, 'E');\n    let dateDigit = format(date, 'dd');\n    let year = format(date, 'yy');\n    let month = format(date, 'MM');\n    let dayObjName = year + month + dateDigit + day;\n    console.log(`day: ${day} type: ${typeof day}`);\n    console.log(`date: ${dateDigit} type: ${typeof dateDigit}`);\n    console.log(`year: ${year} type: ${typeof year}`);\n    console.log(`month: ${month} type: ${typeof month}`);\n    console.log(`dayObjName: ${dayObjName} type: ${typeof dayObjName}`); // let currentDaysObj = this.state.days;\n    // //if there there is NO obj for that day\n    // if (typeof currentDaysObj[dayObjName] == 'undefined') {\n    //   this.newDayObj(dayObjName);\n    // } else {\n    //   //if there is an obj for that day\n    //   let newTask = { id: 'task243', title: 'groceries' };\n    //   currentDaysObj[dayObjName].unscheduledtasks.push(newTask);\n    //   console.log(currentDaysObj[dayObjName]);\n\n    this.setState({\n      dayObjName: dayObjName\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Event Title\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"eventTitle\",\n      className: \"form-control\",\n      ref: this.emptyTitle //defaultValue=\"NBA AllStar Game\"\n      ,\n      value: this.state.eventTitle,\n      onChange: e => this.eventTitleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, \"Event Type\"), React.createElement(\"select\", {\n      name: \"assignedTimeStart\",\n      className: \"form-control\",\n      placeholder: \"Enter Start Time.\",\n      onChange: e => this.eventTypeChange(e),\n      id: \"assignedTimeStart\",\n      defaultValue: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"Appointment\"), React.createElement(\"option\", {\n      value: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"Meeting\"), React.createElement(\"option\", {\n      value: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, \"One Time - Scheduled\"), React.createElement(\"option\", {\n      value: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"One Time - Unschedule\"), React.createElement(\"option\", {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, \"Multi Day Event\"))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \"Note\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"eventNote\",\n      className: \"form-control\",\n      defaultValue: \"Watch on Chanel 13\" //value={this.state.eventNote}\n      ,\n      onChange: e => this.eventNoteChange(e) //ref={eventNoteRef => eventNoteRef.focus()}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), React.createElement(DatePicker, {\n      placeholderText: \"Choose Start Time\",\n      selected: this.state.startDate,\n      onChange: date => this.handleStartTimeDateChange(date),\n      showTimeSelect: true,\n      timeFormat: \"HH:mm\",\n      timeIntervals: 30,\n      timeCaption: \"Start\",\n      dateFormat: \"MMMM dd, yyyy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nNewEvent.contextType = StoreDataContext;\nexport default NewEvent; // let date2 = {\n//   date: 31,\n//   dateObjectString:\n//     'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n//   toISOString: '2020-01-31T13:00:00.000Z',\n//   toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   dateString: 'Fri Jan 31 2020',\n//   timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n//   year: 2020,\n//   yearShort: 120,\n//   month: 0,\n//   day: 5,\n//   time: '8:00:00 AM',\n//   hour: 8,\n//   minute: 0,\n//   UTCDate: 31,\n//   toLocalString: '1/31/2020, 8:00:00 AM',\n//   toLocalDateString: '1/31/2020',\n//   toLocaleTimeString: '8:00:00 AM'\n// };","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/Creation/NewEvent.js"],"names":["React","Component","numToDay","DatePickerPicker","ReactDatePicker","format","compareAsc","StoreDataContext","Icon","Form","Input","FormGroup","Container","Label","DateRangePicker","SingleDatePicker","DayPickerRangeController","fi","NewEvent","constructor","props","state","eventId","eventTitle","eventNote","eventCategory","startTimeDate","finishTimeDate","eventDuration","blockOffTimeSlot","showStartTimeDate","showFinishTimeDate","deadline","onSubmit","event","preventDefault","emptyTitle","current","focus","alert","dayObjName","dataRequestMessage","typeOfData","handlerChoice","dataLocation","infoType","info","context","dataRequestHandler","resetState","contentChoiceObj","target","value","setState","contentViewHandler","handleDateChange","date","startDateTimeHandler","eventStartTimeDate","dateObjectString","dateString","day","month","year","timeString","time","hour","minute","finishTimeDateHandler","eventFinishTimeDate","eventTitleChange","e","name","eventNoteChange","eventTypeChange","eventType","createRef","handleStartTimeDateChange","dateDigit","console","log","render","startDate","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport numToDay from '../Calendar/numToDay';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport ReactDatePicker from '../Calendar/ReactDatePicker';\n//import RightCockpitContext from '../../context/RightCockpitContext';\nimport { format, compareAsc } from 'date-fns';\nimport StoreDataContext from '../../context/StoreDataContext';\nimport Icon from '../Calendar/Icon';\nimport { Form, Input, FormGroup, Container, Label } from 'reactstrap';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport {\n  DateRangePicker,\n  SingleDatePicker,\n  DayPickerRangeController\n} from 'react-dates';\nimport { fi } from 'date-fns/locale';\n\nclass NewEvent extends Component {\n  // state = {\n  //   eventId: '', //task + date + start time\n  //   eventTitle: '',\n  //   eventNote: '',\n  //   eventCategory: '', //errand,multiday event, single day event, (radial choices)\n  //   //required\n  //   startTimeDate: '',\n  //   finishTimeDate: '',\n  //   eventDuration: '', //\n  //   blockOffTimeSlot: false,\n  //   showStartTimeDate: false,\n  //   showFinishTimeDate: false,\n  //   deadline: ''\n  // };\n  constructor(props) {\n    super(props);\n    this.emptyTitle = React.createRef();\n  }\n\n  state = {\n    eventId: '',\n    eventTitle: '',\n    eventNote: '',\n    eventCategory: '',\n    startTimeDate: '',\n    finishTimeDate: '',\n    eventDuration: '', //\n    blockOffTimeSlot: false,\n    showStartTimeDate: false,\n    showFinishTimeDate: false,\n    deadline: ''\n  };\n\n  // newEventHandler = (event, info) => {\n  //   //let contentchoice = event.target.value;\n  //   let typeOfData = ''; //string: syllabus,tasks,events,objectives\n  //   let handlerChoice = ''; //string: '#' handler inside of database\n  //   let dataLocation = ''; // string: where obj found inside database\n  //   let infoType = ''; //string: index/id/\n  //   //let info = ''; //string: actual info\n\n  //   // let value = '';\n  //   let dataRequestMessage = {};\n  //   //alert(`dataRequestMessage: ${dataRequestMessage}`);\n  //   switch (this.context.contentChoice) {\n  //     case '5':\n  //       typeOfData = 'events';\n  //       handlerChoice = '1';\n  //       dataLocation = '';\n  //       infoType = '';\n  //       //info = '';\n  //       break;\n\n  //   }\n  //   dataRequestMessage = {\n  //     typeOfData: typeOfData,\n  //     handlerChoice: handlerChoice,\n  //     dataLocation: dataLocation,\n  //     infoType: infoType,\n  //     info: info\n  //   };\n\n  //   this.context.dataRequestHandler(event, dataRequestMessage);\n  // };\n\n  // onSubmit = event => {\n  //   event.preventDefault();\n  //   //if forgot to fill out the title it will focus on it\n  //   if (!this.state.eventTitle) {\n  //     this.emptyTitle.current.focus();\n  //     return alert('Give the event a name!');\n  //   }\n  //   let start = this.state.startTimeDate;\n\n  //   let findDay = numToDay(start.day);\n\n  //   let dataRequestMessage = {\n  //     typeOfData: 'events',\n  //     handlerChoice: '1',\n  //     dataLocation: findDay,\n  //     infoType: 'newEvent',\n  //     info: this.state\n  //   };\n  //   this.context.dataRequestHandler(event, dataRequestMessage);\n\n  //   this.resetState();\n  // };\n\n  onSubmit = event => {\n    event.preventDefault();\n    //if forgot to fill out the title it will focus on it\n    if (!this.state.eventTitle) {\n      this.emptyTitle.current.focus();\n      return alert('Give the event a name!');\n    }\n    // let start = this.state.startTimeDate;\n\n    // let findDay = numToDay(start.day);\n    if (this.state.dayObjName) {\n      let dataRequestMessage = {\n        typeOfData: 'events',\n        handlerChoice: '1',\n        dataLocation: this.state.dayObjName,\n        infoType: 'newEvent',\n        info: this.state\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage);\n\n      this.resetState();\n    }\n  };\n\n  resetState = () => {\n    let contentChoiceObj = {\n      target: {\n        value: '9'\n      }\n    };\n\n    this.setState(\n      {\n        eventId: '', //task + date + start time\n        eventTitle: '',\n        eventNote: '',\n        eventCategory: '',\n        //required\n        startTimeDate: '',\n        finishTimeDate: '',\n        showStartTimeDate: false,\n        showFinishTimeDate: false,\n        deadline: '',\n        eventDuration: '', //\n        blockOffTimeSlot: ''\n      },\n      () => this.context.contentViewHandler(contentChoiceObj)\n    );\n  };\n\n  handleDateChange = date => {\n    this.setState({\n      startTimeDate: date,\n      showStartTimeDate: true\n    });\n  };\n\n  startDateTimeHandler = date => {\n    let eventStartTimeDate = {\n      dateObjectString: date.dateObjectString,\n      dateString: date.dateString,\n      day: date.day,\n      date: date.date,\n      month: date.month,\n      year: date.year,\n      timeString: date.time,\n      hour: date.hour,\n      minute: date.minute\n    };\n    this.setState({\n      startTimeDate: eventStartTimeDate,\n      showFinishTimeDate: true\n    });\n  };\n\n  finishTimeDateHandler = date => {\n    let eventFinishTimeDate = {\n      dateObjectString: date.dateObjectString,\n      dateString: date.dateString,\n      day: date.day,\n      date: date.date,\n      month: date.month,\n      year: date.year,\n      timeString: date.time,\n      hour: date.hour,\n      minute: date.minute\n    };\n\n    // let currentShowFinishTimeDate = this.state.showFinishTimeDate\n    // showFinishTimeDate: !currentShowFinishTimeDate\n    this.setState({ finishTimeDate: eventFinishTimeDate });\n  };\n\n  eventTitleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n  eventNoteChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  eventTypeChange = e => {\n    this.setState({\n      eventType: e.target.value\n    });\n  };\n\n  handleStartTimeDateChange(date) {\n    //let currentShowStartTimeDate = this.state.showStartTimeDate;\n    let day = format(date, 'E');\n    let dateDigit = format(date, 'dd');\n    let year = format(date, 'yy');\n    let month = format(date, 'MM');\n    let dayObjName = year + month + dateDigit + day;\n\n    console.log(`day: ${day} type: ${typeof day}`);\n    console.log(`date: ${dateDigit} type: ${typeof dateDigit}`);\n    console.log(`year: ${year} type: ${typeof year}`);\n    console.log(`month: ${month} type: ${typeof month}`);\n    console.log(`dayObjName: ${dayObjName} type: ${typeof dayObjName}`);\n\n    // let currentDaysObj = this.state.days;\n\n    // //if there there is NO obj for that day\n    // if (typeof currentDaysObj[dayObjName] == 'undefined') {\n    //   this.newDayObj(dayObjName);\n    // } else {\n    //   //if there is an obj for that day\n\n    //   let newTask = { id: 'task243', title: 'groceries' };\n\n    //   currentDaysObj[dayObjName].unscheduledtasks.push(newTask);\n    //   console.log(currentDaysObj[dayObjName]);\n\n    this.setState({\n      dayObjName: dayObjName\n    });\n  }\n\n  static contextType = StoreDataContext;\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <form>\n            <div className=\"form-group\">\n              <label>Event Title</label>\n              <input\n                type=\"text\"\n                name=\"eventTitle\"\n                className=\"form-control\"\n                ref={this.emptyTitle}\n                //defaultValue=\"NBA AllStar Game\"\n                value={this.state.eventTitle}\n                onChange={e => this.eventTitleChange(e)}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>Event Type</label>\n              <select\n                name=\"assignedTimeStart\"\n                className=\"form-control\"\n                placeholder=\"Enter Start Time.\"\n                onChange={e => this.eventTypeChange(e)}\n                id=\"assignedTimeStart\"\n                defaultValue=\"1\"\n              >\n                <option value=\"1\">Appointment</option>\n                <option value=\"2\">Meeting</option>\n                <option value=\"3\">One Time - Scheduled</option>\n                <option value=\"4\">One Time - Unschedule</option>\n                <option value=\"5\">Multi Day Event</option>\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label>Note</label>\n              <input\n                type=\"text\"\n                name=\"eventNote\"\n                className=\"form-control\"\n                defaultValue=\"Watch on Chanel 13\"\n                //value={this.state.eventNote}\n                onChange={e => this.eventNoteChange(e)}\n                //ref={eventNoteRef => eventNoteRef.focus()}\n              />\n\n              {/* <DatePickerPicker\n                startDateTimeHandler={date => this.startDateTimeHandler(date)}\n                finishTimeDateHandler={date => this.finishTimeHandler(date)}\n              /> */}\n\n              <DatePicker\n                placeholderText=\"Choose Start Time\"\n                selected={this.state.startDate}\n                onChange={date => this.handleStartTimeDateChange(date)}\n                showTimeSelect\n                timeFormat=\"HH:mm\"\n                timeIntervals={30}\n                timeCaption=\"Start\"\n                dateFormat=\"MMMM dd, yyyy\"\n              />\n            </div>\n\n            <button onClick={e => this.onSubmit(e)}>Submit</button>\n          </form>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NewEvent;\n\n// let date2 = {\n//   date: 31,\n//   dateObjectString:\n//     'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n//   toISOString: '2020-01-31T13:00:00.000Z',\n//   toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   dateString: 'Fri Jan 31 2020',\n//   timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n//   year: 2020,\n//   yearShort: 120,\n//   month: 0,\n//   day: 5,\n//   time: '8:00:00 AM',\n//   hour: 8,\n//   minute: 0,\n//   UTCDate: 31,\n//   toLocalString: '1/31/2020, 8:00:00 AM',\n//   toLocalDateString: '1/31/2020',\n//   toLocaleTimeString: '8:00:00 AM'\n// };\n"]},"metadata":{},"sourceType":"module"}