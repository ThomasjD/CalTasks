{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport rocky from './App.module.css';\nimport Tasks from '../components/Tasks/Tasks';\nimport Task from '../components/Tasks/Task/Task';\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport '../components/Tasks/Task/Task';\nimport classNames from 'classnames'; //import Radium, {StyleRoot} from 'radium';\n//import wtf from './SpecialBtn.module.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tasks: [{\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      }, {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      }, {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }],\n      showTasks: false //show list of tasks\n\n    };\n\n    this.toggleShowTasksHandler = () => {\n      const doesShow = this.state.showTasks;\n      this.setState({\n        showTasks: !doesShow\n      });\n    };\n\n    this.deleteTaskhandler = taskIndex => {\n      //get tasks array\n      const tasks = [...this.state.tasks]; //splice task of interst\n\n      tasks.splice(taskIndex, 1); //update new list of tasks to state\n\n      this.setState({\n        tasks: tasks\n      });\n    };\n\n    this.taskChangeHandler = (event, taskChangedId) => {\n      //find the task that matches the taskChangedId\n      const foundTaskId = this.state.tasks.findIndex(currentId => {\n        return currentId.id === taskChangedId;\n      }); //create new task item that we will put into array\n\n      const updatedTask = _objectSpread({}, this.state.tasks[foundTaskId]);\n\n      updatedTask.todo = event.target.value; //pull out the states tasks array\n\n      const tasks = [...this.state.tasks]; //update the task with id of interest w/ new task description\n\n      tasks[foundTaskId] = updatedTask; //update the state\n\n      this.setState({\n        tasks: tasks\n      });\n    };\n  }\n\n  render() {\n    let displayTasks = null;\n    let btnClass = ''; //clicking on the show Tasks button to show available tasks\n    //tasks, clicked, changed will be sent to <Tasks>\n\n    if (this.state.showTasks) {\n      displayTasks = React.createElement(Tasks, {\n        tasks: this.state.tasks,\n        clicked: this.deleteTaskhandler,\n        changed: this.taskChangeHandler,\n        btnClass: rocky.specialbtn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }); //button turns red when <Tasks> are shown, when you can delete them (it overide style for hover)\n      //style.backgroundColor = 'red'\n    } else {\n      btnClass = rocky.button;\n    } //use switch case to determine color of button (depending on how many tasks left)\n    // console.log(classes)\n\n\n    let tasklength = this.state.tasks.length;\n    console.log(tasklength);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Cockpit, {\n      click: this.toggleShowTasksHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), displayTasks);\n  }\n\n} //<p>this class is {classes}</p>\n//export default Radium(App);\n\n\nexport default App; //<p className={rocky[classes]}>Things to Do!</p>\n//using css modules on multiple classNames \n//{classNames({[styles.foo]: true, [styles.bar]: true})}\n//<p className={classNames({[rocky[classes]]: true, [rocky.red]: true})}>Things to Do!</p>","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/App.js"],"names":["React","Component","rocky","Tasks","Task","Cockpit","classNames","App","state","tasks","id","todo","deadline","location","showTasks","toggleShowTasksHandler","doesShow","setState","deleteTaskhandler","taskIndex","splice","taskChangeHandler","event","taskChangedId","foundTaskId","findIndex","currentId","updatedTask","target","value","render","displayTasks","btnClass","specialbtn","button","tasklength","length","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport rocky from './App.module.css';\nimport Tasks from '../components/Tasks/Tasks'\nimport Task from '../components/Tasks/Task/Task'\nimport Cockpit from '../components/Cockpit/Cockpit'\nimport '../components/Tasks/Task/Task'\nimport classNames from 'classnames';\n\n//import Radium, {StyleRoot} from 'radium';\n//import wtf from './SpecialBtn.module.css';\n\nclass App extends Component {\n  //data\n  state = {\n    tasks: [\n      {id: 'qrwrwq', todo: 'Find work', deadline : 'Lunes', location: 'Poplado'},\n      {id: 'egewhw', todo: 'buy shoes', deadline : 'Martes', location: 'Floresta'},\n      {id: 'asfasv', todo: 'mail package', deadline : 'Jueves', location: 'Laureles'}\n    ],   \n    showTasks: false\n\n  }\n\n\n  //show list of tasks\n  toggleShowTasksHandler = () => {\n    const doesShow = this.state.showTasks;\n    this.setState({showTasks: !doesShow}) \n    }\n\n  //delete a task \n  deleteTaskhandler = (taskIndex) => {\n    //get tasks array\n    const tasks = [...this.state.tasks];  \n    //splice task of interst\n    tasks.splice(taskIndex, 1);\n    //update new list of tasks to state\n    this.setState({tasks : tasks})\n  }\n\n  //dynamic edit task\n  taskChangeHandler = (event, taskChangedId) => {\n    //find the task that matches the taskChangedId\n    const foundTaskId = this.state.tasks.findIndex(currentId => {\n      return currentId.id === taskChangedId\n    })\n\n    //create new task item that we will put into array\n    const updatedTask = {...this.state.tasks[foundTaskId]}\n    updatedTask.todo = event.target.value\n\n    //pull out the states tasks array\n    const tasks = [...this.state.tasks]\n    \n    //update the task with id of interest w/ new task description\n    tasks[foundTaskId] = updatedTask\n    \n    //update the state\n    this.setState({tasks: tasks})\n    }\n\n\n  render() {\n  \n    let displayTasks = null;\n    let btnClass = '';\n\n    //clicking on the show Tasks button to show available tasks\n      //tasks, clicked, changed will be sent to <Tasks>\n\n    if (this.state.showTasks) {\n      displayTasks = (\n        \n            <Tasks \n              tasks={this.state.tasks}\n              clicked = {this.deleteTaskhandler}\n              changed = {this.taskChangeHandler}\n              btnClass = {rocky.specialbtn} \n            />\n     \n      )\n      \n      //button turns red when <Tasks> are shown, when you can delete them (it overide style for hover)\n      //style.backgroundColor = 'red'\n    } else {\n      btnClass = rocky.button\n    }\n\n    //use switch case to determine color of button (depending on how many tasks left)\n    // console.log(classes)\n     let tasklength = this.state.tasks.length\n\n     console.log(tasklength)\n\n\n    \n\n    \n    return (\n      <div>  \n        <Cockpit\n      click = {this.toggleShowTasksHandler}\n     />\n     {displayTasks}\n\n      </div>\n     \n      \n    );\n    \n  }\n}\n//<p>this class is {classes}</p>\n//export default Radium(App);\nexport default App\n//<p className={rocky[classes]}>Things to Do!</p>\n\n\n\n//using css modules on multiple classNames \n//{classNames({[styles.foo]: true, [styles.bar]: true})}\n//<p className={classNames({[rocky[classes]]: true, [rocky.red]: true})}>Things to Do!</p>"]},"metadata":{},"sourceType":"module"}