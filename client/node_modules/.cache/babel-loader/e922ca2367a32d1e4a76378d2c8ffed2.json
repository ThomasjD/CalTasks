{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/src/BodyView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\n\nclass BodyView extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const schedulerData = this.props.schedulerData;\n    const renderData = schedulerData.renderData,\n          headers = schedulerData.headers,\n          config = schedulerData.config,\n          behaviors = schedulerData.behaviors;\n    let cellWidth = schedulerData.getContentCellWidth();\n    let displayRenderData = renderData.filter(o => o.render);\n    let tableRows = displayRenderData.map(item => {\n      let rowCells = headers.map((header, index) => {\n        let key = item.slotId + '_' + header.time;\n        let style = index === headers.length - 1 ? {} : {\n          width: cellWidth\n        };\n        if (!!header.nonWorkingTime) style = _objectSpread({}, style, {\n          backgroundColor: config.nonWorkingTimeBodyBgColor\n        });\n        if (item.groupOnly) style = _objectSpread({}, style, {\n          backgroundColor: config.groupOnlySlotColor\n        });\n\n        if (!!behaviors.getNonAgendaViewBodyCellBgColorFunc) {\n          let cellBgColor = behaviors.getNonAgendaViewBodyCellBgColorFunc(schedulerData, item.slotId, header);\n          if (!!cellBgColor) style = _objectSpread({}, style, {\n            backgroundColor: cellBgColor\n          });\n        }\n\n        return React.createElement(\"td\", {\n          key: key,\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(\"tr\", {\n        key: item.slotId,\n        style: {\n          height: item.rowHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, rowCells);\n    });\n    return React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, tableRows);\n  }\n\n}\n\nBodyView.propTypes = {\n  schedulerData: PropTypes.object.isRequired\n};\nexport default BodyView;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/src/BodyView.js"],"names":["React","Component","PropTypes","BodyView","constructor","props","render","schedulerData","renderData","headers","config","behaviors","cellWidth","getContentCellWidth","displayRenderData","filter","o","tableRows","map","item","rowCells","header","index","key","slotId","time","style","length","width","nonWorkingTime","backgroundColor","nonWorkingTimeBodyBgColor","groupOnly","groupOnlySlotColor","getNonAgendaViewBodyCellBgColorFunc","cellBgColor","height","rowHeight","propTypes","object","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,SAAR,QAAwB,YAAxB;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAE7BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AAMDC,EAAAA,MAAM,GAAG;AAAA,UAEEC,aAFF,GAEmB,KAAKF,KAFxB,CAEEE,aAFF;AAAA,UAGEC,UAHF,GAG4CD,aAH5C,CAGEC,UAHF;AAAA,UAGcC,OAHd,GAG4CF,aAH5C,CAGcE,OAHd;AAAA,UAGuBC,MAHvB,GAG4CH,aAH5C,CAGuBG,MAHvB;AAAA,UAG+BC,SAH/B,GAG4CJ,aAH5C,CAG+BI,SAH/B;AAIL,QAAIC,SAAS,GAAGL,aAAa,CAACM,mBAAd,EAAhB;AAEA,QAAIC,iBAAiB,GAAGN,UAAU,CAACO,MAAX,CAAkBC,CAAC,IAAIA,CAAC,CAACV,MAAzB,CAAxB;AACA,QAAIW,SAAS,GAAGH,iBAAiB,CAACI,GAAlB,CAAuBC,IAAD,IAAU;AAC5C,UAAIC,QAAQ,GAAGX,OAAO,CAACS,GAAR,CAAY,CAACG,MAAD,EAASC,KAAT,KAAmB;AAC1C,YAAIC,GAAG,GAAGJ,IAAI,CAACK,MAAL,GAAc,GAAd,GAAoBH,MAAM,CAACI,IAArC;AACA,YAAIC,KAAK,GAAGJ,KAAK,KAAKb,OAAO,CAACkB,MAAR,GAAiB,CAA3B,GAA+B,EAA/B,GAAoC;AAACC,UAAAA,KAAK,EAAEhB;AAAR,SAAhD;AACA,YAAG,CAAC,CAACS,MAAM,CAACQ,cAAZ,EACIH,KAAK,qBAAOA,KAAP;AAAcI,UAAAA,eAAe,EAAEpB,MAAM,CAACqB;AAAtC,UAAL;AACJ,YAAGZ,IAAI,CAACa,SAAR,EACIN,KAAK,qBAAOA,KAAP;AAAcI,UAAAA,eAAe,EAAEpB,MAAM,CAACuB;AAAtC,UAAL;;AACJ,YAAG,CAAC,CAACtB,SAAS,CAACuB,mCAAf,EAAmD;AAC/C,cAAIC,WAAW,GAAGxB,SAAS,CAACuB,mCAAV,CAA8C3B,aAA9C,EAA6DY,IAAI,CAACK,MAAlE,EAA0EH,MAA1E,CAAlB;AACA,cAAG,CAAC,CAACc,WAAL,EACIT,KAAK,qBAAOA,KAAP;AAAcI,YAAAA,eAAe,EAAEK;AAA/B,YAAL;AACP;;AACD,eACI;AAAI,UAAA,GAAG,EAAEZ,GAAT;AAAc,UAAA,KAAK,EAAEG,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA5B,CADJ;AAGH,OAfc,CAAf;AAiBA,aACI;AAAI,QAAA,GAAG,EAAEP,IAAI,CAACK,MAAd;AAAsB,QAAA,KAAK,EAAE;AAACY,UAAAA,MAAM,EAAEjB,IAAI,CAACkB;AAAd,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKjB,QADL,CADJ;AAKH,KAvBe,CAAhB;AAyBA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKH,SADL,CADJ;AAKH;;AA/C4B;;AAA3Bd,Q,CAMKmC,S,GAAY;AACf/B,EAAAA,aAAa,EAAEL,SAAS,CAACqC,MAAV,CAAiBC;AADjB,C;AA4CvB,eAAerC,QAAf","sourcesContent":["import React, {Component} from 'react'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nclass BodyView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    static propTypes = {\r\n        schedulerData: PropTypes.object.isRequired,\r\n    }\r\n\r\n    render() {\r\n\r\n        const {schedulerData} = this.props;\r\n        const {renderData, headers, config, behaviors} = schedulerData;\r\n        let cellWidth = schedulerData.getContentCellWidth();\r\n\r\n        let displayRenderData = renderData.filter(o => o.render);\r\n        let tableRows = displayRenderData.map((item) => {\r\n            let rowCells = headers.map((header, index) => {\r\n                let key = item.slotId + '_' + header.time;\r\n                let style = index === headers.length - 1 ? {} : {width: cellWidth};\r\n                if(!!header.nonWorkingTime)\r\n                    style = {...style, backgroundColor: config.nonWorkingTimeBodyBgColor};\r\n                if(item.groupOnly)\r\n                    style = {...style, backgroundColor: config.groupOnlySlotColor};\r\n                if(!!behaviors.getNonAgendaViewBodyCellBgColorFunc){\r\n                    let cellBgColor = behaviors.getNonAgendaViewBodyCellBgColorFunc(schedulerData, item.slotId, header);\r\n                    if(!!cellBgColor)\r\n                        style = {...style, backgroundColor: cellBgColor};\r\n                }\r\n                return (\r\n                    <td key={key} style={style}><div></div></td>\r\n                )\r\n            });\r\n\r\n            return (\r\n                <tr key={item.slotId} style={{height: item.rowHeight}}>\r\n                    {rowCells}\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <tbody>\r\n                {tableRows}\r\n            </tbody>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BodyView"]},"metadata":{},"sourceType":"module"}