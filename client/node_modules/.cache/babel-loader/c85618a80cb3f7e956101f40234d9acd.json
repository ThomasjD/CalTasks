{"ast":null,"code":"import React, { Component } from 'react';\nimport StoreDataContext from '../../context/StoreDataContext';\n\nclass ObjectiveData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataBaseName: 'obj',\n      firstTimeData: true,\n      dailyBudget: null,\n      activityWeekCategories: null,\n      pickedDay: null\n    };\n\n    this.dataForDisplay = () => {\n      this.timeBudgetDay();\n      this.setState({\n        dataLocation: 'new',\n        dailyBudget: this.dailyBudget,\n        activityWeekCategories: this.activityWeekCategories,\n        firstTimeData: !this.state.firstTimeData\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n\n    this.pickedDayHandler = pickedDay => {\n      this.setState({\n        pickedDay: pickedDay\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n\n    this.initialRun = () => {\n      this.setState({\n        dailyBudget: this.dailyBudget,\n        activityWeekCategories: this.activityWeekCategories,\n        firstTimeData: !this.state.firstTimeData\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n\n    this.addHourToActivityPickedDay = activity => {\n      let pickedDay = this.state.pickedDay;\n      let allDaysTimeBudget = this.state.dailyBudget;\n      let pickedDayDailyBudget = { ...this.state.dailyBudget[pickedDay]\n      };\n      let pickedDayCurrentTotalHourCount = pickedDayDailyBudget.totalHours;\n      let pickedDayCurrentActivityHourCount = pickedDayDailyBudget[activity]; //const [[activity], totalHours] = {...this.state.activityWeekCategories}\n\n      let pickedDayUpdatedTotalHourCount = pickedDayCurrentTotalHourCount + 1;\n      let pickedDayUpdatedActivityHourCount = pickedDayCurrentActivityHourCount + 1;\n      pickedDayDailyBudget.totalHours = pickedDayUpdatedTotalHourCount;\n      pickedDayDailyBudget[activity] = pickedDayUpdatedActivityHourCount;\n      allDaysTimeBudget[pickedDay] = pickedDayDailyBudget;\n      this.setState({\n        dailyBudget: allDaysTimeBudget\n      }, () => this.addHourToActivity(activity)); //this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.deductHourToActivityPickedDay = activity => {\n      let pickedDay = this.state.pickedDay;\n      let allDaysTimeBudget = this.state.dailyBudget;\n      let pickedDayDailyBudget = { ...this.state.dailyBudget[pickedDay]\n      };\n      let pickedDayCurrentTotalHourCount = pickedDayDailyBudget.totalHours;\n      let pickedDayCurrentActivityHourCount = pickedDayDailyBudget[activity]; //const [[activity], totalHours] = {...this.state.activityWeekCategories}\n\n      let pickedDayUpdatedTotalHourCount = pickedDayCurrentTotalHourCount - 1;\n      let pickedDayUpdatedActivityHourCount = pickedDayCurrentActivityHourCount - 1;\n      pickedDayDailyBudget.totalHours = pickedDayUpdatedTotalHourCount;\n      pickedDayDailyBudget[activity] = pickedDayUpdatedActivityHourCount;\n      allDaysTimeBudget[pickedDay] = pickedDayDailyBudget;\n      this.setState({\n        dailyBudget: allDaysTimeBudget\n      }, () => this.deductHourToActivity(activity));\n    };\n\n    this.addHourToActivity = activity => {\n      let activityWeekCategories = { ...this.state.activityWeekCategories\n      };\n      let currentTotalHourCount = activityWeekCategories.totalHours;\n      let currentActivityHourCount = activityWeekCategories[activity]; //const [[activity], totalHours] = {...this.state.activityWeekCategories}\n\n      let updatedTotalHourCount = currentTotalHourCount + 1;\n      activityWeekCategories.totalHours = updatedTotalHourCount;\n      let updatedActivityHourCount = currentActivityHourCount + 1;\n      activityWeekCategories[activity] = updatedActivityHourCount;\n      this.setState({\n        activityWeekCategories: activityWeekCategories\n      }, () => this.context.dataReceiverHandler(this.state)); //this.deductHourToActivity(activity);\n      //this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.deductHourToActivity = activity => {\n      let activityWeekCategories = { ...this.state.activityWeekCategories\n      };\n      let currentTotalHourCount = activityWeekCategories.totalHours;\n      let currentActivityHourCount = activityWeekCategories[activity]; //const [[activity], totalHours] = {...this.state.activityWeekCategories}\n\n      let updatedTotalHourCount = currentTotalHourCount - 1;\n      activityWeekCategories.totalHours = updatedTotalHourCount;\n      let updatedActivityHourCount = currentActivityHourCount - 1;\n      activityWeekCategories[activity] = updatedActivityHourCount;\n      this.setState({\n        activityWeekCategories: activityWeekCategories\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n\n    this.hoursInWeek = 168;\n    this.hoursInDay = 24;\n    this.activityWeekCategories = {\n      sleep: 49,\n      exercise: 7,\n      work: 49,\n      free: 7,\n      errands: 14,\n      getReady: 28,\n      totalHours: 168\n    };\n    this.activityDayCategories = {\n      sleep: 7,\n      exercise: 1,\n      work: 9,\n      free: 1,\n      errands: 2,\n      getReady: 4,\n      totalHours: 24\n    };\n    this.daysOfWeek = {\n      Monday: {},\n      Tuesday: {},\n      Wednesday: {},\n      Thursday: {},\n      Friday: {},\n      Saturday: {},\n      Sunday: {}\n    };\n    this.dailyBudget = {};\n    this.firstTimeLoad = true; //create a seperate object that contains activityCategories\n\n    this.timeBudgetDay = () => {\n      //alert('inside Objective Data timeBudgetDay()');\n      Object.keys(this.daysOfWeek).map(day => {\n        //give each day the categories w/ hours\n        console.log(day);\n        let updatedDailyBudget = { ...this.dailyBudget,\n          [day]: this.activityDayCategories\n        };\n        return this.dailyBudget = updatedDailyBudget;\n      });\n    };\n  }\n\n  render() {\n    if (this.state.firstTimeData) {\n      this.initialRun(this.timeBudgetDay());\n    } // console.log(\n    //   `this.context.dataRequestDetails.handlerChoice: ${this.context.dataRequestDetails.handlerChoice}`\n    // );\n\n\n    let Week = { ...this.state.dailyBudget\n    };\n    let TuesdayObj = { ...Week.Tuesday\n    }; // console.dir(`this.state.dailyBudget.Tuesday.sleep: ${TuesdayObj.sleep}`);\n\n    if (!this.state.firstTimeData && this.context.dataRequestDetails.typeOfData === 'obj') {\n      //alert(this.context.dataRequestDetails.handlerChoice);\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          //show picked day timeBudget\n          // alert(\n          //   `inside case 1 this.context.dataRequestDetails.handlerChoice: ${this.context.dataRequestDetails.handlerChoice}`\n          // );\n          this.context.resetHandlerChoice(this.dataForDisplay());\n          break;\n\n        case '2':\n          //deduct\n          this.context.resetHandlerChoice(this.deductHourToActivity(this.context.dataRequestDetails.value));\n          break;\n\n        case '3':\n          //add\n          this.context.resetHandlerChoice(this.addHourToActivity(this.context.dataRequestDetails.value));\n          break;\n\n        case '4':\n          //show picked day timeBudget\n          console.log(`inside ObjData this.context.dataRequestDetails.value: ${this.context.dataRequestDetails.value}`);\n          this.context.resetHandlerChoice(this.pickedDayHandler(this.context.dataRequestDetails.value));\n          break;\n\n        case '5':\n          this.context.resetHandlerChoice(this.deductHourToActivityPickedDay(this.context.dataRequestDetails.value));\n          break;\n\n        case '6':\n          this.context.resetHandlerChoice(this.addHourToActivityPickedDay(this.context.dataRequestDetails.value));\n          break;\n      }\n    }\n\n    return null;\n  }\n\n}\n\nObjectiveData.contextType = StoreDataContext;\nexport default ObjectiveData;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/containers/Store/ObjectiveData.js"],"names":["React","Component","StoreDataContext","ObjectiveData","constructor","props","state","dataBaseName","firstTimeData","dailyBudget","activityWeekCategories","pickedDay","dataForDisplay","timeBudgetDay","setState","dataLocation","context","dataReceiverHandler","pickedDayHandler","initialRun","addHourToActivityPickedDay","activity","allDaysTimeBudget","pickedDayDailyBudget","pickedDayCurrentTotalHourCount","totalHours","pickedDayCurrentActivityHourCount","pickedDayUpdatedTotalHourCount","pickedDayUpdatedActivityHourCount","addHourToActivity","deductHourToActivityPickedDay","deductHourToActivity","currentTotalHourCount","currentActivityHourCount","updatedTotalHourCount","updatedActivityHourCount","hoursInWeek","hoursInDay","sleep","exercise","work","free","errands","getReady","activityDayCategories","daysOfWeek","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday","firstTimeLoad","Object","keys","map","day","console","log","updatedDailyBudget","render","Week","TuesdayObj","dataRequestDetails","typeOfData","handlerChoice","resetHandlerChoice","value","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport StoreDataContext from '../../context/StoreDataContext';\n\nclass ObjectiveData extends Component {\n  constructor(props) {\n    super(props);\n\n    this.hoursInWeek = 168;\n    this.hoursInDay = 24;\n    this.activityWeekCategories = {\n      sleep: 49,\n      exercise: 7,\n      work: 49,\n      free: 7,\n      errands: 14,\n      getReady: 28,\n      totalHours: 168\n    };\n\n    this.activityDayCategories = {\n      sleep: 7,\n      exercise: 1,\n      work: 9,\n      free: 1,\n      errands: 2,\n      getReady: 4,\n      totalHours: 24\n    };\n\n    this.daysOfWeek = {\n      Monday: {},\n      Tuesday: {},\n      Wednesday: {},\n      Thursday: {},\n      Friday: {},\n      Saturday: {},\n      Sunday: {}\n    };\n    this.dailyBudget = {};\n    this.firstTimeLoad = true;\n\n    //create a seperate object that contains activityCategories\n    this.timeBudgetDay = () => {\n      //alert('inside Objective Data timeBudgetDay()');\n      Object.keys(this.daysOfWeek).map(day => {\n        //give each day the categories w/ hours\n        console.log(day);\n        let updatedDailyBudget = {\n          ...this.dailyBudget,\n          [day]: this.activityDayCategories\n        };\n\n        return (this.dailyBudget = updatedDailyBudget);\n      });\n    };\n  }\n\n  state = {\n    dataBaseName: 'obj',\n    firstTimeData: true,\n    dailyBudget: null,\n    activityWeekCategories: null,\n    pickedDay: null\n  };\n  dataForDisplay = () => {\n    this.timeBudgetDay();\n    this.setState(\n      {\n        dataLocation: 'new',\n        dailyBudget: this.dailyBudget,\n        activityWeekCategories: this.activityWeekCategories,\n        firstTimeData: !this.state.firstTimeData\n      },\n\n      () => this.context.dataReceiverHandler(this.state)\n    );\n  };\n\n  pickedDayHandler = pickedDay => {\n    this.setState({ pickedDay: pickedDay }, () =>\n      this.context.dataReceiverHandler(this.state)\n    );\n  };\n  initialRun = () => {\n    this.setState(\n      {\n        dailyBudget: this.dailyBudget,\n        activityWeekCategories: this.activityWeekCategories,\n        firstTimeData: !this.state.firstTimeData\n      },\n      () => this.context.dataReceiverHandler(this.state)\n    );\n  };\n  addHourToActivityPickedDay = activity => {\n    let pickedDay = this.state.pickedDay;\n    let allDaysTimeBudget = this.state.dailyBudget;\n    let pickedDayDailyBudget = { ...this.state.dailyBudget[pickedDay] };\n\n    let pickedDayCurrentTotalHourCount = pickedDayDailyBudget.totalHours;\n    let pickedDayCurrentActivityHourCount = pickedDayDailyBudget[activity];\n\n    //const [[activity], totalHours] = {...this.state.activityWeekCategories}\n    let pickedDayUpdatedTotalHourCount = pickedDayCurrentTotalHourCount + 1;\n\n    let pickedDayUpdatedActivityHourCount =\n      pickedDayCurrentActivityHourCount + 1;\n    pickedDayDailyBudget.totalHours = pickedDayUpdatedTotalHourCount;\n    pickedDayDailyBudget[activity] = pickedDayUpdatedActivityHourCount;\n    allDaysTimeBudget[pickedDay] = pickedDayDailyBudget;\n\n    this.setState({ dailyBudget: allDaysTimeBudget }, () =>\n      this.addHourToActivity(activity)\n    );\n\n    //this.updatePurchaseState(updatedIngredients);\n  };\n\n  deductHourToActivityPickedDay = activity => {\n    let pickedDay = this.state.pickedDay;\n    let allDaysTimeBudget = this.state.dailyBudget;\n    let pickedDayDailyBudget = { ...this.state.dailyBudget[pickedDay] };\n\n    let pickedDayCurrentTotalHourCount = pickedDayDailyBudget.totalHours;\n    let pickedDayCurrentActivityHourCount = pickedDayDailyBudget[activity];\n\n    //const [[activity], totalHours] = {...this.state.activityWeekCategories}\n    let pickedDayUpdatedTotalHourCount = pickedDayCurrentTotalHourCount - 1;\n\n    let pickedDayUpdatedActivityHourCount =\n      pickedDayCurrentActivityHourCount - 1;\n    pickedDayDailyBudget.totalHours = pickedDayUpdatedTotalHourCount;\n    pickedDayDailyBudget[activity] = pickedDayUpdatedActivityHourCount;\n    allDaysTimeBudget[pickedDay] = pickedDayDailyBudget;\n\n    this.setState({ dailyBudget: allDaysTimeBudget }, () =>\n      this.deductHourToActivity(activity)\n    );\n  };\n  addHourToActivity = activity => {\n    let activityWeekCategories = { ...this.state.activityWeekCategories };\n    let currentTotalHourCount = activityWeekCategories.totalHours;\n    let currentActivityHourCount = activityWeekCategories[activity];\n\n    //const [[activity], totalHours] = {...this.state.activityWeekCategories}\n    let updatedTotalHourCount = currentTotalHourCount + 1;\n    activityWeekCategories.totalHours = updatedTotalHourCount;\n    let updatedActivityHourCount = currentActivityHourCount + 1;\n    activityWeekCategories[activity] = updatedActivityHourCount;\n\n    this.setState({ activityWeekCategories: activityWeekCategories }, () =>\n      this.context.dataReceiverHandler(this.state)\n    );\n    //this.deductHourToActivity(activity);\n    //this.updatePurchaseState(updatedIngredients);\n  };\n\n  deductHourToActivity = activity => {\n    let activityWeekCategories = { ...this.state.activityWeekCategories };\n    let currentTotalHourCount = activityWeekCategories.totalHours;\n    let currentActivityHourCount = activityWeekCategories[activity];\n\n    //const [[activity], totalHours] = {...this.state.activityWeekCategories}\n    let updatedTotalHourCount = currentTotalHourCount - 1;\n    activityWeekCategories.totalHours = updatedTotalHourCount;\n    let updatedActivityHourCount = currentActivityHourCount - 1;\n    activityWeekCategories[activity] = updatedActivityHourCount;\n\n    this.setState({ activityWeekCategories: activityWeekCategories }, () =>\n      this.context.dataReceiverHandler(this.state)\n    );\n  };\n\n  static contextType = StoreDataContext;\n  render() {\n    if (this.state.firstTimeData) {\n      this.initialRun(this.timeBudgetDay());\n    }\n    // console.log(\n    //   `this.context.dataRequestDetails.handlerChoice: ${this.context.dataRequestDetails.handlerChoice}`\n    // );\n    let Week = { ...this.state.dailyBudget };\n    let TuesdayObj = { ...Week.Tuesday };\n    // console.dir(`this.state.dailyBudget.Tuesday.sleep: ${TuesdayObj.sleep}`);\n\n    if (\n      !this.state.firstTimeData &&\n      this.context.dataRequestDetails.typeOfData === 'obj'\n    ) {\n      //alert(this.context.dataRequestDetails.handlerChoice);\n\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1': //show picked day timeBudget\n          // alert(\n          //   `inside case 1 this.context.dataRequestDetails.handlerChoice: ${this.context.dataRequestDetails.handlerChoice}`\n          // );\n          this.context.resetHandlerChoice(this.dataForDisplay());\n\n          break;\n        case '2': //deduct\n          this.context.resetHandlerChoice(\n            this.deductHourToActivity(this.context.dataRequestDetails.value)\n          );\n\n          break;\n        case '3': //add\n          this.context.resetHandlerChoice(\n            this.addHourToActivity(this.context.dataRequestDetails.value)\n          );\n          break;\n\n        case '4': //show picked day timeBudget\n          console.log(\n            `inside ObjData this.context.dataRequestDetails.value: ${this.context.dataRequestDetails.value}`\n          );\n          this.context.resetHandlerChoice(\n            this.pickedDayHandler(this.context.dataRequestDetails.value)\n          );\n\n          break;\n\n        case '5':\n          this.context.resetHandlerChoice(\n            this.deductHourToActivityPickedDay(\n              this.context.dataRequestDetails.value\n            )\n          );\n          break;\n        case '6':\n          this.context.resetHandlerChoice(\n            this.addHourToActivityPickedDay(\n              this.context.dataRequestDetails.value\n            )\n          );\n          break;\n      }\n    }\n    return null;\n  }\n}\n\nexport default ObjectiveData;\n"]},"metadata":{},"sourceType":"module"}