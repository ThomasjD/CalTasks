{"ast":null,"code":"import _objectSpread from \"/Users/thomasjd/Desktop/caltask/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/ViewContent/PickedDayTasks/PickedDayTasks.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport PickedDayTask from './PickedDayTask/PickedDayTask';\nimport student from '../../../containers/Student.css';\nimport TasksContext from '../../../context/tasksContext';\n\nconst PickedDayTasks = props => {\n  const tasksContext = useContext(TasksContext); //;\n\n  const taskDeleteHandler = (event, info) => {\n    let tasksData = _objectSpread({}, tasksContext.tasksData.tasksData);\n\n    let pickedDayTasksHeader = tasksData.pickedDayTasksHeader;\n\n    let timeOfDay = _objectSpread({}, pickedDayTasksHeader);\n\n    console.dir(`timeOfDay.timeOfDay: ${timeOfDay.timeOfDay}`);\n    let typeOfData = 'tasks'; //string: syllabus,tasks,events,objectives\n\n    let handlerChoice = '5'; //string: '#' handler inside of database\n\n    let dataLocation = tasksContext.tasksData.tasksData.dataLocation; // string: where obj found inside database\n\n    let infoType = 'index'; //string: index/id/\n    //let info = ''; //string: actual info\n    // let value = '';\n\n    let dataRequestMessage = {}; //let today = calendarObj();\n\n    switch (props.contentChoice) {\n      case '9':\n        typeOfData = 'tasks';\n        handlerChoice = '';\n        dataLocation = dataLocation;\n        infoType = 'index'; //info = null;\n\n        break;\n\n      case '5':\n        break;\n    }\n\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n    tasksContext.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  const taskChangeHandler = (event, info) => {\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n    let handlerChoice = ''; //string: '#' handler inside of database\n\n    let dataLocation = ''; // string: where obj found inside database\n\n    let infoType = ''; //string: index/id/\n\n    let dataRequestMessage = {};\n\n    switch (props.contentChoice) {\n      case '9':\n        typeOfData = 'tasks';\n        handlerChoice = '6';\n        dataLocation = tasksContext.tasksData.tasksData.dataLocation;\n        infoType = 'id'; //info = null;\n\n        break;\n\n      case '4':\n        break;\n\n      case '5':\n        break;\n    }\n\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n    alert(`inside [PickedDayTasks]  taskChangeHandler()\n    typeOfData: ${dataRequestMessage.typeOfData}\n    handlerChoice: ${dataRequestMessage.handlerChoice}\n    dataLocation: ${dataRequestMessage.dataLocation}\n    infoType?: ${dataRequestMessage.infoType}\n    info: ${dataRequestMessage.info}`);\n    tasksContext.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  const renderTableHeaderHandler = () => {\n    // let dataRequestMessage = {\n    //   typeOfData: 'tasks',\n    //   handlerChoice: '9',\n    //   dataLocation: 'Thursday',\n    //   infoType: 'pickedDayTasks',\n    //   info: ''\n    // };\n    // this.context.dataRequestHandler(event, dataRequestMessage);\n    // } else {\n    console.log(tasksData.pickedDayTasksHeader);\n\n    if (tasksData) {\n      let header = Object.keys(tasksData.pickedDayTasksHeader);\n      return header.map((key, index) => {\n        switch (key) {\n          case 'id':\n            return React.createElement(\"th\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 108\n              },\n              __self: this\n            }, \"Click\\xA0to\\xA0Delete\");\n            break;\n\n          case 'timeOfDay':\n            return React.createElement(\"th\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 112\n              },\n              __self: this\n            }, \"Schedule Task\");\n            break;\n\n          case 'task':\n            return React.createElement(\"th\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 116\n              },\n              __self: this\n            }, key.toUpperCase());\n            break;\n\n          case 'deadline':\n            return React.createElement(\"th\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 120\n              },\n              __self: this\n            }, key.toUpperCase());\n            break;\n\n          case 'category':\n            return React.createElement(\"th\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 124\n              },\n              __self: this\n            }, key.toUpperCase());\n            break;\n        }\n      });\n    }\n  }; //todayTaskChanged={props.changed}\n\n\n  const tasksOfSelectedDayHandler = () => {\n    //let dataLocation = tasksContext.dataRequestDetails.value;\n    //alert(`dataLocation: ${dataLocation}`);\n    if (tasksContext.tasksData.tasksData) {\n      let dataLocation = tasksContext.tasksData.tasksData.dataLocation; //alert(\n      //   `inside PickedDayTasks typeOf tasksContext.tasksData.tasksData[dataLocation]: ${typeof tasksContext\n      //     .tasksData.tasksData[dataLocation]}`\n      // );\n\n      console.dir(tasksContext.tasksData.tasksData); //alert(`Inside tasksOfSelectedDayHandler dataLocation: ${dataLocation}`); //\n\n      return tasksContext.tasksData.tasksData[dataLocation].map((day, index) => {\n        return React.createElement(React.Fragment, {\n          key: day.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, React.createElement(PickedDayTask, {\n          id: day.id,\n          timeOfDay: day.timeOfDay,\n          task: day.task,\n          deleteTodayTask: props.clicked,\n          deadline: day.deadline,\n          category: day.category,\n          click: event => taskDeleteHandler(event, index),\n          changed: event => taskChangeHandler(event, day.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }));\n      });\n    }\n  }; // const [lastTaskHeader, setLastTaskHeader] = useState({\n  //   lastHeader: props.monday\n  // });\n  // useEffect(() => {\n  //   let dataLocation = props.dataLocation\n  //   // console.log(`this is the state of alert ${onCallDelete.signalAlert}`);\n  //   // if (onCallDelete.signalAlert === 'true') {\n  //   if (\n  //     tasksContext.tasksData.tasksData == true &&\n  //     tasksContext.tasksData.tasksData[dataLocation].length === 1\n  //   ) {\n  //     //let savedHeader = Object.keys(props.tasks[0]);\n  //     //let savedHeader = props.tasks\n  //     console.log(props.monday);\n  //     setLastTaskHeader({ lastHeader: props.monday });\n  //     console.log(`this is the last task alert ${lastTaskHeader.lastHeader}`);\n  //   }\n  //   if (props.reRenderTodayTasks === true) {\n  //     // alert('Are you sure you want to delete this task?');\n  //     //return (props.reRender = {})\n  //   }\n  // });\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    id: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, \" Tasks for The Day\"), React.createElement(\"table\", {\n    id: \"students\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  })));\n};\n\nexport default PickedDayTasks;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/ViewContent/PickedDayTasks/PickedDayTasks.js"],"names":["React","useState","useEffect","useContext","PickedDayTask","student","TasksContext","PickedDayTasks","props","tasksContext","taskDeleteHandler","event","info","tasksData","pickedDayTasksHeader","timeOfDay","console","dir","typeOfData","handlerChoice","dataLocation","infoType","dataRequestMessage","contentChoice","dataRequestHandler","taskChangeHandler","alert","renderTableHeaderHandler","log","header","Object","keys","map","key","index","toUpperCase","tasksOfSelectedDayHandler","day","id","task","clicked","deadline","category"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;;AAEA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B,QAAMC,YAAY,GAAGN,UAAU,CAACG,YAAD,CAA/B,CAD8B,CAG9B;;AAEA,QAAMI,iBAAiB,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACzC,QAAIC,SAAS,qBAAQJ,YAAY,CAACI,SAAb,CAAuBA,SAA/B,CAAb;;AACA,QAAIC,oBAAoB,GAAGD,SAAS,CAACC,oBAArC;;AACA,QAAIC,SAAS,qBAAQD,oBAAR,CAAb;;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAa,wBAAuBF,SAAS,CAACA,SAAU,EAAxD;AACA,QAAIG,UAAU,GAAG,OAAjB,CALyC,CAKf;;AAC1B,QAAIC,aAAa,GAAG,GAApB,CANyC,CAMhB;;AACzB,QAAIC,YAAY,GAAGX,YAAY,CAACI,SAAb,CAAuBA,SAAvB,CAAiCO,YAApD,CAPyC,CAQzC;;AACA,QAAIC,QAAQ,GAAG,OAAf,CATyC,CASjB;AACxB;AAEA;;AACA,QAAIC,kBAAkB,GAAG,EAAzB,CAbyC,CAczC;;AAEA,YAAQd,KAAK,CAACe,aAAd;AACE,WAAK,GAAL;AACEL,QAAAA,UAAU,GAAG,OAAb;AACAC,QAAAA,aAAa,GAAG,EAAhB;AACAC,QAAAA,YAAY,GAAGA,YAAf;AACAC,QAAAA,QAAQ,GAAG,OAAX,CAJF,CAKE;;AAEA;;AACF,WAAK,GAAL;AACE;AAVJ;;AAaAC,IAAAA,kBAAkB,GAAG;AACnBJ,MAAAA,UAAU,EAAEA,UADO;AAEnBC,MAAAA,aAAa,EAAEA,aAFI;AAGnBC,MAAAA,YAAY,EAAEA,YAHK;AAInBC,MAAAA,QAAQ,EAAEA,QAJS;AAKnBT,MAAAA,IAAI,EAAEA;AALa,KAArB;AAQAH,IAAAA,YAAY,CAACe,kBAAb,CAAgCb,KAAhC,EAAuCW,kBAAvC;AACD,GAtCD;;AAwCA,QAAMG,iBAAiB,GAAG,CAACd,KAAD,EAAQC,IAAR,KAAiB;AACzC,QAAIM,UAAU,GAAG,EAAjB,CADyC,CACpB;;AACrB,QAAIC,aAAa,GAAG,EAApB,CAFyC,CAEjB;;AACxB,QAAIC,YAAY,GAAG,EAAnB,CAHyC,CAGlB;;AACvB,QAAIC,QAAQ,GAAG,EAAf,CAJyC,CAItB;;AAEnB,QAAIC,kBAAkB,GAAG,EAAzB;;AACA,YAAQd,KAAK,CAACe,aAAd;AACE,WAAK,GAAL;AACEL,QAAAA,UAAU,GAAG,OAAb;AACAC,QAAAA,aAAa,GAAG,GAAhB;AAEAC,QAAAA,YAAY,GAAGX,YAAY,CAACI,SAAb,CAAuBA,SAAvB,CAAiCO,YAAhD;AACAC,QAAAA,QAAQ,GAAG,IAAX,CALF,CAME;;AACA;;AACF,WAAK,GAAL;AACE;;AACF,WAAK,GAAL;AACE;AAZJ;;AAcAC,IAAAA,kBAAkB,GAAG;AACnBJ,MAAAA,UAAU,EAAEA,UADO;AAEnBC,MAAAA,aAAa,EAAEA,aAFI;AAGnBC,MAAAA,YAAY,EAAEA,YAHK;AAInBC,MAAAA,QAAQ,EAAEA,QAJS;AAKnBT,MAAAA,IAAI,EAAEA;AALa,KAArB;AAOAc,IAAAA,KAAK,CAAE;kBACOJ,kBAAkB,CAACJ,UAAW;qBAC3BI,kBAAkB,CAACH,aAAc;oBAClCG,kBAAkB,CAACF,YAAa;iBACnCE,kBAAkB,CAACD,QAAS;YACjCC,kBAAkB,CAACV,IAAK,EAL3B,CAAL;AAOAH,IAAAA,YAAY,CAACe,kBAAb,CAAgCb,KAAhC,EAAuCW,kBAAvC;AACD,GApCD;;AAsCA,QAAMK,wBAAwB,GAAG,MAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEAX,IAAAA,OAAO,CAACY,GAAR,CAAYf,SAAS,CAACC,oBAAtB;;AACA,QAAID,SAAJ,EAAe;AACb,UAAIgB,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYlB,SAAS,CAACC,oBAAtB,CAAb;AAEA,aAAOe,MAAM,CAACG,GAAP,CAAW,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAChC,gBAAQD,GAAR;AACE,eAAK,IAAL;AACE,mBAAO;AAAI,cAAA,GAAG,EAAEC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAP;AACA;;AAEF,eAAK,WAAL;AACE,mBAAO;AAAI,cAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACA;;AAEF,eAAK,MAAL;AACE,mBAAO;AAAI,cAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAiBD,GAAG,CAACE,WAAJ,EAAjB,CAAP;AACA;;AAEF,eAAK,UAAL;AACE,mBAAO;AAAI,cAAA,GAAG,EAAED,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAiBD,GAAG,CAACE,WAAJ,EAAjB,CAAP;AACA;;AAEF,eAAK,UAAL;AACE,mBAAO;AAAI,cAAA,GAAG,EAAED,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAiBD,GAAG,CAACE,WAAJ,EAAjB,CAAP;AACA;AAnBJ;AAqBD,OAtBM,CAAP;AAuBD;AACF,GAxCD,CAnF8B,CA6H9B;;;AACA,QAAMC,yBAAyB,GAAG,MAAM;AACtC;AACA;AACA,QAAI3B,YAAY,CAACI,SAAb,CAAuBA,SAA3B,EAAsC;AACpC,UAAIO,YAAY,GAAGX,YAAY,CAACI,SAAb,CAAuBA,SAAvB,CAAiCO,YAApD,CADoC,CAEpC;AACA;AACA;AACA;;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYR,YAAY,CAACI,SAAb,CAAuBA,SAAnC,EANoC,CAOpC;;AACA,aAAOJ,YAAY,CAACI,SAAb,CAAuBA,SAAvB,CAAiCO,YAAjC,EAA+CY,GAA/C,CACL,CAACK,GAAD,EAAMH,KAAN,KAAgB;AACd,eACE,oBAAC,KAAD,CAAO,QAAP;AAAgB,UAAA,GAAG,EAAEG,GAAG,CAACC,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,aAAD;AACE,UAAA,EAAE,EAAED,GAAG,CAACC,EADV;AAEE,UAAA,SAAS,EAAED,GAAG,CAACtB,SAFjB;AAGE,UAAA,IAAI,EAAEsB,GAAG,CAACE,IAHZ;AAIE,UAAA,eAAe,EAAE/B,KAAK,CAACgC,OAJzB;AAKE,UAAA,QAAQ,EAAEH,GAAG,CAACI,QALhB;AAME,UAAA,QAAQ,EAAEJ,GAAG,CAACK,QANhB;AAOE,UAAA,KAAK,EAAE/B,KAAK,IAAID,iBAAiB,CAACC,KAAD,EAAQuB,KAAR,CAPnC;AAQE,UAAA,OAAO,EAAEvB,KAAK,IAAIc,iBAAiB,CAACd,KAAD,EAAQ0B,GAAG,CAACC,EAAZ,CARrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAcD,OAhBI,CAAP;AAkBD;AACF,GA9BD,CA9H8B,CA8J9B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEE;AAAO,IAAA,EAAE,EAAC,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF;AAWD,CAlMD;;AAoMA,eAAe/B,cAAf","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport PickedDayTask from './PickedDayTask/PickedDayTask';\nimport student from '../../../containers/Student.css';\nimport TasksContext from '../../../context/tasksContext';\n\nconst PickedDayTasks = props => {\n  const tasksContext = useContext(TasksContext);\n\n  //;\n\n  const taskDeleteHandler = (event, info) => {\n    let tasksData = { ...tasksContext.tasksData.tasksData };\n    let pickedDayTasksHeader = tasksData.pickedDayTasksHeader;\n    let timeOfDay = { ...pickedDayTasksHeader };\n    console.dir(`timeOfDay.timeOfDay: ${timeOfDay.timeOfDay}`);\n    let typeOfData = 'tasks'; //string: syllabus,tasks,events,objectives\n    let handlerChoice = '5'; //string: '#' handler inside of database\n    let dataLocation = tasksContext.tasksData.tasksData.dataLocation;\n    // string: where obj found inside database\n    let infoType = 'index'; //string: index/id/\n    //let info = ''; //string: actual info\n\n    // let value = '';\n    let dataRequestMessage = {};\n    //let today = calendarObj();\n\n    switch (props.contentChoice) {\n      case '9':\n        typeOfData = 'tasks';\n        handlerChoice = '';\n        dataLocation = dataLocation;\n        infoType = 'index';\n        //info = null;\n\n        break;\n      case '5':\n        break;\n    }\n\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    tasksContext.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  const taskChangeHandler = (event, info) => {\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n\n    let dataRequestMessage = {};\n    switch (props.contentChoice) {\n      case '9':\n        typeOfData = 'tasks';\n        handlerChoice = '6';\n\n        dataLocation = tasksContext.tasksData.tasksData.dataLocation;\n        infoType = 'id';\n        //info = null;\n        break;\n      case '4':\n        break;\n      case '5':\n        break;\n    }\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n    alert(`inside [PickedDayTasks]  taskChangeHandler()\n    typeOfData: ${dataRequestMessage.typeOfData}\n    handlerChoice: ${dataRequestMessage.handlerChoice}\n    dataLocation: ${dataRequestMessage.dataLocation}\n    infoType?: ${dataRequestMessage.infoType}\n    info: ${dataRequestMessage.info}`);\n\n    tasksContext.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  const renderTableHeaderHandler = () => {\n    // let dataRequestMessage = {\n    //   typeOfData: 'tasks',\n    //   handlerChoice: '9',\n    //   dataLocation: 'Thursday',\n    //   infoType: 'pickedDayTasks',\n    //   info: ''\n    // };\n\n    // this.context.dataRequestHandler(event, dataRequestMessage);\n    // } else {\n\n    console.log(tasksData.pickedDayTasksHeader);\n    if (tasksData) {\n      let header = Object.keys(tasksData.pickedDayTasksHeader);\n\n      return header.map((key, index) => {\n        switch (key) {\n          case 'id':\n            return <th key={index}>Click to Delete</th>;\n            break;\n\n          case 'timeOfDay':\n            return <th key={index}>Schedule Task</th>;\n            break;\n\n          case 'task':\n            return <th key={index}>{key.toUpperCase()}</th>;\n            break;\n\n          case 'deadline':\n            return <th key={index}>{key.toUpperCase()}</th>;\n            break;\n\n          case 'category':\n            return <th key={index}>{key.toUpperCase()}</th>;\n            break;\n        }\n      });\n    }\n  };\n\n  //todayTaskChanged={props.changed}\n  const tasksOfSelectedDayHandler = () => {\n    //let dataLocation = tasksContext.dataRequestDetails.value;\n    //alert(`dataLocation: ${dataLocation}`);\n    if (tasksContext.tasksData.tasksData) {\n      let dataLocation = tasksContext.tasksData.tasksData.dataLocation;\n      //alert(\n      //   `inside PickedDayTasks typeOf tasksContext.tasksData.tasksData[dataLocation]: ${typeof tasksContext\n      //     .tasksData.tasksData[dataLocation]}`\n      // );\n      console.dir(tasksContext.tasksData.tasksData);\n      //alert(`Inside tasksOfSelectedDayHandler dataLocation: ${dataLocation}`); //\n      return tasksContext.tasksData.tasksData[dataLocation].map(\n        (day, index) => {\n          return (\n            <React.Fragment key={day.id}>\n              <PickedDayTask\n                id={day.id}\n                timeOfDay={day.timeOfDay}\n                task={day.task}\n                deleteTodayTask={props.clicked}\n                deadline={day.deadline}\n                category={day.category}\n                click={event => taskDeleteHandler(event, index)}\n                changed={event => taskChangeHandler(event, day.id)}\n              />\n            </React.Fragment>\n          );\n        }\n      );\n    }\n  };\n\n  // const [lastTaskHeader, setLastTaskHeader] = useState({\n  //   lastHeader: props.monday\n  // });\n  // useEffect(() => {\n  //   let dataLocation = props.dataLocation\n  //   // console.log(`this is the state of alert ${onCallDelete.signalAlert}`);\n  //   // if (onCallDelete.signalAlert === 'true') {\n\n  //   if (\n  //     tasksContext.tasksData.tasksData == true &&\n  //     tasksContext.tasksData.tasksData[dataLocation].length === 1\n  //   ) {\n  //     //let savedHeader = Object.keys(props.tasks[0]);\n  //     //let savedHeader = props.tasks\n  //     console.log(props.monday);\n  //     setLastTaskHeader({ lastHeader: props.monday });\n\n  //     console.log(`this is the last task alert ${lastTaskHeader.lastHeader}`);\n  //   }\n  //   if (props.reRenderTodayTasks === true) {\n  //     // alert('Are you sure you want to delete this task?');\n  //     //return (props.reRender = {})\n  //   }\n  // });\n\n  return (\n    <div>\n      <h1 id=\"title\"> Tasks for The Day</h1>\n      <table id=\"students\">\n        <tbody>\n          {/* <tr>{renderTableHeaderHandler()}</tr>\n          {tasksOfSelectedDayHandler()} */}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default PickedDayTasks;\n"]},"metadata":{},"sourceType":"module"}