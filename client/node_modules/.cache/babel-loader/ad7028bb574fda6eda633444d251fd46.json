{"ast":null,"code":"import _objectSpread from \"/Users/thomasjd/Desktop/caltask/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/thomasjd/Desktop/caltask/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/Creation/newTask.js\";\nimport React, { useRef, useEffect, useState, useContext } from 'react'; //import useForm from 'react-hook-form';\n\nimport { tsPropertySignature } from '@babel/types';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport StoreContext from '../../context/StoreDataContext';\nimport axios from 'axios';\n\nconst NewTask = props => {\n  const storeContext = useContext(StoreContext);\n  const taskTitleRef = useRef(null);\n  useEffect(() => {\n    //runs after initial render & last render\n    taskTitleRef.current.focus();\n  }, []); //only executes when component renders 1st time & cleans up when unmounted\n\n  const _useState = useState({\n    // task: {\n    id: 'klgdshljkhgkjsdg',\n    timeOfDay: '9:00',\n    task: 'Watch show',\n    deadline: 'Thursday',\n    category: 'watch show',\n    startTimeDate: '',\n    finishTimeDate: '',\n    // assignedDate: '',\n    // taskDuration: '',\n    blockOffTimeSlot: false,\n    showStartTimeDate: false,\n    showFinishTimeDate: false //}\n    // task: {\n    //   id: '',\n    //   timeOfDay: '',\n    //   task: '',\n    //   deadline: '',\n    //   category: '',\n    //   startTimeDate: '',\n    //   finishTimeDate: '',\n    //   // assignedDate: '',\n    //   // taskDuration: '',\n    //   blockOffTimeSlot: false,\n    //   showStartTimeDate: false,\n    //   showFinishTimeDate: false\n    // }\n\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        newTask = _useState2[0],\n        setNewTask = _useState2[1];\n\n  const _useState3 = useState({\n    dateString: '',\n    day: '',\n    date: '',\n    month: '',\n    year: '',\n    timeString: '',\n    hour: '',\n    minute: '',\n    showStartTimeDate: false\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        startTimeDate = _useState4[0],\n        setStartTimeDate = _useState4[1];\n\n  const _useState5 = useState({\n    dateString: '',\n    day: '',\n    date: '',\n    month: '',\n    year: '',\n    timeString: '',\n    hour: '',\n    minute: '',\n    showFinishTimeDate: false\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        finishTimeDate = _useState6[0],\n        setFinishTimeDate = _useState6[1]; // const [newTask, setNewTask] = useState({\n  //   task: {\n  //     id: '',\n  //     todo: '',\n  //     deadline: '',\n  //     category: '',\n  //     startTimeDate: '',\n  //     finishTimeDate: null\n  //   }\n  //   // showFinishTimeDate: false\n  // });\n\n\n  const change = e => {\n    let name = e.target.name;\n    let newValue = e.target.value; //array of keys [a,b,c,d] --> for every key return {key: value}\n\n    let objListArray = Object.keys(newTask.task).map(iKey => {\n      //return an array of objects [{key: value},{key: value},{key: value}]\n      if (iKey == name) {\n        return {\n          [iKey]: newValue\n        };\n      } else {\n        return {\n          [iKey]: newTask.task[iKey]\n        };\n      }\n    });\n    setNewTask({\n      task: Object.assign(...objListArray)\n    });\n    console.log(newTask); //let currentTask = newTask.name\n    //array = [id, todo, deadline, category]\n    //let currentTask = { ...newTask };\n    //Objects.key(newTask.task).map(infoKey => {});\n    //map out all keys [key1,key2,key3] = keyarray\n    //if a key  match matches the name of event.target then find index\n    //make new object\n\n    /*map(keyarry) => key {\n          if (key = name) {\n            key: e.target.value\n          }else\n          {key: newTask.key}\n         }\n          */\n    // setNewTask({\n    //   [e.target.name]: e.target.value\n    // });\n  };\n\n  const newTaskHandler = (event, info) => {\n    //let contentchoice = event.target.value;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n    let handlerChoice = ''; //string: '#' handler inside of database\n\n    let dataLocation = ''; // string: where obj found inside database\n\n    let infoType = ''; //string: index/id/\n    //let info = ''; //string: actual info\n    // let value = '';\n\n    let dataRequestMessage = {}; //alert(`dataRequestMessage: ${dataRequestMessage}`);\n\n    switch (this.context.contentChoice) {\n      case '5':\n        typeOfData = 'events';\n        handlerChoice = '1';\n        dataLocation = '';\n        infoType = 'id'; //info = '';\n\n        break;\n\n      case '4':\n        break;\n\n      case '5':\n        break;\n\n      case '6':\n        break;\n    }\n\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n    this.context.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  const onSubmit = event => {\n    event.preventDefault(); // alert(storeContext.contentChoice);\n\n    let dataRequestMessage = {};\n\n    let newTaskObj = _objectSpread({}, newTask.startDateTime);\n\n    console.log(newTask);\n    dataRequestMessage = {\n      typeOfData: 'tasks',\n      handlerChoice: '11',\n      dataLocation: '',\n      infoType: 'newTask',\n      info: newTask\n    };\n    let word = {\n      one: 'mot',\n      two: 'hai'\n    };\n    storeContext.dataRequestHandler(event, dataRequestMessage); // console.log('before contViewHandler');\n\n    axios.post('https://caltask-f1e28.firebaseio.com/newtask.json', word).catch(error => console.log(error));\n    resetState();\n  };\n\n  const resetState = () => {\n    setNewTask({\n      id: '',\n      timeOfDay: '',\n      task: '',\n      deadline: '',\n      category: '',\n      startTimeDate: '',\n      finishTimeDate: '',\n      // assignedDate: '',\n      // taskDuration: '',\n      blockOffTimeSlot: false,\n      showStartTimeDate: false,\n      showFinishTimeDate: false\n    });\n    let contentChoiceObj = {\n      target: {\n        value: '0'\n      }\n    };\n    storeContext.contentViewHandler(contentChoiceObj);\n  };\n\n  const startDateTimeHandler = date => {\n    // console.log('inside startDateTimeHandler');\n    setStartTimeDate({\n      dateObjectString: date.dateObjectString,\n      dateString: date.dateString,\n      day: date.day,\n      date: date.date,\n      month: date.month,\n      year: date.year,\n      timeString: date.time,\n      hour: date.hour,\n      minute: date.minute,\n      showStartTimeDate: true\n    });\n    setNewTask({\n      id: newTask.id,\n      task: newTask.task,\n      deadline: newTask.deadline,\n      category: newTask.category,\n      startTimeDate: startTimeDate,\n      finishTimeDate: finishTimeDate,\n      blockOffTimeSlot: newTask.blockOffTimeSlot,\n      showStartTimeDate: newTask.showStartTimeDate,\n      showFinishTimeDate: newTask.showFinishTimeDate\n    }); // this.setState({\n    //   startTimeDate: eventStartTimeDate,\n    //   showFinishTimeDate: true\n    // });\n\n    console.log(startTimeDate);\n  };\n\n  const finishTimeDateHandler = date => {\n    setFinishTimeDate({\n      dateObjectString: date.dateObjectString,\n      dateString: date.dateString,\n      day: date.day,\n      date: date.date,\n      month: date.month,\n      year: date.year,\n      timeString: date.time,\n      hour: date.hour,\n      minute: date.minute\n    }); // let currentShowFinishTimeDate = this.state.showFinishTimeDate\n    // showFinishTimeDate: !currentShowFinishTimeDate\n    // this.setState({ finishTimeDate: eventFinishTimeDate });\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: event => onSubmit(event),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, \"Task\"), React.createElement(\"textarea\", {\n    className: \"form-control form-control-sm\",\n    name: \"task\",\n    type: \"text\",\n    ref: taskTitleRef //will focus when loading & rendering\n    ,\n    placeholder: \"Enter new task.\",\n    onChange: e => change(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }, \"Note\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"eventNote\",\n    className: \"form-control\",\n    defaultValue: \"Watch on Chanel 13\" //value={this.state.eventNote}\n    ,\n    onChange: e => this.eventNoteChange(e) //ref={eventNoteRef => eventNoteRef.focus()}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }, \"Task Category\"), React.createElement(\"select\", {\n    name: \"category\",\n    className: \"form-control\",\n    onChange: e => change(e),\n    id: \"category\",\n    defaultValue: \"programing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"programing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }, \"programing\"), React.createElement(\"option\", {\n    value: \"workout\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303\n    },\n    __self: this\n  }, \"workout\"), React.createElement(\"option\", {\n    value: \"errand\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, \"errand\"), React.createElement(\"option\", {\n    value: \"errand\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305\n    },\n    __self: this\n  }, \"chore\"), React.createElement(\"option\", {\n    value: \"errand\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306\n    },\n    __self: this\n  }, \"errand\"))), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311\n    },\n    __self: this\n  }, \"Start Time\"), React.createElement(DatePickerPicker, {\n    startDateTimeHandler: date => startDateTimeHandler(date),\n    finishTimeDateHandler: date => finishTimeDateHandler(date),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  }, \"Deadline\"), React.createElement(\"textarea\", {\n    onChange: e => change(e),\n    className: \"form-control\",\n    id: \"deadline\",\n    rows: \"3\",\n    name: \"deadline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330\n    },\n    __self: this\n  }, ' ', \"Submit\"))));\n};\n\nexport default NewTask;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/Creation/newTask.js"],"names":["React","useRef","useEffect","useState","useContext","tsPropertySignature","DatePickerPicker","StoreContext","axios","NewTask","props","storeContext","taskTitleRef","current","focus","id","timeOfDay","task","deadline","category","startTimeDate","finishTimeDate","blockOffTimeSlot","showStartTimeDate","showFinishTimeDate","newTask","setNewTask","dateString","day","date","month","year","timeString","hour","minute","setStartTimeDate","setFinishTimeDate","change","e","name","target","newValue","value","objListArray","Object","keys","map","iKey","assign","console","log","newTaskHandler","event","info","typeOfData","handlerChoice","dataLocation","infoType","dataRequestMessage","context","contentChoice","dataRequestHandler","onSubmit","preventDefault","newTaskObj","startDateTime","word","one","two","post","catch","error","resetState","contentChoiceObj","contentViewHandler","startDateTimeHandler","dateObjectString","time","finishTimeDateHandler","eventNoteChange"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState, useContext } from 'react';\n//import useForm from 'react-hook-form';\nimport { tsPropertySignature } from '@babel/types';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport StoreContext from '../../context/StoreDataContext';\nimport axios from 'axios';\n\nconst NewTask = props => {\n  const storeContext = useContext(StoreContext);\n  const taskTitleRef = useRef(null);\n  useEffect(() => {\n    //runs after initial render & last render\n\n    taskTitleRef.current.focus();\n  }, []); //only executes when component renders 1st time & cleans up when unmounted\n  const [newTask, setNewTask] = useState({\n    // task: {\n    id: 'klgdshljkhgkjsdg',\n    timeOfDay: '9:00',\n    task: 'Watch show',\n    deadline: 'Thursday',\n    category: 'watch show',\n    startTimeDate: '',\n    finishTimeDate: '',\n    // assignedDate: '',\n    // taskDuration: '',\n    blockOffTimeSlot: false,\n    showStartTimeDate: false,\n    showFinishTimeDate: false\n    //}\n\n    // task: {\n    //   id: '',\n    //   timeOfDay: '',\n    //   task: '',\n    //   deadline: '',\n    //   category: '',\n    //   startTimeDate: '',\n    //   finishTimeDate: '',\n    //   // assignedDate: '',\n    //   // taskDuration: '',\n    //   blockOffTimeSlot: false,\n    //   showStartTimeDate: false,\n    //   showFinishTimeDate: false\n    // }\n  });\n\n  const [startTimeDate, setStartTimeDate] = useState({\n    dateString: '',\n    day: '',\n    date: '',\n    month: '',\n    year: '',\n    timeString: '',\n    hour: '',\n    minute: '',\n    showStartTimeDate: false\n  });\n  const [finishTimeDate, setFinishTimeDate] = useState({\n    dateString: '',\n    day: '',\n    date: '',\n    month: '',\n    year: '',\n    timeString: '',\n    hour: '',\n    minute: '',\n    showFinishTimeDate: false\n  });\n\n  // const [newTask, setNewTask] = useState({\n  //   task: {\n  //     id: '',\n  //     todo: '',\n  //     deadline: '',\n  //     category: '',\n  //     startTimeDate: '',\n  //     finishTimeDate: null\n  //   }\n  //   // showFinishTimeDate: false\n  // });\n\n  const change = e => {\n    let name = e.target.name;\n\n    let newValue = e.target.value;\n    //array of keys [a,b,c,d] --> for every key return {key: value}\n    let objListArray = Object.keys(newTask.task).map(iKey => {\n      //return an array of objects [{key: value},{key: value},{key: value}]\n      if (iKey == name) {\n        return { [iKey]: newValue };\n      } else {\n        return { [iKey]: newTask.task[iKey] };\n      }\n    });\n\n    setNewTask({\n      task: Object.assign(...objListArray)\n    });\n    console.log(newTask);\n    //let currentTask = newTask.name\n\n    //array = [id, todo, deadline, category]\n    //let currentTask = { ...newTask };\n    //Objects.key(newTask.task).map(infoKey => {});\n\n    //map out all keys [key1,key2,key3] = keyarray\n    //if a key  match matches the name of event.target then find index\n    //make new object\n    /*map(keyarry) => key {\n          if (key = name) {\n            key: e.target.value\n          }else\n          {key: newTask.key}\n\n        }\n\n\n        */\n\n    // setNewTask({\n    //   [e.target.name]: e.target.value\n    // });\n  };\n\n  const newTaskHandler = (event, info) => {\n    //let contentchoice = event.target.value;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    //let info = ''; //string: actual info\n\n    // let value = '';\n    let dataRequestMessage = {};\n    //alert(`dataRequestMessage: ${dataRequestMessage}`);\n    switch (this.context.contentChoice) {\n      case '5':\n        typeOfData = 'events';\n        handlerChoice = '1';\n        dataLocation = '';\n        infoType = 'id';\n        //info = '';\n        break;\n      case '4':\n        break;\n      case '5':\n        break;\n      case '6':\n        break;\n    }\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    this.context.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  const onSubmit = event => {\n    event.preventDefault();\n    // alert(storeContext.contentChoice);\n\n    let dataRequestMessage = {};\n    let newTaskObj = { ...newTask.startDateTime };\n    console.log(newTask);\n\n    dataRequestMessage = {\n      typeOfData: 'tasks',\n      handlerChoice: '11',\n      dataLocation: '',\n      infoType: 'newTask',\n      info: newTask\n    };\n    let word = {\n      one: 'mot',\n      two: 'hai'\n    };\n\n    storeContext.dataRequestHandler(event, dataRequestMessage);\n    // console.log('before contViewHandler');\n    axios\n      .post('https://caltask-f1e28.firebaseio.com/newtask.json', word)\n      .catch(error => console.log(error));\n    resetState();\n  };\n  const resetState = () => {\n    setNewTask({\n      id: '',\n      timeOfDay: '',\n      task: '',\n      deadline: '',\n      category: '',\n      startTimeDate: '',\n      finishTimeDate: '',\n      // assignedDate: '',\n      // taskDuration: '',\n      blockOffTimeSlot: false,\n      showStartTimeDate: false,\n      showFinishTimeDate: false\n    });\n    let contentChoiceObj = {\n      target: {\n        value: '0'\n      }\n    };\n\n    storeContext.contentViewHandler(contentChoiceObj);\n  };\n  const startDateTimeHandler = date => {\n    // console.log('inside startDateTimeHandler');\n    setStartTimeDate({\n      dateObjectString: date.dateObjectString,\n      dateString: date.dateString,\n      day: date.day,\n      date: date.date,\n      month: date.month,\n      year: date.year,\n      timeString: date.time,\n      hour: date.hour,\n      minute: date.minute,\n      showStartTimeDate: true\n    });\n\n    setNewTask({\n      id: newTask.id,\n      task: newTask.task,\n      deadline: newTask.deadline,\n      category: newTask.category,\n      startTimeDate: startTimeDate,\n      finishTimeDate: finishTimeDate,\n      blockOffTimeSlot: newTask.blockOffTimeSlot,\n      showStartTimeDate: newTask.showStartTimeDate,\n      showFinishTimeDate: newTask.showFinishTimeDate\n    });\n    // this.setState({\n    //   startTimeDate: eventStartTimeDate,\n    //   showFinishTimeDate: true\n    // });\n    console.log(startTimeDate);\n  };\n\n  const finishTimeDateHandler = date => {\n    setFinishTimeDate({\n      dateObjectString: date.dateObjectString,\n      dateString: date.dateString,\n      day: date.day,\n      date: date.date,\n      month: date.month,\n      year: date.year,\n      timeString: date.time,\n      hour: date.hour,\n      minute: date.minute\n    });\n\n    // let currentShowFinishTimeDate = this.state.showFinishTimeDate\n    // showFinishTimeDate: !currentShowFinishTimeDate\n    // this.setState({ finishTimeDate: eventFinishTimeDate });\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <form onSubmit={event => onSubmit(event)}>\n          <div className=\"form-group\">\n            <label>Task</label>\n            <textarea\n              className=\"form-control form-control-sm\"\n              name=\"task\"\n              type=\"text\"\n              ref={taskTitleRef} //will focus when loading & rendering\n              placeholder=\"Enter new task.\"\n              onChange={e => change(e)}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Note</label>\n            <input\n              type=\"text\"\n              name=\"eventNote\"\n              className=\"form-control\"\n              defaultValue=\"Watch on Chanel 13\"\n              //value={this.state.eventNote}\n              onChange={e => this.eventNoteChange(e)}\n              //ref={eventNoteRef => eventNoteRef.focus()}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Task Category</label>\n            <select\n              name=\"category\"\n              className=\"form-control\"\n              onChange={e => change(e)}\n              id=\"category\"\n              defaultValue=\"programing\"\n            >\n              <option value=\"programing\">programing</option>\n              <option value=\"workout\">workout</option>\n              <option value=\"errand\">errand</option>\n              <option value=\"errand\">chore</option>\n              <option value=\"errand\">errand</option>\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            <label>Start Time</label>\n\n            <DatePickerPicker\n              startDateTimeHandler={date => startDateTimeHandler(date)}\n              finishTimeDateHandler={date => finishTimeDateHandler(date)}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Deadline</label>\n            <textarea\n              onChange={e => change(e)}\n              className=\"form-control\"\n              id=\"deadline\"\n              rows=\"3\"\n              name=\"deadline\"\n            ></textarea>\n          </div>\n\n          <button type=\"submit\" value=\"Submit\">\n            {' '}\n            Submit\n          </button>\n        </form>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default NewTask;\n"]},"metadata":{},"sourceType":"module"}