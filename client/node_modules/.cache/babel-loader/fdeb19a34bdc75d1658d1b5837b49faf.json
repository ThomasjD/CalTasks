{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport rocky from './App.module.css';\nimport Tasks from '../components/Tasks/Tasks'; //import Task from '../components/Tasks/Task/Task'\n\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport Cockpit2 from '../components/Cockpit/Cockpit2';\nimport Navbar2 from '../components/Cockpit/Navbar/Navbar2';\nimport '../components/Tasks/Task/Task';\nimport TodayTasks from '../components/TodayTasks/TodayTasks'; //import MaxReact from '../components/Syllabus/MaxReact'\n\nimport WithClass from '../hoc/WithClass';\nimport NewTaskContext from '../context/newTask-context'; //import DataStructure from './DataStructure';\n//import Student from './Student.css';\n//import StudentTable from './StudentTable'\n// import StudentTable from './StudentTable';\n//import Navbar from '../components/Cockpit/navBar';\n//import Syllabus from '../components/Syllabus/Syllabus';\n//import for bootstraps\n// import axios from 'axios';\n// import { Container, Row, Col } from 'reactstrap';\n// import Post from '../components/Post';\n// import Header from '../components/Header';\n// import SideCard from '../components/SideCard';\n\nclass App extends Component {\n  constructor(props) {\n    // const bigDaddy = {...this.DataStructure}\n    // console.log(bigDaddy.state.ShowView)\n    super(props);\n    this.state = {\n      tasks: [{\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      }, {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      }, {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }],\n      maxReact: [{\n        id: 'xvlwil',\n        lesson: '90. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbskk',\n        lesson: '91. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      Monday: [{\n        id: 'morning',\n        task: ''\n      }, {\n        id: 'afternoon',\n        task: 'eat lunch'\n      }, {\n        id: 'evening',\n        task: 'play ball'\n      }],\n      Tuesday: [{\n        id: 'morning',\n        task: ''\n      }, {\n        id: 'afternoon',\n        task: ''\n      }, {\n        id: 'evening',\n        task: ''\n      }],\n      showTasks: false,\n      showTasksCounter: false,\n      showTasksToday: false,\n      showCockpit: true,\n      showCockpit2: true,\n      showView: '0',\n      showNewTask: false,\n      students: [{\n        id: 1,\n        name: 'Wasif',\n        age: 21,\n        email: 'wasif@email.com'\n      }, {\n        id: 2,\n        name: 'Ali',\n        age: 19,\n        email: 'ali@email.com'\n      }, {\n        id: 3,\n        name: 'Saad',\n        age: 16,\n        email: 'saad@email.com'\n      }, {\n        id: 4,\n        name: 'Asad',\n        age: 25,\n        email: 'asad@email.com'\n      }]\n    };\n\n    this.toggleShowTasksHandler = () => {\n      switch (this.state.showView) {\n        case '0':\n          this.setState({\n            showView: '1'\n          });\n          break;\n\n        case '1':\n          this.setState({\n            showView: '0'\n          });\n          break;\n\n        case '2':\n          this.setState({\n            showView: '1'\n          });\n          break;\n      } //old way of showing all tasks\n\n\n      const doesShow = this.state.showTasks;\n      this.setState({\n        showTasks: !doesShow\n      }); //tryout\n\n      const Monday = [...this.state.Monday];\n      Monday[0].task = 'higher love';\n      this.setState({\n        Monday: Monday\n      });\n    };\n\n    this.deleteTaskhandler = taskIndex => {\n      //alert('Are you sure you want to delete this task?');\n      this.setState({\n        showTasksCounter: true\n      }); //get tasks array\n\n      const tasks = [...this.state.tasks]; //splice task of interst\n\n      tasks.splice(taskIndex, 1); //update new list of tasks to state\n\n      this.setState({\n        tasks: tasks\n      });\n      console.log(\"I'm in the deleteTaskHandler \".concat(this.state.tasks)); //this.setState({ showTasksCounter: false });\n    };\n\n    this.taskChangeHandler = (event, taskChangedId) => {\n      //find the task that matches the taskChangedId\n      const foundTaskId = this.state.tasks.findIndex(currentId => {\n        return currentId.id === taskChangedId;\n      }); //create new task item that we will put into array\n\n      const updatedTask = _objectSpread({}, this.state.tasks[foundTaskId]);\n\n      updatedTask.todo = event.target.value; //pull out the states tasks array\n\n      const tasks = [...this.state.tasks]; //update the task with id of interest w/ new task description\n\n      tasks[foundTaskId] = updatedTask; //update the state\n\n      this.setState({\n        tasks: tasks\n      });\n    };\n\n    this.addTaskTodayHandler = (event, taskChangedId) => {};\n\n    this.displayTodayScheduleHandler = () => {\n      switch (this.state.showView) {\n        case '0':\n          this.setState({\n            showView: '2'\n          });\n          break;\n\n        case '1':\n          this.setState({\n            showView: '2'\n          });\n          break;\n\n        case '2':\n          this.setState({\n            showView: '0'\n          });\n          break;\n      } //pull out the states tasks array\n\n\n      const Monday = [...this.state.Monday]; //update the task with id of interest w/ new task description\n\n      Monday[0].task = 'higher love';\n      /*old way of showing Today's Tasks\n      const doesShowToday = this.state.showTasksToday;\n      this.setState({ showTasksToday: !doesShowToday });\n      */\n    };\n\n    this.renderTableDataHandler = () => {\n      return this.state.students.map((student, index) => {\n        const id = student.id,\n              name = student.name,\n              age = student.age,\n              email = student.email; //destructuring\n\n        return React.createElement(\"tr\", {\n          key: id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }, id), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }, name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220\n          },\n          __self: this\n        }, age), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }, email));\n      });\n    };\n\n    this.renderTableHeaderHandler = () => {\n      let header = Object.keys(this.state.students[0]);\n      return header.map((key, index) => {\n        return React.createElement(\"th\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230\n          },\n          __self: this\n        }, key.toUpperCase());\n      });\n    };\n  }\n\n  // componentWillMount() {\n  //   console.log('[App.js] componentWillMount')\n  // }\n  //(year, month, day, hours, minutes, seconds, milliseconds)\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[App.js] shouldComponentUpdate'); // let currentShowTaskStatus = this.state.showTasksCounter;\n    // if (nextState.tasks.length !== this.state.tasks.length) {\n    //   this.setState({ showTasksCounter: false });\n    // }\n\n    return true;\n  }\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount');\n  }\n\n  componentDidUpdate(nextProps, nextState) {\n    console.log('[App.js] componentDidUpdate ');\n\n    if (nextState.tasks.length !== this.state.tasks.length) {\n      this.setState({\n        showTasksCounter: false\n      });\n    }\n  } //show list of tasks\n\n\n  render() {\n    // let TodayDateTime = new Date().toString();\n    // console.log(TodayDateTime);\n    // let dayToday = TodayDateTime;\n    //console.log(this.state.Monday[0])\n    //console.log(this.state.Monday[0])\n    //let newShit =\n    //this.setState (Monday: this.state.Monday[0].taskTime.afternoon) = thisData\n    //console.log(this.state.Monday[0].taskTime.afternoon)\n    let displayTasks = null; //clicking on the show Tasks button to show available tasks\n    //tasks, clicked, changed will be sent to <Tasks>\n\n    switch (this.state.showView) {\n      case '1':\n        displayTasks = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254\n          },\n          __self: this\n        }, \"tasks has # \", this.state.tasks.length), React.createElement(Tasks, {\n          reRender: this.state.showTasksCounter,\n          tasks: this.state.tasks,\n          clicked: this.deleteTaskhandler,\n          changed: this.taskChangeHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255\n          },\n          __self: this\n        }));\n        break;\n\n      case '2':\n        displayTasks = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }, React.createElement(TodayTasks, {\n          monday: this.state.Monday,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268\n          },\n          __self: this\n        }));\n        break;\n    }\n\n    let displayCockpit = null;\n\n    if (this.state.showCockpit == true) {\n      displayCockpit = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(Cockpit, {\n        title: this.props.appTitle,\n        allTasksClicked: this.toggleShowTasksHandler,\n        tasksLength: this.state.tasks.length,\n        todayTasksClicked: this.displayTodayScheduleHandler,\n        deleteCockpit: () => {\n          this.setState({\n            showCockpit: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }));\n    }\n\n    let tasklength = this.state.tasks.length;\n    return React.createElement(WithClass, {\n      passClass: rocky.App,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(Navbar2, {\n      title: this.props.appTitle,\n      allTasksClicked: this.toggleShowTasksHandler,\n      tasksLength: this.state.tasks.length,\n      todayTasksClicked: this.displayTodayScheduleHandler,\n      deleteCockpit: () => {\n        this.setState({\n          showCockpit: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), displayCockpit, displayTasks, this.state.showCockpit2 ? React.createElement(Cockpit2, {\n      deleteCockpit2: () => {\n        this.setState({\n          showCockpit2: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }) : null);\n  }\n\n} //<Syllabus />\n\n\nApp.getDerivedStateFromProps = (state, props) => {\n  console.log('[App.js] getDerivedStateFromProps', props);\n  return state;\n};\n\nexport default App; //<p className={rocky[classes]}>Things to Do!</p>\n//using css modules on multiple classNames\n//{classNames({[styles.foo]: true, [styles.bar]: true})}\n//<p className={classNames({[rocky[classes]]: true, [rocky.red]: true})}>Things to Do!</p>\n\n/*old way of displaying\n<WithClass passClass={rocky.App}>\n        <button\n          onClick={() => {\n            this.setState({ showCockpit: false });\n          }}\n        >\n          {' '}\n          Remove Cockpit\n        </button>\n\n        {this.state.showCockpit ? (\n          <Cockpit\n            title={this.props.appTitle}\n            clicked={this.toggleShowTasksHandler}\n            tasksLength={this.state.tasks.length}\n            todayClicked={this.displayTodayScheduleHandler}\n          />\n        ) : null}\n\n        {displayTasks}\n      </WithClass>\n      */\n//    <div>\n//    <h1 id=\"title\">React Dynamic Table</h1>\n//    <table id=\"students\">\n//      <tbody>\n//        <tr>{this.renderTableHeaderHandler()}</tr>\n//        {this.renderTableDataHandler()}\n//      </tbody>\n//    </table>\n//  </div>","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/App.js"],"names":["React","Component","rocky","Tasks","Cockpit","Cockpit2","Navbar2","TodayTasks","WithClass","NewTaskContext","App","constructor","props","state","tasks","id","todo","deadline","location","maxReact","lesson","completion","Monday","task","Tuesday","showTasks","showTasksCounter","showTasksToday","showCockpit","showCockpit2","showView","showNewTask","students","name","age","email","toggleShowTasksHandler","setState","doesShow","deleteTaskhandler","taskIndex","splice","console","log","taskChangeHandler","event","taskChangedId","foundTaskId","findIndex","currentId","updatedTask","target","value","addTaskTodayHandler","displayTodayScheduleHandler","renderTableDataHandler","map","student","index","renderTableHeaderHandler","header","Object","keys","key","toUpperCase","shouldComponentUpdate","nextProps","nextState","componentDidMount","componentDidUpdate","length","render","displayTasks","displayCockpit","appTitle","tasklength","getDerivedStateFromProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport rocky from './App.module.css';\nimport Tasks from '../components/Tasks/Tasks';\n//import Task from '../components/Tasks/Task/Task'\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport Cockpit2 from '../components/Cockpit/Cockpit2';\nimport Navbar2 from '../components/Cockpit/Navbar/Navbar2';\nimport '../components/Tasks/Task/Task';\nimport TodayTasks from '../components/TodayTasks/TodayTasks';\n//import MaxReact from '../components/Syllabus/MaxReact'\nimport WithClass from '../hoc/WithClass';\nimport NewTaskContext from '../context/newTask-context';\n//import DataStructure from './DataStructure';\n//import Student from './Student.css';\n//import StudentTable from './StudentTable'\n// import StudentTable from './StudentTable';\n//import Navbar from '../components/Cockpit/navBar';\n//import Syllabus from '../components/Syllabus/Syllabus';\n\n//import for bootstraps\n// import axios from 'axios';\n// import { Container, Row, Col } from 'reactstrap';\n// import Post from '../components/Post';\n// import Header from '../components/Header';\n// import SideCard from '../components/SideCard';\n\nclass App extends Component {\n  constructor(props) {\n    // const bigDaddy = {...this.DataStructure}\n    // console.log(bigDaddy.state.ShowView)\n    super(props);\n  }\n\n  state = {\n    tasks: [\n      {\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      },\n      {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      },\n      {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }\n    ],\n    maxReact: [\n      { id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n      { id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n      {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    Monday: [\n      { id: 'morning', task: '' },\n      { id: 'afternoon', task: 'eat lunch' },\n      { id: 'evening', task: 'play ball' }\n    ],\n    Tuesday: [\n      { id: 'morning', task: '' },\n      { id: 'afternoon', task: '' },\n      { id: 'evening', task: '' }\n    ],\n    showTasks: false,\n    showTasksCounter: false,\n    showTasksToday: false,\n    showCockpit: true,\n    showCockpit2: true,\n    showView: '0',\n    showNewTask: false,\n    students: [\n      { id: 1, name: 'Wasif', age: 21, email: 'wasif@email.com' },\n      { id: 2, name: 'Ali', age: 19, email: 'ali@email.com' },\n      { id: 3, name: 'Saad', age: 16, email: 'saad@email.com' },\n      { id: 4, name: 'Asad', age: 25, email: 'asad@email.com' }\n    ]\n  };\n\n  static getDerivedStateFromProps = (state, props) => {\n    console.log('[App.js] getDerivedStateFromProps', props);\n    return state;\n  };\n\n  // componentWillMount() {\n  //   console.log('[App.js] componentWillMount')\n  // }\n\n  //(year, month, day, hours, minutes, seconds, milliseconds)\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[App.js] shouldComponentUpdate');\n    // let currentShowTaskStatus = this.state.showTasksCounter;\n    // if (nextState.tasks.length !== this.state.tasks.length) {\n    //   this.setState({ showTasksCounter: false });\n    // }\n    return true;\n  }\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount');\n  }\n\n  componentDidUpdate(nextProps, nextState) {\n    console.log('[App.js] componentDidUpdate ');\n    if (nextState.tasks.length !== this.state.tasks.length) {\n      this.setState({ showTasksCounter: false });\n    }\n  }\n\n  //show list of tasks\n  toggleShowTasksHandler = () => {\n    switch (this.state.showView) {\n      case '0':\n        this.setState({ showView: '1' });\n\n        break;\n\n      case '1':\n        this.setState({ showView: '0' });\n        break;\n\n      case '2':\n        this.setState({ showView: '1' });\n        break;\n    }\n\n    //old way of showing all tasks\n    const doesShow = this.state.showTasks;\n    this.setState({ showTasks: !doesShow });\n\n    //tryout\n    const Monday = [...this.state.Monday];\n\n    Monday[0].task = 'higher love';\n\n    this.setState({ Monday: Monday });\n  };\n\n  //delete a task\n  deleteTaskhandler = taskIndex => {\n    //alert('Are you sure you want to delete this task?');\n    this.setState({ showTasksCounter: true });\n    //get tasks array\n    const tasks = [...this.state.tasks];\n    //splice task of interst\n    tasks.splice(taskIndex, 1);\n    //update new list of tasks to state\n    this.setState({ tasks: tasks });\n    console.log(`I'm in the deleteTaskHandler ${this.state.tasks}`);\n    //this.setState({ showTasksCounter: false });\n  };\n\n  //dynamic edit task\n  taskChangeHandler = (event, taskChangedId) => {\n    //find the task that matches the taskChangedId\n    const foundTaskId = this.state.tasks.findIndex(currentId => {\n      return currentId.id === taskChangedId;\n    });\n\n    //create new task item that we will put into array\n    const updatedTask = { ...this.state.tasks[foundTaskId] };\n    updatedTask.todo = event.target.value;\n\n    //pull out the states tasks array\n    const tasks = [...this.state.tasks];\n\n    //update the task with id of interest w/ new task description\n    tasks[foundTaskId] = updatedTask;\n\n    //update the state\n    this.setState({ tasks: tasks });\n  };\n\n  addTaskTodayHandler = (event, taskChangedId) => {};\n\n  displayTodayScheduleHandler = () => {\n    switch (this.state.showView) {\n      case '0':\n        this.setState({ showView: '2' });\n        break;\n\n      case '1':\n        this.setState({ showView: '2' });\n        break;\n\n      case '2':\n        this.setState({ showView: '0' });\n        break;\n    }\n\n    //pull out the states tasks array\n    const Monday = [...this.state.Monday];\n\n    //update the task with id of interest w/ new task description\n    Monday[0].task = 'higher love';\n\n    /*old way of showing Today's Tasks\n    const doesShowToday = this.state.showTasksToday;\n    this.setState({ showTasksToday: !doesShowToday });\n    */\n  };\n\n  renderTableDataHandler = () => {\n    return this.state.students.map((student, index) => {\n      const { id, name, age, email } = student; //destructuring\n      return (\n        <tr key={id}>\n          <td>{id}</td>\n          <td>{name}</td>\n          <td>{age}</td>\n          <td>{email}</td>\n        </tr>\n      );\n    });\n  };\n\n  renderTableHeaderHandler = () => {\n    let header = Object.keys(this.state.students[0]);\n    return header.map((key, index) => {\n      return <th key={index}>{key.toUpperCase()}</th>;\n    });\n  };\n\n  render() {\n    // let TodayDateTime = new Date().toString();\n    // console.log(TodayDateTime);\n    // let dayToday = TodayDateTime;\n    //console.log(this.state.Monday[0])\n\n    //console.log(this.state.Monday[0])\n\n    //let newShit =\n    //this.setState (Monday: this.state.Monday[0].taskTime.afternoon) = thisData\n    //console.log(this.state.Monday[0].taskTime.afternoon)\n    let displayTasks = null;\n\n    //clicking on the show Tasks button to show available tasks\n    //tasks, clicked, changed will be sent to <Tasks>\n\n    switch (this.state.showView) {\n      case '1':\n        displayTasks = (\n          <React.Fragment>\n            <p>tasks has # {this.state.tasks.length}</p>\n            <Tasks\n              reRender={this.state.showTasksCounter}\n              tasks={this.state.tasks}\n              clicked={this.deleteTaskhandler}\n              changed={this.taskChangeHandler}\n            />\n          </React.Fragment>\n        );\n        break;\n\n      case '2':\n        displayTasks = (\n          <React.Fragment>\n            <TodayTasks monday={this.state.Monday} />\n          </React.Fragment>\n        );\n        break;\n    }\n    let displayCockpit = null;\n    if (this.state.showCockpit == true) {\n      displayCockpit = (\n        <React.Fragment>\n          <Cockpit\n            title={this.props.appTitle}\n            allTasksClicked={this.toggleShowTasksHandler}\n            tasksLength={this.state.tasks.length}\n            todayTasksClicked={this.displayTodayScheduleHandler}\n            deleteCockpit={() => {\n              this.setState({ showCockpit: false });\n            }}\n          />\n        </React.Fragment>\n      );\n    }\n\n    let tasklength = this.state.tasks.length;\n\n    return (\n      <WithClass passClass={rocky.App}>\n        <Navbar2\n          title={this.props.appTitle}\n          allTasksClicked={this.toggleShowTasksHandler}\n          tasksLength={this.state.tasks.length}\n          todayTasksClicked={this.displayTodayScheduleHandler}\n          deleteCockpit={() => {\n            this.setState({ showCockpit: false });\n          }}\n        />\n        {displayCockpit}\n        {displayTasks}\n\n        {this.state.showCockpit2 ? (\n          <Cockpit2\n            deleteCockpit2={() => {\n              this.setState({ showCockpit2: false });\n            }}\n          />\n        ) : null}\n      </WithClass>\n    );\n  }\n}\n//<Syllabus />\nexport default App;\n//<p className={rocky[classes]}>Things to Do!</p>\n\n//using css modules on multiple classNames\n//{classNames({[styles.foo]: true, [styles.bar]: true})}\n//<p className={classNames({[rocky[classes]]: true, [rocky.red]: true})}>Things to Do!</p>\n\n/*old way of displaying\n<WithClass passClass={rocky.App}>\n        <button\n          onClick={() => {\n            this.setState({ showCockpit: false });\n          }}\n        >\n          {' '}\n          Remove Cockpit\n        </button>\n\n        {this.state.showCockpit ? (\n          <Cockpit\n            title={this.props.appTitle}\n            clicked={this.toggleShowTasksHandler}\n            tasksLength={this.state.tasks.length}\n            todayClicked={this.displayTodayScheduleHandler}\n          />\n        ) : null}\n\n        {displayTasks}\n      </WithClass>\n      */\n\n//    <div>\n//    <h1 id=\"title\">React Dynamic Table</h1>\n//    <table id=\"students\">\n//      <tbody>\n//        <tr>{this.renderTableHeaderHandler()}</tr>\n//        {this.renderTableDataHandler()}\n//      </tbody>\n//    </table>\n//  </div>\n"]},"metadata":{},"sourceType":"module"}