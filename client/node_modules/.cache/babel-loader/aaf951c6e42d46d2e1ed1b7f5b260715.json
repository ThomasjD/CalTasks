{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/Store/Store.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react'; //import classes from '../../components/Cockpit/Cockpit.module.css';\n\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport SyllabusData from './SyllabusData';\n\nclass Store extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      maxReact: [{\n        id: 'xvlwil',\n        lesson: '90. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbskk',\n        lesson: '91. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      maxReactWorkLeft: [{\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      }, {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      }, {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }],\n      minReact: [{\n        id: 'xvldddwil',\n        lesson: '936670. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbnnskk',\n        lesson: '93531. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhsdhck2',\n        lesson: '9100. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      lastLessonHeader: [],\n      crunk: 'Hootie and teh blowfish',\n      showLeftOverLessonsFromSyllabus: false,\n      syllabusData: null,\n      syllabusHandlerChoice: '0'\n    };\n\n    this.syllabusDataHandler = () => {\n      let sendBacKminReact = this.state.minReact;\n      console.log(sendBacKminReact);\n    };\n\n    this.lastLessonHeaderHandler = () => {\n      if (this.state.maxReact.length != 0) {\n        this.setState({\n          lastLessonHeader: this.state.maxReact[0]\n        });\n      } else {\n        this.setState({\n          lastLessonHeader: this.state.lastLessonHeader\n        });\n      }\n\n      console.log(JSON.stringify(this.state.lastLessonHeader));\n      console.log(this.state.lastLessonHeader);\n    };\n\n    this.assignLessonFromSyllabus = () => {\n      this.setState({\n        showLeftOverLessonsFromSyllabus: true\n      });\n\n      if (this.state.maxReact.length != 0) {\n        this.setState({\n          lastLessonHeader: this.state.maxReact[0]\n        });\n      } else {\n        this.setState({\n          lastLessonHeader: this.state.lastLessonHeader\n        });\n      }\n    };\n\n    this.deleteLessonFromAssignedSyllabusHandler = (event, taskIndex) => {\n      alert('Are you sure you want to delete this Lesson?');\n      let currentScheduledLessons = [...this.state.maxReact];\n      currentScheduledLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReact: currentScheduledLessons\n      });\n    };\n\n    this.deleteLessonFromOriginalSyllabusHandler = (event, taskIndex) => {\n      alert('Are you sure you want to add this lesson?');\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      currentOriginalLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReactWorkLeft: currentOriginalLessons\n      });\n    };\n\n    this.addLessonFromOriginalSyllabusHandler = taskIndex => {\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      let lessonToAdd = currentOriginalLessons[taskIndex]; //add to maxReact the picked lesson\n\n      console.log('I am inside addNewLesonHandler');\n      let currentMaxReactSyllabus = [...this.state.maxReact];\n      currentMaxReactSyllabus.push(lessonToAdd); //currentMaxReactSyllabus.push(newLesson);\n\n      console.log(currentMaxReactSyllabus);\n      let currentShowLeftOverLessonsFromSyllabus = this.state.showLeftOverLessonsFromSyllabus; //Showing current left over Lessons from Syllabus (after addition/deletion)\n\n      this.setState({\n        showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus\n      }); //adding to redefining what maxReact is w/ new lesson\n\n      this.setState({\n        maxReact: currentMaxReactSyllabus\n      });\n      this.deleteLessonFromOriginalSyllabusHandler(taskIndex);\n    };\n\n    this.lessonChangeHandler = (event, taskChangeId) => {\n      const foundTaskId = this.state.maxReact.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReact[foundTaskId]); //using updated values to define the lesson of the particular pulled out lesson\n\n\n      updatedLessons.lesson = event.target.value; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReact]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskId] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReact: lessons\n      });\n    };\n\n    this.leftOverLessonChangeHandler = (event, taskChangeId) => {\n      const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReactWorkLeft[foundTaskId]); //using updated values to define the lesson of the particular pulled out lesson\n\n\n      updatedLessons.lesson = event.target.value; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReactWorkLeft]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskId] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReactWorkLeft: lessons\n      });\n    };\n\n    this.showLeftOverLessonsFromSyllabus = () => {\n      this.setState({\n        showLeftOverLessonsFromSyllabus: true\n      });\n      this.lastLessonHeaderHandler();\n    };\n\n    this.sendSyllabusDataHandler = handlerChoice => {\n      this.setState({\n        syllabusHandlerChoice: handlerChoice\n      });\n      console.log('Inside of sendSyllabusDataHandler');\n    };\n\n    this.receiveSyllabusDataHandler = syllabusData => {\n      //this.setState({ syllabusData: syllabusData });\n      let currentSyllabusDataState = _objectSpread({}, this.state.syllabusData);\n\n      currentSyllabusDataState = syllabusData; //this to allow setState to finish inorder for the new syllabusData to show up\n\n      this.setState({\n        syllabusData: currentSyllabusDataState,\n        syllabusHandlerChoice: '0'\n      }, () => {\n        console.log(this.state.syllabusData.showData2);\n      }); //console.log(JSON.stringify(this.state.syllabusData[0].showData2));\n\n      console.log(this.state.syllabusData);\n    };\n  }\n\n  render() {\n    let displayMessage = null;\n\n    if (this.state.syllabusHandlerChoice === '1') {\n      displayMessage = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \"Hey syllabusHandlerchoice is recorded\");\n    }\n\n    let showData2message;\n    /* displayWord --> show you can press button from RightRocket & take data from TasksData and display it on RightPocket\n    let displayWord = null;\n     if (this.state.showData3 === true) {\n      displayWord = <p>{this.state.TasksData}</p>;\n    }\n    <RightCockpit\n          displayWord={displayWord} \n          dataHandler2={this.TasksDataHandler2}\n          showData2={this.state.showData2}\n          showData3={this.state.showData3}\n          data2={this.state.TasksData}\n          dataHandler={this.TasksDataHandler2}\n    />\n    <TasksData\n          data={this.TasksDataHandler}\n          showData2={this.state.showData2}\n          dataHandler2={this.TasksDataHandler2}\n        ></TasksData>\n        */\n    //<SyllabusData></SyllabusData>\n    //{JSON.stringify(this.state.syllabusData.showData2, null, 2)}\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"I'm inside of store\"), displayMessage, React.createElement(SyllabusData, {\n      syllabusHandlerChoice: this.state.syllabusHandlerChoice,\n      receiveSyllabusDataHandler: this.receiveSyllabusDataHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(RightCockpit //Syllabus\n    , {\n      sendSyllabusDataHandler: this.sendSyllabusDataHandler,\n      lastLessonHeaderHandler: event => this.lastLessonHeaderHandler(event),\n      assignLessonFromSyllabus: event => this.assignLessonFromSyllabus(event),\n      deleteLessonFromAssignedSyllabusHandler: event => this.deleteLessonFromAssignedSyllabusHandler(event),\n      deleteLessonFromOriginalSyllabusHandler: event => this.deleteLessonFromOriginalSyllabusHandler(event),\n      addLessonFromOriginalSyllabusHandler: event => this.addLessonFromOriginalSyllabusHandler(event),\n      lessonChangeHandler: (event, taskIndex) => this.lessonChangeHandler(event, taskIndex),\n      showLeftOverLessonsFromSyllabus: event => this.showLeftOverLessonsFromSyllabus(event),\n      leftOverLessonChangeHandler: event => this.leftOverLessonChangeHandler(event),\n      data: this.state.TasksData,\n      syllabusEverything: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Store;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/Store/Store.js"],"names":["React","Component","RightCockpit","TasksData","SyllabusData","Store","state","maxReact","id","lesson","completion","maxReactWorkLeft","minReact","lastLessonHeader","crunk","showLeftOverLessonsFromSyllabus","syllabusData","syllabusHandlerChoice","syllabusDataHandler","sendBacKminReact","console","log","lastLessonHeaderHandler","length","setState","JSON","stringify","assignLessonFromSyllabus","deleteLessonFromAssignedSyllabusHandler","event","taskIndex","alert","currentScheduledLessons","splice","deleteLessonFromOriginalSyllabusHandler","currentOriginalLessons","addLessonFromOriginalSyllabusHandler","lessonToAdd","currentMaxReactSyllabus","push","currentShowLeftOverLessonsFromSyllabus","lessonChangeHandler","taskChangeId","foundTaskId","findIndex","currentId","updatedLessons","target","value","lessons","leftOverLessonChangeHandler","sendSyllabusDataHandler","handlerChoice","receiveSyllabusDataHandler","currentSyllabusDataState","showData2","render","displayMessage","showData2message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import classes from '../../components/Cockpit/Cockpit.module.css';\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport SyllabusData from './SyllabusData';\n\nclass Store extends Component {\n  state = {\n    maxReact: [\n      { id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n      { id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n      {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    maxReactWorkLeft: [\n      {\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      },\n      {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      },\n      {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }\n    ],\n    minReact: [\n      {\n        id: 'xvldddwil',\n        lesson: '936670. (for props Changes)',\n        completion: false\n      },\n      {\n        id: 'bbbnnskk',\n        lesson: '93531. (for state Changes)',\n        completion: false\n      },\n      {\n        id: 'kjhsdhck2',\n        lesson: '9100. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    lastLessonHeader: [],\n    crunk: 'Hootie and teh blowfish',\n    showLeftOverLessonsFromSyllabus: false,\n    syllabusData: null,\n    syllabusHandlerChoice: '0'\n  };\n  syllabusDataHandler = () => {\n    let sendBacKminReact = this.state.minReact;\n    console.log(sendBacKminReact);\n  };\n  lastLessonHeaderHandler = () => {\n    if (this.state.maxReact.length != 0) {\n      this.setState({ lastLessonHeader: this.state.maxReact[0] });\n    } else {\n      this.setState({ lastLessonHeader: this.state.lastLessonHeader });\n    }\n\n    console.log(JSON.stringify(this.state.lastLessonHeader));\n    console.log(this.state.lastLessonHeader);\n  };\n\n  assignLessonFromSyllabus = () => {\n    this.setState({ showLeftOverLessonsFromSyllabus: true });\n\n    if (this.state.maxReact.length != 0) {\n      this.setState({ lastLessonHeader: this.state.maxReact[0] });\n    } else {\n      this.setState({ lastLessonHeader: this.state.lastLessonHeader });\n    }\n  };\n\n  deleteLessonFromAssignedSyllabusHandler = (event, taskIndex) => {\n    alert('Are you sure you want to delete this Lesson?');\n\n    let currentScheduledLessons = [...this.state.maxReact];\n    currentScheduledLessons.splice(taskIndex, 1);\n    this.setState({ maxReact: currentScheduledLessons });\n  };\n\n  deleteLessonFromOriginalSyllabusHandler = (event, taskIndex) => {\n    alert('Are you sure you want to add this lesson?');\n\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n\n    currentOriginalLessons.splice(taskIndex, 1);\n\n    this.setState({ maxReactWorkLeft: currentOriginalLessons });\n  };\n\n  addLessonFromOriginalSyllabusHandler = taskIndex => {\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n    let lessonToAdd = currentOriginalLessons[taskIndex];\n\n    //add to maxReact the picked lesson\n    console.log('I am inside addNewLesonHandler');\n    let currentMaxReactSyllabus = [...this.state.maxReact];\n    currentMaxReactSyllabus.push(lessonToAdd);\n\n    //currentMaxReactSyllabus.push(newLesson);\n    console.log(currentMaxReactSyllabus);\n    let currentShowLeftOverLessonsFromSyllabus = this.state\n      .showLeftOverLessonsFromSyllabus;\n\n    //Showing current left over Lessons from Syllabus (after addition/deletion)\n    this.setState({\n      showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus\n    });\n    //adding to redefining what maxReact is w/ new lesson\n    this.setState({ maxReact: currentMaxReactSyllabus });\n\n    this.deleteLessonFromOriginalSyllabusHandler(taskIndex);\n  };\n\n  lessonChangeHandler = (event, taskChangeId) => {\n    const foundTaskId = this.state.maxReact.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReact[foundTaskId] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    updatedLessons.lesson = event.target.value;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReact];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskId] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReact: lessons });\n  };\n\n  leftOverLessonChangeHandler = (event, taskChangeId) => {\n    const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReactWorkLeft[foundTaskId] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    updatedLessons.lesson = event.target.value;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReactWorkLeft];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskId] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReactWorkLeft: lessons });\n  };\n  showLeftOverLessonsFromSyllabus = () => {\n    this.setState({ showLeftOverLessonsFromSyllabus: true });\n    this.lastLessonHeaderHandler();\n  };\n  // TasksDataHandler = word => {\n  //   // console.log(word);\n  //   // let TasksData = word;\n  //   this.setState({ TasksData: word });\n  // };\n\n  // TasksDataHandler2 = () => {\n  //   let statusShowData2 = this.state.showData2;\n  //   this.setState({ showData2: !statusShowData2, showData3: true });\n  // };\n\n  //Now deals with syllabusData strictly\n  sendSyllabusDataHandler = handlerChoice => {\n    this.setState({ syllabusHandlerChoice: handlerChoice });\n    console.log('Inside of sendSyllabusDataHandler');\n  };\n\n  receiveSyllabusDataHandler = syllabusData => {\n    //this.setState({ syllabusData: syllabusData });\n    let currentSyllabusDataState = { ...this.state.syllabusData };\n\n    currentSyllabusDataState = syllabusData;\n    //this to allow setState to finish inorder for the new syllabusData to show up\n    this.setState(\n      {\n        syllabusData: currentSyllabusDataState,\n        syllabusHandlerChoice: '0'\n      },\n      () => {\n        console.log(this.state.syllabusData.showData2);\n      }\n    );\n    //console.log(JSON.stringify(this.state.syllabusData[0].showData2));\n    console.log(this.state.syllabusData);\n  };\n\n  render() {\n    let displayMessage = null;\n    if (this.state.syllabusHandlerChoice === '1') {\n      displayMessage = <div>Hey syllabusHandlerchoice is recorded</div>;\n    }\n    let showData2message;\n\n    /* displayWord --> show you can press button from RightRocket & take data from TasksData and display it on RightPocket\n    let displayWord = null;\n\n    if (this.state.showData3 === true) {\n      displayWord = <p>{this.state.TasksData}</p>;\n    }\n    <RightCockpit\n          displayWord={displayWord} \n          dataHandler2={this.TasksDataHandler2}\n          showData2={this.state.showData2}\n          showData3={this.state.showData3}\n          data2={this.state.TasksData}\n          dataHandler={this.TasksDataHandler2}\n    />\n    <TasksData\n          data={this.TasksDataHandler}\n          showData2={this.state.showData2}\n          dataHandler2={this.TasksDataHandler2}\n        ></TasksData>\n\n\n      */\n    //<SyllabusData></SyllabusData>\n\n    //{JSON.stringify(this.state.syllabusData.showData2, null, 2)}\n    return (\n      <div>\n        <p>I'm inside of store</p>\n\n        {displayMessage}\n        <SyllabusData\n          syllabusHandlerChoice={this.state.syllabusHandlerChoice}\n          receiveSyllabusDataHandler={this.receiveSyllabusDataHandler}\n        ></SyllabusData>\n\n        <RightCockpit\n          //Syllabus\n\n          sendSyllabusDataHandler={this.sendSyllabusDataHandler}\n          lastLessonHeaderHandler={event => this.lastLessonHeaderHandler(event)}\n          assignLessonFromSyllabus={event =>\n            this.assignLessonFromSyllabus(event)\n          }\n          deleteLessonFromAssignedSyllabusHandler={event =>\n            this.deleteLessonFromAssignedSyllabusHandler(event)\n          }\n          deleteLessonFromOriginalSyllabusHandler={event =>\n            this.deleteLessonFromOriginalSyllabusHandler(event)\n          }\n          addLessonFromOriginalSyllabusHandler={event =>\n            this.addLessonFromOriginalSyllabusHandler(event)\n          }\n          lessonChangeHandler={(event, taskIndex) =>\n            this.lessonChangeHandler(event, taskIndex)\n          }\n          showLeftOverLessonsFromSyllabus={event =>\n            this.showLeftOverLessonsFromSyllabus(event)\n          }\n          leftOverLessonChangeHandler={event =>\n            this.leftOverLessonChangeHandler(event)\n          }\n          data={this.state.TasksData}\n          syllabusEverything={this.state}\n        ></RightCockpit>\n      </div>\n    );\n  }\n}\n\nexport default Store;\n"]},"metadata":{},"sourceType":"module"}