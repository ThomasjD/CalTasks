{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/Creation/NewEvent.js\";\nimport React, { Component } from 'react';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport ReactDatePicker from '../Calendar/ReactDatePicker';\nimport RightCockpitContext from '../../context/RightCockpitContext';\nimport TasksDataContext from '../../context/tasksContext';\nimport Icon from '../Calendar/Icon';\nimport { Form, Input, FormGroup, Container, Label } from 'reactstrap';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\nimport { fi } from 'date-fns/locale';\n\nclass NewEvent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      eventId: '',\n      //task + date + start time\n      eventTitle: '',\n      eventNote: '',\n      eventCategory: '',\n      //errand,multiday event, single day event, (radial choices)\n      //required\n      StartTimeDate: '',\n      FinishTimeDate: '',\n      showStartTimeDate: false,\n      showFinishTimeDate: false\n    };\n\n    this.newEventHandler = (event, info) => {\n      //let contentchoice = event.target.value;\n      let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n      let handlerChoice = ''; //string: '#' handler inside of database\n\n      let dataLocation = ''; // string: where obj found inside database\n\n      let infoType = ''; //string: index/id/\n      //let info = ''; //string: actual info\n      // let value = '';\n\n      let dataRequestMessage = {};\n\n      switch (this.props.contentChoice) {\n        case '5':\n          typeOfData = '';\n          handlerChoice = '4';\n          dataLocation = this.context.dataRequestDetails.dataLocation;\n          infoType = 'id'; //info = '';\n\n          break;\n\n        case '4':\n          break;\n\n        case '5':\n          break;\n\n        case '6':\n          typeOfData = 'event';\n          handlerChoice = '6';\n          dataLocation = this.context.dataRequestDetails.dataLocation; // 'maxReactWorkLeft';\n\n          infoType = 'id'; //info = null;\n\n          break;\n      }\n\n      dataRequestMessage = {\n        typeOfData: typeOfData,\n        handlerChoice: handlerChoice,\n        dataLocation: dataLocation,\n        infoType: infoType,\n        info: info\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage);\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      let typeOfData = 'events';\n      let handlerChoice = '';\n      let dataLocation = '';\n      let infoType = 'newEvent';\n      let info = this.state; // this.setState({ blue: 'blue' }, event =>\n      //   this.context.dataRequestHandler(\n      //     event,\n      //     typeOfData,\n      //     handlerChoice,\n      //     infoType,\n      //     info\n      //   )\n      // );\n\n      let dataRequestMessage = {\n        typeOfData: typeOfData,\n        handlerChoice: handlerChoice,\n        dataLocation: dataLocation,\n        infoType: infoType,\n        info: info\n      };\n      this.resetState(event => this.context.dataRequestHandler(event, dataRequestMessage));\n    };\n\n    this.resetState = () => {\n      this.setState({\n        eventId: '',\n        //task + date + start time\n        eventTitle: '',\n        //title, string\n        eventNote: '',\n        //text, string\n        eventCategory: '',\n        //errand,multiday event, single day event, (radial choices)\n        //required\n        assignedTimeStart: '',\n        //14:00:00 GMT-0500 (Colombia Standard Time)\n        assignedDateStart: '',\n        //Thu Jan 16 2020\n        //optional\n        eventDuration: '',\n        //\n        blockOffTimeSlot: '',\n        //T-F  when event will take on time slot for scheduled day\n        assignedTimeStop: '',\n        //00:00 - 24:00, string\n        assignedDateStop: ''\n      }, event => this.context.viewRequestHandler(event, 'newViewNewData', '8', 'tasks', 'unAssignedTasksForWeek')); //send new view\n    };\n\n    this.handleDateChange = date => {\n      //let date = event.target.value;\n      this.setState({\n        startTimeDate: date,\n        showStartTimeDate: true\n      });\n    };\n\n    this.startDateTimeHandler = date => {\n      // this.setState({ startTimeDate: date, showStartTimeDate: true });\n      // alert(`Inside NewEvent startDateTimeHandler: day of date  ${date}`);\n      // console.log(`Inside NewEvent startDateTimeHandler: typeOf date ${date} `);\n      console.dir(date);\n    };\n\n    this.finishTimeDateHandler = date => {\n      this.setState({\n        finishTimeDate: date,\n        showFinishTimeDate: true\n      });\n      console.log(`finishTimeHandler in newEvent: ${date}`);\n    };\n\n    this.eventTitleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.eventNoteChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.eventTypeChange = e => {\n      this.setState({\n        eventType: e.target.value\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Event Title\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"eventTitle\",\n      className: \"form-control\",\n      value: this.state.eventTitle,\n      onChange: e => this.eventTitleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Event Type\"), React.createElement(\"select\", {\n      name: \"assignedTimeStart\",\n      className: \"form-control\",\n      placeholder: \"Enter Start Time.\",\n      onChange: e => this.eventTypeChange(e),\n      id: \"assignedTimeStart\",\n      defaultValue: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Appointment\"), React.createElement(\"option\", {\n      value: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Meeting\"), React.createElement(\"option\", {\n      value: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"One Time - Scheduled\"), React.createElement(\"option\", {\n      value: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"One Time - Unschedule\"), React.createElement(\"option\", {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Multi Day Event\"))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Note\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"eventNote\",\n      className: \"form-control\",\n      value: this.state.eventNote,\n      onChange: e => this.eventNoteChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(DatePickerPicker, {\n      startDateTimeHandler: date => this.startDateTimeHandler(date),\n      finishTimeDateHandler: date => this.finishTimeHandler(date),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nNewEvent.contextType = RightCockpitContext;\nexport default NewEvent;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/Creation/NewEvent.js"],"names":["React","Component","DatePickerPicker","ReactDatePicker","RightCockpitContext","TasksDataContext","Icon","Form","Input","FormGroup","Container","Label","DateRangePicker","SingleDatePicker","DayPickerRangeController","fi","NewEvent","state","eventId","eventTitle","eventNote","eventCategory","StartTimeDate","FinishTimeDate","showStartTimeDate","showFinishTimeDate","newEventHandler","event","info","typeOfData","handlerChoice","dataLocation","infoType","dataRequestMessage","props","contentChoice","context","dataRequestDetails","dataRequestHandler","onSubmit","e","preventDefault","resetState","setState","assignedTimeStart","assignedDateStart","eventDuration","blockOffTimeSlot","assignedTimeStop","assignedDateStop","viewRequestHandler","handleDateChange","date","startTimeDate","startDateTimeHandler","console","dir","finishTimeDateHandler","finishTimeDate","log","eventTitleChange","target","name","value","eventNoteChange","eventTypeChange","eventType","render","finishTimeHandler","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport ReactDatePicker from '../Calendar/ReactDatePicker';\nimport RightCockpitContext from '../../context/RightCockpitContext';\nimport TasksDataContext from '../../context/tasksContext';\nimport Icon from '../Calendar/Icon';\nimport { Form, Input, FormGroup, Container, Label } from 'reactstrap';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport {\n  DateRangePicker,\n  SingleDatePicker,\n  DayPickerRangeController\n} from 'react-dates';\nimport { fi } from 'date-fns/locale';\n\nclass NewEvent extends Component {\n  state = {\n    eventId: '', //task + date + start time\n    eventTitle: '',\n    eventNote: '',\n    eventCategory: '', //errand,multiday event, single day event, (radial choices)\n    //required\n    StartTimeDate: '',\n    FinishTimeDate: '',\n\n    showStartTimeDate: false,\n    showFinishTimeDate: false\n  };\n\n  newEventHandler = (event, info) => {\n    //let contentchoice = event.target.value;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    //let info = ''; //string: actual info\n\n    // let value = '';\n    let dataRequestMessage = {};\n    switch (this.props.contentChoice) {\n      case '5':\n        typeOfData = '';\n        handlerChoice = '4';\n        dataLocation = this.context.dataRequestDetails.dataLocation;\n        infoType = 'id';\n        //info = '';\n        break;\n      case '4':\n        break;\n      case '5':\n        break;\n      case '6':\n        typeOfData = 'event';\n        handlerChoice = '6';\n        dataLocation = this.context.dataRequestDetails.dataLocation; // 'maxReactWorkLeft';\n        infoType = 'id';\n        //info = null;\n        break;\n    }\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    this.context.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    let typeOfData = 'events';\n    let handlerChoice = '';\n    let dataLocation = '';\n    let infoType = 'newEvent';\n    let info = this.state;\n\n    // this.setState({ blue: 'blue' }, event =>\n    //   this.context.dataRequestHandler(\n    //     event,\n    //     typeOfData,\n    //     handlerChoice,\n    //     infoType,\n    //     info\n    //   )\n    // );\n\n    let dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    this.resetState(event =>\n      this.context.dataRequestHandler(event, dataRequestMessage)\n    );\n  };\n\n  resetState = () => {\n    this.setState(\n      {\n        eventId: '', //task + date + start time\n        eventTitle: '', //title, string\n\n        eventNote: '', //text, string\n        eventCategory: '', //errand,multiday event, single day event, (radial choices)\n\n        //required\n        assignedTimeStart: '', //14:00:00 GMT-0500 (Colombia Standard Time)\n        assignedDateStart: '', //Thu Jan 16 2020\n        //optional\n        eventDuration: '', //\n        blockOffTimeSlot: '', //T-F  when event will take on time slot for scheduled day\n        assignedTimeStop: '', //00:00 - 24:00, string\n        assignedDateStop: ''\n      },\n      event =>\n        this.context.viewRequestHandler(\n          event,\n          'newViewNewData',\n          '8',\n          'tasks',\n          'unAssignedTasksForWeek'\n        )\n    );\n    //send new view\n  };\n  handleDateChange = date => {\n    //let date = event.target.value;\n    this.setState({\n      startTimeDate: date,\n      showStartTimeDate: true\n    });\n  };\n\n  startDateTimeHandler = date => {\n    // this.setState({ startTimeDate: date, showStartTimeDate: true });\n    // alert(`Inside NewEvent startDateTimeHandler: day of date  ${date}`);\n    // console.log(`Inside NewEvent startDateTimeHandler: typeOf date ${date} `);\n    console.dir(date);\n  };\n\n  finishTimeDateHandler = date => {\n    this.setState({ finishTimeDate: date, showFinishTimeDate: true });\n    console.log(`finishTimeHandler in newEvent: ${date}`);\n  };\n\n  eventTitleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n  eventNoteChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  eventTypeChange = e => {\n    this.setState({\n      eventType: e.target.value\n    });\n  };\n  //static contextType = TasksDataContext;\n  static contextType = RightCockpitContext;\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <form>\n            <div className=\"form-group\">\n              <label>Event Title</label>\n              <input\n                type=\"text\"\n                name=\"eventTitle\"\n                className=\"form-control\"\n                value={this.state.eventTitle}\n                onChange={e => this.eventTitleChange(e)}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>Event Type</label>\n              <select\n                name=\"assignedTimeStart\"\n                className=\"form-control\"\n                placeholder=\"Enter Start Time.\"\n                onChange={e => this.eventTypeChange(e)}\n                id=\"assignedTimeStart\"\n                defaultValue=\"1\"\n              >\n                <option value=\"1\">Appointment</option>\n                <option value=\"2\">Meeting</option>\n                <option value=\"3\">One Time - Scheduled</option>\n                <option value=\"4\">One Time - Unschedule</option>\n                <option value=\"5\">Multi Day Event</option>\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label>Note</label>\n              <input\n                type=\"text\"\n                name=\"eventNote\"\n                className=\"form-control\"\n                value={this.state.eventNote}\n                onChange={e => this.eventNoteChange(e)}\n              />\n\n              <DatePickerPicker\n                startDateTimeHandler={date => this.startDateTimeHandler(date)}\n                finishTimeDateHandler={date => this.finishTimeHandler(date)}\n              />\n            </div>\n\n            <button onClick={e => this.onSubmit(e)}>Submit</button>\n          </form>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NewEvent;\n"]},"metadata":{},"sourceType":"module"}