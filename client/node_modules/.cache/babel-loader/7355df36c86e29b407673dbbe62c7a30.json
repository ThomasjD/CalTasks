{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/ViewContent/Tasks/Tasks.js\";\nimport React, { PureComponent } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../../ErrorBoundary/ErrorBoundary';\nimport student from '../../../containers/Student.css';\nimport TasksContext from '../../../context/tasksContext';\nimport statusClasses from './Tasks.module.css'; //changes color of text depending on # of unscheduled tasks left\n\nimport Aux from '../../../hoc/Aux';\nimport PropTypes from 'prop-types';\n\nclass Tasks extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showMessageForEventValue: false\n    };\n\n    this.taskChangeHandler = (event, info) => {\n      //let contentchoice = event.target.value;\n      let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n      let handlerChoice = ''; //string: '#' handler inside of database\n\n      let dataLocation = ''; // string: where obj found inside database\n\n      let infoType = ''; //string: index/id/\n      //let info = ''; //string: actual info\n      // let value = '';\n\n      let dataRequestMessage = {};\n\n      switch (this.props.contentChoice) {\n        case '1':\n          typeOfData = 'tasks';\n          handlerChoice = '4';\n          dataLocation = this.context.dataRequestDetails.dataLocation;\n          infoType = 'id'; //info = '';\n\n          break;\n\n        case '2':\n          typeOfData = 'tasks';\n          handlerChoice = '6';\n          dataLocation = this.context.dataRequestDetails.dataLocation; // 'maxReactWorkLeft';\n\n          infoType = 'id'; //info = null;\n\n          break;\n\n        case '4':\n          break;\n\n        case '5':\n          break;\n      }\n\n      dataRequestMessage = {\n        typeOfData: typeOfData,\n        handlerChoice: handlerChoice,\n        dataLocation: dataLocation,\n        infoType: infoType,\n        info: info\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage);\n    };\n\n    this.dataRequestHandler = (event, a, b, c) => {\n      console.log('[Tasks] rendering...');\n      let currentValue = JSON.stringify(event.target.value, null, 2);\n      this.setState({\n        showMessageForEventValue: true,\n        targetValue: currentValue\n      });\n    };\n  }\n\n  renderTableHeaderAllTasksHandler() {\n    console.log('Inside Tasks.js');\n\n    if (this.context.tasksData.tasksData.lastTaskHeader) {\n      let header = Object.keys(this.context.tasksData.tasksData.lastTaskHeader);\n      return header.map((key, index) => {\n        //console.log(`this is the key: (${key}) and the index: (${index})`);\n        switch (key) {\n          case 'id':\n            return React.createElement(\"th\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 68\n              },\n              __self: this\n            }, \"Click\\xA0to\\xA0Delete\");\n            break;\n\n          case 'scheduleTask':\n            return React.createElement(\"th\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 71\n              },\n              __self: this\n            }, \"Schedule Task\");\n            break;\n\n          case 'category':\n            return React.createElement(\"th\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 74\n              },\n              __self: this\n            }, key.toUpperCase());\n            break;\n\n          case 'task':\n            return React.createElement(\"th\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 77\n              },\n              __self: this\n            }, key.toUpperCase());\n            break;\n\n          case 'deadline':\n            return React.createElement(\"th\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 81\n              },\n              __self: this\n            }, key.toUpperCase());\n            break;\n        } // if (key === 'id') {\n        //   return <th key={index}>Click to Delete</th>;\n        // } else {\n        //   return <th key={index}>{key.toUpperCase()}</th>;\n        // }\n\n      });\n    }\n  }\n\n  allTasksHandler() {\n    return this.context.tasksData.tasksData.unAssignedTasksForWeek.map((task, index) => {\n      let functionChoiceDelete = null;\n      let functionChoiceChange = null; //destructuring\n      // const { id, name, age, email } = student;\n\n      if (this.props.contentChoice === '1') {\n        functionChoiceDelete = '3';\n        functionChoiceChange = '4';\n      } else {\n        functionChoiceDelete = '5'; //for todayTasks\n\n        functionChoiceChange = '6'; //for todayTasks\n      }\n\n      return React.createElement(Aux, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(ErrorBoundary, {\n        key: task.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Task, {\n        key: task.id,\n        task: task.task,\n        deadline: task.deadline,\n        category: task.category,\n        particularKey: task.id,\n        scheduleTask: task.schedulTask,\n        click: event => this.context.dataRequestHandler(event, 'tasks', functionChoiceDelete, null, 'index', index),\n        changed: event => this.taskChangeHandler(event, task.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      })));\n    });\n  } //sendChangeRequestHandler = (event, functionChoiceDelete ) => {\n  //}\n  // static getDerivedStateFromProps(props, state) {\n  //     console.log('[Tasks] getDerivedStateFromProps')\n  //     return state\n  // }\n  //niche -removed\n  // componentWillReceiveProps(props) {\n  //    console.log('[Persons.js] componentWillReceiveProps', props);\n  // }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[Tasks] shouldComponentUpdate'); //comparing if props have changed\n\n    if (nextProps.unAssignedTasksForWeek !== this.context.tasksData.tasksData.unAssignedTasksForWeek) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('[Tasks] getSnapshotBeforeUpdate');\n    return {\n      message: 'Snapshot'\n    };\n  } // componentWillUpdate() {\n  //     return\n  // }\n\n\n  componentDidUpdate(prevProps, prevState, message) {\n    console.log('[Tasks] componentDidUpdate');\n    console.log(message);\n  }\n\n  componentWillUnmount() {\n    console.log('[Tasks.js] componentWillUnmount');\n  }\n\n  render() {\n    //applying styling to text basing on amount of unscheduled Tasks\n    let workLoadStatus = null;\n\n    if (this.context.tasksData.tasksData.unAssignedTasksForWeek) {\n      switch (this.context.tasksData.tasksData.unAssignedTasksForWeek.length) {\n        case 1:\n          workLoadStatus = React.createElement(\"p\", {\n            className: statusClasses.lightLoad,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 207\n            },\n            __self: this\n          }, \"There are \\xA0\", this.context.tasksData.tasksData.unAssignedTasksForWeek.length, ' ', \"unscheduled tasks for the Week.\");\n          break;\n\n        case 2:\n          workLoadStatus = React.createElement(\"p\", {\n            className: statusClasses.mediumLoad,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 216\n            },\n            __self: this\n          }, \"There are \\xA0\", this.context.tasksData.tasksData.unAssignedTasksForWeek.length, ' ', \"unscheduled tasks for the Week.\");\n          break;\n\n        case 3:\n          workLoadStatus = React.createElement(\"p\", {\n            className: statusClasses.heavyLoad,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 225\n            },\n            __self: this\n          }, \"There are \\xA0\", this.context.tasksData.tasksData.unAssignedTasksForWeek.length, ' ', \"unscheduled tasks for the Week.\");\n          break;\n      }\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, workLoadStatus, React.createElement(\"table\", {\n      id: \"students\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, this.renderTableHeaderAllTasksHandler()), this.allTasksHandler())));\n  }\n\n}\n\nTasks.contextType = TasksContext;\nTasks.propTypes = {\n  //check to see if this.props.contentChoice passed  in is a string\n  contentChoice: PropTypes.string.isRequired\n};\nexport default Tasks;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/ViewContent/Tasks/Tasks.js"],"names":["React","PureComponent","Task","ErrorBoundary","student","TasksContext","statusClasses","Aux","PropTypes","Tasks","constructor","props","state","showMessageForEventValue","taskChangeHandler","event","info","typeOfData","handlerChoice","dataLocation","infoType","dataRequestMessage","contentChoice","context","dataRequestDetails","dataRequestHandler","a","b","c","console","log","currentValue","JSON","stringify","target","value","setState","targetValue","renderTableHeaderAllTasksHandler","tasksData","lastTaskHeader","header","Object","keys","map","key","index","toUpperCase","allTasksHandler","unAssignedTasksForWeek","task","functionChoiceDelete","functionChoiceChange","id","deadline","category","schedulTask","shouldComponentUpdate","nextProps","nextState","getSnapshotBeforeUpdate","prevProps","prevState","message","componentDidUpdate","componentWillUnmount","render","workLoadStatus","length","lightLoad","mediumLoad","heavyLoad","contextType","propTypes","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,aAAP,MAA0B,oBAA1B,C,CAAgD;;AAChD,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,KAAN,SAAoBR,aAApB,CAAkC;AAChCS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAGnBC,KAHmB,GAGX;AACNC,MAAAA,wBAAwB,EAAE;AADpB,KAHW;;AAAA,SAMnBC,iBANmB,GAMC,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACnC;AACA,UAAIC,UAAU,GAAG,EAAjB,CAFmC,CAEd;;AACrB,UAAIC,aAAa,GAAG,EAApB,CAHmC,CAGX;;AACxB,UAAIC,YAAY,GAAG,EAAnB,CAJmC,CAIZ;;AACvB,UAAIC,QAAQ,GAAG,EAAf,CALmC,CAKhB;AACnB;AAEA;;AACA,UAAIC,kBAAkB,GAAG,EAAzB;;AACA,cAAQ,KAAKV,KAAL,CAAWW,aAAnB;AACE,aAAK,GAAL;AACEL,UAAAA,UAAU,GAAG,OAAb;AACAC,UAAAA,aAAa,GAAG,GAAhB;AACAC,UAAAA,YAAY,GAAG,KAAKI,OAAL,CAAaC,kBAAb,CAAgCL,YAA/C;AACAC,UAAAA,QAAQ,GAAG,IAAX,CAJF,CAKE;;AACA;;AACF,aAAK,GAAL;AACEH,UAAAA,UAAU,GAAG,OAAb;AACAC,UAAAA,aAAa,GAAG,GAAhB;AACAC,UAAAA,YAAY,GAAG,KAAKI,OAAL,CAAaC,kBAAb,CAAgCL,YAA/C,CAHF,CAG+D;;AAC7DC,UAAAA,QAAQ,GAAG,IAAX,CAJF,CAKE;;AACA;;AACF,aAAK,GAAL;AACE;;AACF,aAAK,GAAL;AACE;AAlBJ;;AAoBAC,MAAAA,kBAAkB,GAAG;AACnBJ,QAAAA,UAAU,EAAEA,UADO;AAEnBC,QAAAA,aAAa,EAAEA,aAFI;AAGnBC,QAAAA,YAAY,EAAEA,YAHK;AAInBC,QAAAA,QAAQ,EAAEA,QAJS;AAKnBJ,QAAAA,IAAI,EAAEA;AALa,OAArB;AAQA,WAAKO,OAAL,CAAaE,kBAAb,CAAgCV,KAAhC,EAAuCM,kBAAvC;AACD,KA7CkB;;AAAA,SAiLnBI,kBAjLmB,GAiLE,CAACV,KAAD,EAAQW,CAAR,EAAWC,CAAX,EAAcC,CAAd,KAAoB;AACvCC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAEA,UAAIC,YAAY,GAAGC,IAAI,CAACC,SAAL,CAAelB,KAAK,CAACmB,MAAN,CAAaC,KAA5B,EAAmC,IAAnC,EAAyC,CAAzC,CAAnB;AACA,WAAKC,QAAL,CAAc;AACZvB,QAAAA,wBAAwB,EAAE,IADd;AAEZwB,QAAAA,WAAW,EAAEN;AAFD,OAAd;AAID,KAzLkB;AAElB;;AA6CDO,EAAAA,gCAAgC,GAAG;AACjCT,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;;AAEA,QAAI,KAAKP,OAAL,CAAagB,SAAb,CAAuBA,SAAvB,CAAiCC,cAArC,EAAqD;AACnD,UAAIC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKpB,OAAL,CAAagB,SAAb,CAAuBA,SAAvB,CAAiCC,cAA7C,CAAb;AACA,aAAOC,MAAM,CAACG,GAAP,CAAW,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAChC;AAEA,gBAAQD,GAAR;AACE,eAAK,IAAL;AACE,mBAAO;AAAI,cAAA,GAAG,EAAEC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAP;AACA;;AACF,eAAK,cAAL;AACE,mBAAO;AAAI,cAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACA;;AACF,eAAK,UAAL;AACE,mBAAO;AAAI,cAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAiBD,GAAG,CAACE,WAAJ,EAAjB,CAAP;AACA;;AACF,eAAK,MAAL;AACE,mBAAO;AAAI,cAAA,GAAG,EAAED,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAiBD,GAAG,CAACE,WAAJ,EAAjB,CAAP;AACA;;AAEF,eAAK,UAAL;AACE,mBAAO;AAAI,cAAA,GAAG,EAAED,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAiBD,GAAG,CAACE,WAAJ,EAAjB,CAAP;AACA;AAhBJ,SAHgC,CAqBhC;AACA;AACA;AACA;AACA;;AACD,OA1BM,CAAP;AA2BD;AACF;;AAEDC,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKzB,OAAL,CAAagB,SAAb,CAAuBA,SAAvB,CAAiCU,sBAAjC,CAAwDL,GAAxD,CACL,CAACM,IAAD,EAAOJ,KAAP,KAAiB;AACf,UAAIK,oBAAoB,GAAG,IAA3B;AACA,UAAIC,oBAAoB,GAAG,IAA3B,CAFe,CAIf;AACA;;AACA,UAAI,KAAKzC,KAAL,CAAWW,aAAX,KAA6B,GAAjC,EAAsC;AACpC6B,QAAAA,oBAAoB,GAAG,GAAvB;AACAC,QAAAA,oBAAoB,GAAG,GAAvB;AACD,OAHD,MAGO;AACLD,QAAAA,oBAAoB,GAAG,GAAvB,CADK,CACuB;;AAC5BC,QAAAA,oBAAoB,GAAG,GAAvB,CAFK,CAEuB;AAC7B;;AAED,aACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAEF,IAAI,CAACG,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AACE,QAAA,GAAG,EAAEH,IAAI,CAACG,EADZ;AAEE,QAAA,IAAI,EAAEH,IAAI,CAACA,IAFb;AAGE,QAAA,QAAQ,EAAEA,IAAI,CAACI,QAHjB;AAIE,QAAA,QAAQ,EAAEJ,IAAI,CAACK,QAJjB;AAKE,QAAA,aAAa,EAAEL,IAAI,CAACG,EALtB;AAME,QAAA,YAAY,EAAEH,IAAI,CAACM,WANrB;AAOE,QAAA,KAAK,EAAEzC,KAAK,IACV,KAAKQ,OAAL,CAAaE,kBAAb,CACEV,KADF,EAEE,OAFF,EAGEoC,oBAHF,EAIE,IAJF,EAKE,OALF,EAMEL,KANF,CARJ;AAiBE,QAAA,OAAO,EAAE/B,KAAK,IACZ,KAAKD,iBAAL,CACEC,KADF,EAGEmC,IAAI,CAACG,EAHP,CAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF;AA+BD,KA9CI,CAAP;AAgDD,GApI+B,CAqIhC;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEAI,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1C9B,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAD0C,CAE1C;;AACA,QACE4B,SAAS,CAACT,sBAAV,KACA,KAAK1B,OAAL,CAAagB,SAAb,CAAuBA,SAAvB,CAAiCU,sBAFnC,EAGE;AACA,aAAO,IAAP;AACD,KALD,MAKO;AACL,aAAO,KAAP;AACD;AACF;;AAEDW,EAAAA,uBAAuB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC5CjC,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACA,WAAO;AAAEiC,MAAAA,OAAO,EAAE;AAAX,KAAP;AACD,GAnK+B,CAqKhC;AACA;AACA;;;AAEAC,EAAAA,kBAAkB,CAACH,SAAD,EAAYC,SAAZ,EAAuBC,OAAvB,EAAgC;AAChDlC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYiC,OAAZ;AACD;;AAEDE,EAAAA,oBAAoB,GAAG;AACrBpC,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACD;;AAcDoC,EAAAA,MAAM,GAAG;AACP;AACA,QAAIC,cAAc,GAAG,IAArB;;AACA,QAAI,KAAK5C,OAAL,CAAagB,SAAb,CAAuBA,SAAvB,CAAiCU,sBAArC,EAA6D;AAC3D,cAAQ,KAAK1B,OAAL,CAAagB,SAAb,CAAuBA,SAAvB,CAAiCU,sBAAjC,CAAwDmB,MAAhE;AACE,aAAK,CAAL;AACED,UAAAA,cAAc,GACZ;AAAG,YAAA,SAAS,EAAE7D,aAAa,CAAC+D,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEG,KAAK9C,OAAL,CAAagB,SAAb,CAAuBA,SAAvB,CAAiCU,sBAAjC,CAAwDmB,MAF3D,EAEmE,GAFnE,oCADF;AAOA;;AACF,aAAK,CAAL;AACED,UAAAA,cAAc,GACZ;AAAG,YAAA,SAAS,EAAE7D,aAAa,CAACgE,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEG,KAAK/C,OAAL,CAAagB,SAAb,CAAuBA,SAAvB,CAAiCU,sBAAjC,CAAwDmB,MAF3D,EAEmE,GAFnE,oCADF;AAOA;;AACF,aAAK,CAAL;AACED,UAAAA,cAAc,GACZ;AAAG,YAAA,SAAS,EAAE7D,aAAa,CAACiE,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEG,KAAKhD,OAAL,CAAagB,SAAb,CAAuBA,SAAvB,CAAiCU,sBAAjC,CAAwDmB,MAF3D,EAEmE,GAFnE,oCADF;AAOA;AA3BJ;AA6BD;;AAED,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,cADH,EAEE;AAAO,MAAA,EAAE,EAAC,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAK7B,gCAAL,EAAL,CADF,EAEG,KAAKU,eAAL,EAFH,CADF,CAFF,CADF;AAWD;;AA5O+B;;AAA5BvC,K,CA4LG+D,W,GAAcnE,Y;AAmDvBI,KAAK,CAACgE,SAAN,GAAkB;AAChB;AACAnD,EAAAA,aAAa,EAAEd,SAAS,CAACkE,MAAV,CAAiBC;AAFhB,CAAlB;AAIA,eAAelE,KAAf","sourcesContent":["import React, { PureComponent } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../../ErrorBoundary/ErrorBoundary';\nimport student from '../../../containers/Student.css';\nimport TasksContext from '../../../context/tasksContext';\nimport statusClasses from './Tasks.module.css'; //changes color of text depending on # of unscheduled tasks left\nimport Aux from '../../../hoc/Aux';\nimport PropTypes from 'prop-types';\n\nclass Tasks extends PureComponent {\n  constructor(props) {\n    super(props);\n  }\n  state = {\n    showMessageForEventValue: false\n  };\n  taskChangeHandler = (event, info) => {\n    //let contentchoice = event.target.value;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    //let info = ''; //string: actual info\n\n    // let value = '';\n    let dataRequestMessage = {};\n    switch (this.props.contentChoice) {\n      case '1':\n        typeOfData = 'tasks';\n        handlerChoice = '4';\n        dataLocation = this.context.dataRequestDetails.dataLocation;\n        infoType = 'id';\n        //info = '';\n        break;\n      case '2':\n        typeOfData = 'tasks';\n        handlerChoice = '6';\n        dataLocation = this.context.dataRequestDetails.dataLocation; // 'maxReactWorkLeft';\n        infoType = 'id';\n        //info = null;\n        break;\n      case '4':\n        break;\n      case '5':\n        break;\n    }\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    this.context.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  renderTableHeaderAllTasksHandler() {\n    console.log('Inside Tasks.js');\n\n    if (this.context.tasksData.tasksData.lastTaskHeader) {\n      let header = Object.keys(this.context.tasksData.tasksData.lastTaskHeader);\n      return header.map((key, index) => {\n        //console.log(`this is the key: (${key}) and the index: (${index})`);\n\n        switch (key) {\n          case 'id':\n            return <th key={index}>Click to Delete</th>;\n            break;\n          case 'scheduleTask':\n            return <th key={index}>Schedule Task</th>;\n            break;\n          case 'category':\n            return <th key={index}>{key.toUpperCase()}</th>;\n            break;\n          case 'task':\n            return <th key={index}>{key.toUpperCase()}</th>;\n            break;\n\n          case 'deadline':\n            return <th key={index}>{key.toUpperCase()}</th>;\n            break;\n        }\n        // if (key === 'id') {\n        //   return <th key={index}>Click to Delete</th>;\n        // } else {\n        //   return <th key={index}>{key.toUpperCase()}</th>;\n        // }\n      });\n    }\n  }\n\n  allTasksHandler() {\n    return this.context.tasksData.tasksData.unAssignedTasksForWeek.map(\n      (task, index) => {\n        let functionChoiceDelete = null;\n        let functionChoiceChange = null;\n\n        //destructuring\n        // const { id, name, age, email } = student;\n        if (this.props.contentChoice === '1') {\n          functionChoiceDelete = '3';\n          functionChoiceChange = '4';\n        } else {\n          functionChoiceDelete = '5'; //for todayTasks\n          functionChoiceChange = '6'; //for todayTasks\n        }\n\n        return (\n          <Aux>\n            <ErrorBoundary key={task.id}>\n              <Task\n                key={task.id}\n                task={task.task}\n                deadline={task.deadline}\n                category={task.category}\n                particularKey={task.id}\n                scheduleTask={task.schedulTask}\n                click={event =>\n                  this.context.dataRequestHandler(\n                    event,\n                    'tasks',\n                    functionChoiceDelete,\n                    null,\n                    'index',\n                    index\n                  )\n                }\n                changed={event =>\n                  this.taskChangeHandler(\n                    event,\n\n                    task.id\n                  )\n                }\n              ></Task>\n            </ErrorBoundary>\n          </Aux>\n        );\n      }\n    );\n  }\n  //sendChangeRequestHandler = (event, functionChoiceDelete ) => {\n\n  //}\n\n  // static getDerivedStateFromProps(props, state) {\n  //     console.log('[Tasks] getDerivedStateFromProps')\n  //     return state\n  // }\n\n  //niche -removed\n  // componentWillReceiveProps(props) {\n  //    console.log('[Persons.js] componentWillReceiveProps', props);\n  // }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[Tasks] shouldComponentUpdate');\n    //comparing if props have changed\n    if (\n      nextProps.unAssignedTasksForWeek !==\n      this.context.tasksData.tasksData.unAssignedTasksForWeek\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('[Tasks] getSnapshotBeforeUpdate');\n    return { message: 'Snapshot' };\n  }\n\n  // componentWillUpdate() {\n  //     return\n  // }\n\n  componentDidUpdate(prevProps, prevState, message) {\n    console.log('[Tasks] componentDidUpdate');\n    console.log(message);\n  }\n\n  componentWillUnmount() {\n    console.log('[Tasks.js] componentWillUnmount');\n  }\n\n  dataRequestHandler = (event, a, b, c) => {\n    console.log('[Tasks] rendering...');\n\n    let currentValue = JSON.stringify(event.target.value, null, 2);\n    this.setState({\n      showMessageForEventValue: true,\n      targetValue: currentValue\n    });\n  };\n\n  static contextType = TasksContext;\n\n  render() {\n    //applying styling to text basing on amount of unscheduled Tasks\n    let workLoadStatus = null;\n    if (this.context.tasksData.tasksData.unAssignedTasksForWeek) {\n      switch (this.context.tasksData.tasksData.unAssignedTasksForWeek.length) {\n        case 1:\n          workLoadStatus = (\n            <p className={statusClasses.lightLoad}>\n              There are  \n              {this.context.tasksData.tasksData.unAssignedTasksForWeek.length}{' '}\n              unscheduled tasks for the Week.\n            </p>\n          );\n          break;\n        case 2:\n          workLoadStatus = (\n            <p className={statusClasses.mediumLoad}>\n              There are  \n              {this.context.tasksData.tasksData.unAssignedTasksForWeek.length}{' '}\n              unscheduled tasks for the Week.\n            </p>\n          );\n          break;\n        case 3:\n          workLoadStatus = (\n            <p className={statusClasses.heavyLoad}>\n              There are  \n              {this.context.tasksData.tasksData.unAssignedTasksForWeek.length}{' '}\n              unscheduled tasks for the Week.\n            </p>\n          );\n          break;\n      }\n    }\n\n    return (\n      <div>\n        {workLoadStatus}\n        <table id=\"students\">\n          <tbody>\n            <tr>{this.renderTableHeaderAllTasksHandler()}</tr>\n            {this.allTasksHandler()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nTasks.propTypes = {\n  //check to see if this.props.contentChoice passed  in is a string\n  contentChoice: PropTypes.string.isRequired\n};\nexport default Tasks;\n"]},"metadata":{},"sourceType":"module"}