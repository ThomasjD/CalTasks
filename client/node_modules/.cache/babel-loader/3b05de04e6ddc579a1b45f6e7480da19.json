{"ast":null,"code":"import { ViewTypes, CellUnits, DATE_FORMAT } from './index'; //getSummary func example\n\nexport const getSummary = (schedulerData, headerEvents, slotId, slotName, headerStart, headerEnd) => {\n  return {\n    text: 'Summary',\n    color: 'red',\n    fontSize: '1.2rem'\n  };\n}; //getCustomDate example\n\nexport const getCustomDate = (schedulerData, num, date = undefined) => {\n  const viewType = schedulerData.viewType;\n  let selectDate = schedulerData.startDate;\n  if (date != undefined) selectDate = date;\n  let startDate = num === 0 ? selectDate : schedulerData.localeMoment(selectDate).add(2 * num, 'days').format(DATE_FORMAT),\n      endDate = schedulerData.localeMoment(startDate).add(1, 'days').format(DATE_FORMAT),\n      cellUnit = CellUnits.Hour;\n\n  if (viewType === ViewTypes.Custom1) {\n    let monday = schedulerData.localeMoment(selectDate).startOf('week').format(DATE_FORMAT);\n    startDate = num === 0 ? monday : schedulerData.localeMoment(monday).add(2 * num, 'weeks').format(DATE_FORMAT);\n    endDate = schedulerData.localeMoment(startDate).add(1, 'weeks').endOf('week').format(DATE_FORMAT);\n    cellUnit = CellUnits.Day;\n  } else if (viewType === ViewTypes.Custom2) {\n    let firstDayOfMonth = schedulerData.localeMoment(selectDate).startOf('month').format(DATE_FORMAT);\n    startDate = num === 0 ? firstDayOfMonth : schedulerData.localeMoment(firstDayOfMonth).add(2 * num, 'months').format(DATE_FORMAT);\n    endDate = schedulerData.localeMoment(startDate).add(1, 'months').endOf('month').format(DATE_FORMAT);\n    cellUnit = CellUnits.Day;\n  }\n\n  return {\n    startDate,\n    endDate,\n    cellUnit\n  };\n}; //getNonAgendaViewBodyCellBgColor example\n\nexport const getNonAgendaViewBodyCellBgColor = (schedulerData, slotId, header) => {\n  if (!header.nonWorkingTime) {\n    return '#87e8de';\n  }\n\n  return undefined;\n}; //getDateLabel func example\n\nexport const getDateLabel = (schedulerData, viewType, startDate, endDate) => {\n  let start = schedulerData.localeMoment(startDate);\n  let end = schedulerData.localeMoment(endDate);\n  let dateLabel = start.format('MMM D, YYYY');\n\n  if (viewType === ViewTypes.Week || start != end && (viewType === ViewTypes.Custom || viewType === ViewTypes.Custom1 || viewType === ViewTypes.Custom2)) {\n    dateLabel = \"\".concat(start.format('MMM D'), \"-\").concat(end.format('D, YYYY'));\n    if (start.month() !== end.month()) dateLabel = \"\".concat(start.format('MMM D'), \"-\").concat(end.format('MMM D, YYYY'));\n    if (start.year() !== end.year()) dateLabel = \"\".concat(start.format('MMM D, YYYY'), \"-\").concat(end.format('MMM D, YYYY'));\n  } else if (viewType === ViewTypes.Month) {\n    dateLabel = start.format('MMMM YYYY');\n  } else if (viewType === ViewTypes.Quarter) {\n    dateLabel = \"\".concat(start.format('MMM D'), \"-\").concat(end.format('MMM D, YYYY'));\n  } else if (viewType === ViewTypes.Year) {\n    dateLabel = start.format('YYYY');\n  }\n\n  return dateLabel;\n};\nexport const getEventText = (schedulerData, event) => {\n  if (!schedulerData.isEventPerspective) return event.title;\n  let eventText = event.title;\n  schedulerData.resources.forEach(item => {\n    if (item.id === event.resourceId) {\n      eventText = item.name;\n    }\n  });\n  return eventText;\n};\nexport const getScrollSpecialMoment = (schedulerData, startMoment, endMoment) => {\n  // return endMoment;\n  const localeMoment = schedulerData.localeMoment;\n  return localeMoment();\n};\nexport const isNonWorkingTime = (schedulerData, time) => {\n  const localeMoment = schedulerData.localeMoment;\n\n  if (schedulerData.cellUnit === CellUnits.Hour) {\n    let hour = localeMoment(time).hour();\n    if (hour < 9 || hour > 18) return true;\n  } else {\n    let dayOfWeek = localeMoment(time).weekday();\n    if (dayOfWeek === 0 || dayOfWeek === 6) return true;\n  }\n\n  return false;\n};\nexport default {\n  //getSummaryFunc: getSummary,\n  getSummaryFunc: undefined,\n  //getCustomDateFunc: getCustomDate,\n  getCustomDateFunc: undefined,\n  // getNonAgendaViewBodyCellBgColorFunc: getNonAgendaViewBodyCellBgColor,\n  getNonAgendaViewBodyCellBgColorFunc: undefined,\n  getScrollSpecialMomentFunc: getScrollSpecialMoment,\n  getDateLabelFunc: getDateLabel,\n  getEventTextFunc: getEventText,\n  isNonWorkingTimeFunc: isNonWorkingTime\n};","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/src/behaviors.js"],"names":["ViewTypes","CellUnits","DATE_FORMAT","getSummary","schedulerData","headerEvents","slotId","slotName","headerStart","headerEnd","text","color","fontSize","getCustomDate","num","date","undefined","viewType","selectDate","startDate","localeMoment","add","format","endDate","cellUnit","Hour","Custom1","monday","startOf","endOf","Day","Custom2","firstDayOfMonth","getNonAgendaViewBodyCellBgColor","header","nonWorkingTime","getDateLabel","start","end","dateLabel","Week","Custom","month","year","Month","Quarter","Year","getEventText","event","isEventPerspective","title","eventText","resources","forEach","item","id","resourceId","name","getScrollSpecialMoment","startMoment","endMoment","isNonWorkingTime","time","hour","dayOfWeek","weekday","getSummaryFunc","getCustomDateFunc","getNonAgendaViewBodyCellBgColorFunc","getScrollSpecialMomentFunc","getDateLabelFunc","getEventTextFunc","isNonWorkingTimeFunc"],"mappings":"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","sourcesContent":["import {ViewTypes, CellUnits, DATE_FORMAT} from './index'\r\n\r\n//getSummary func example\r\nexport const getSummary = (schedulerData, headerEvents, slotId, slotName, headerStart, headerEnd) => {\r\n    return {text: 'Summary', color: 'red', fontSize: '1.2rem'};\r\n}\r\n\r\n//getCustomDate example\r\nexport const getCustomDate = (schedulerData, num, date = undefined) => {\r\n    const {viewType} = schedulerData;\r\n    let selectDate = schedulerData.startDate;\r\n    if(date != undefined)\r\n        selectDate = date;    \r\n    \r\n    let startDate = num === 0 ? selectDate : \r\n        schedulerData.localeMoment(selectDate).add(2*num, 'days').format(DATE_FORMAT),\r\n        endDate = schedulerData.localeMoment(startDate).add(1, 'days').format(DATE_FORMAT),\r\n        cellUnit = CellUnits.Hour;\r\n    if(viewType === ViewTypes.Custom1) {\r\n        let monday = schedulerData.localeMoment(selectDate).startOf('week').format(DATE_FORMAT);\r\n        startDate = num === 0 ? monday : schedulerData.localeMoment(monday).add(2*num, 'weeks').format(DATE_FORMAT);\r\n        endDate = schedulerData.localeMoment(startDate).add(1, 'weeks').endOf('week').format(DATE_FORMAT);\r\n        cellUnit = CellUnits.Day;\r\n    } else if(viewType === ViewTypes.Custom2) {\r\n        let firstDayOfMonth = schedulerData.localeMoment(selectDate).startOf('month').format(DATE_FORMAT);\r\n        startDate = num === 0 ? firstDayOfMonth : schedulerData.localeMoment(firstDayOfMonth).add(2*num, 'months').format(DATE_FORMAT);\r\n        endDate = schedulerData.localeMoment(startDate).add(1, 'months').endOf('month').format(DATE_FORMAT);\r\n        cellUnit = CellUnits.Day;\r\n    }\r\n        \r\n    return {\r\n        startDate,\r\n        endDate,\r\n        cellUnit\r\n    };\r\n}\r\n\r\n//getNonAgendaViewBodyCellBgColor example\r\nexport const getNonAgendaViewBodyCellBgColor = (schedulerData, slotId, header) => {\r\n    if(!header.nonWorkingTime) {\r\n        return '#87e8de';\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n//getDateLabel func example\r\nexport const getDateLabel = (schedulerData, viewType, startDate, endDate) => {\r\n    let start = schedulerData.localeMoment(startDate);\r\n    let end = schedulerData.localeMoment(endDate);\r\n    let dateLabel = start.format('MMM D, YYYY');\r\n\r\n    if(viewType === ViewTypes.Week || (start != end && (\r\n        viewType === ViewTypes.Custom || viewType === ViewTypes.Custom1 || viewType === ViewTypes.Custom2\r\n    ))) {\r\n        dateLabel = `${start.format('MMM D')}-${end.format('D, YYYY')}`;\r\n        if(start.month() !== end.month())\r\n            dateLabel = `${start.format('MMM D')}-${end.format('MMM D, YYYY')}`;\r\n        if(start.year() !== end.year())\r\n            dateLabel = `${start.format('MMM D, YYYY')}-${end.format('MMM D, YYYY')}`;\r\n    }\r\n    else if(viewType === ViewTypes.Month){\r\n        dateLabel = start.format('MMMM YYYY');\r\n    }\r\n    else if(viewType === ViewTypes.Quarter){\r\n        dateLabel = `${start.format('MMM D')}-${end.format('MMM D, YYYY')}`;\r\n    }\r\n    else if(viewType === ViewTypes.Year) {\r\n        dateLabel = start.format('YYYY');\r\n    }\r\n\r\n    return dateLabel;\r\n}\r\n\r\nexport const getEventText = (schedulerData, event) => {\r\n    if(!schedulerData.isEventPerspective) return event.title;\r\n\r\n    let eventText = event.title;\r\n    schedulerData.resources.forEach((item) => {\r\n        if(item.id === event.resourceId) {\r\n            eventText = item.name;\r\n        }\r\n    })\r\n\r\n    return eventText;\r\n}\r\n\r\nexport const getScrollSpecialMoment = (schedulerData, startMoment, endMoment) => {\r\n    // return endMoment;\r\n    const { localeMoment } = schedulerData;\r\n    return localeMoment();\r\n}\r\n\r\nexport const isNonWorkingTime = (schedulerData, time) => {\r\n    const { localeMoment } = schedulerData;\r\n    if(schedulerData.cellUnit === CellUnits.Hour){\r\n        let hour = localeMoment(time).hour();\r\n        if(hour < 9 || hour > 18)\r\n            return true;\r\n    }\r\n    else {\r\n        let dayOfWeek = localeMoment(time).weekday();\r\n        if (dayOfWeek === 0 || dayOfWeek === 6)\r\n            return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport default {\r\n    //getSummaryFunc: getSummary,\r\n    getSummaryFunc: undefined,\r\n    //getCustomDateFunc: getCustomDate,\r\n    getCustomDateFunc: undefined,\r\n    // getNonAgendaViewBodyCellBgColorFunc: getNonAgendaViewBodyCellBgColor,\r\n    getNonAgendaViewBodyCellBgColorFunc: undefined, \r\n    getScrollSpecialMomentFunc: getScrollSpecialMoment,\r\n    getDateLabelFunc: getDateLabel,\r\n    getEventTextFunc: getEventText,\r\n    isNonWorkingTimeFunc: isNonWorkingTime,\r\n}\r\n"]},"metadata":{},"sourceType":"module"}