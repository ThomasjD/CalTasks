{"ast":null,"code":"import _objectSpread from \"/Users/thomasjd/Desktop/caltask/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/containers/Store/CalendarData.js\";\nimport React, { Component } from 'react'; //import classes from '../../components/Cockpit/Cockpit.module.css';\n\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksContext from '../../context/tasksContext';\nimport DatePicker from 'react-datepicker';\nimport numToDay from '../../components/Calendar/numToDay'; //import * as moment from 'moment';\n\nimport { format, compareAsc } from 'date-fns';\n\nclass CalendarData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showChooseDate: false,\n      days: {}\n    };\n\n    this.createDayObjName = event => {\n      event.preventDefault();\n      alert('inside createDayObjName');\n      let day = this.state.startTimeDate.day;\n      let date = this.state.startTimeDate.toLocalString;\n      console.log(date);\n    };\n\n    this.newDayObj = () => {};\n\n    this.createDayObjName = () => {};\n  }\n\n  handleStartTimeDateChange(date) {\n    let currentShowStartTimeDate = this.state.showStartTimeDate;\n    let day = format(date, 'E');\n    let dateDigit = format(date, 'dd');\n    let year = format(date, 'yy');\n    let month = format(date, 'MM');\n    let dayObjName = year + month + dateDigit + day;\n    console.log(`day: ${day} type: ${typeof day}`);\n    console.log(`date: ${dateDigit} type: ${typeof dateDigit}`);\n    console.log(`year: ${year} type: ${typeof year}`);\n    console.log(`month: ${month} type: ${typeof month}`);\n    console.log(`dayObjName: ${dayObjName} type: ${typeof dayObjName}`); //dynamic keys use []\n\n    let currentDaysObj = _objectSpread({}, this.state.days, {\n      [dayObjName]: {\n        word: 'hello'\n      }\n    });\n\n    console.dir(currentDaysObj);\n    this.setState({\n      showStartTimeDate: !currentShowStartTimeDate,\n      startDate: date // startTimeDate: startTimeDate\n\n    }, () => console.log(day));\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(DatePicker, {\n      placeholderText: \"Choose Start Time\",\n      selected: this.state.startDate,\n      onChange: date => this.handleStartTimeDateChange(date),\n      showTimeSelect: true,\n      timeFormat: \"HH:mm\",\n      timeIntervals: 30,\n      timeCaption: \"Start\",\n      dateFormat: \"MMMM dd, yyyy\" //dateFormat=\"MMMM d, yyyy h:mm aa\"\n      //dateFormat=\"mm/dd/yyyy h:m aa\",\n      // format=\"mm/dd/yyyy\"\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default CalendarData;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/containers/Store/CalendarData.js"],"names":["React","Component","RightCockpit","TasksContext","DatePicker","numToDay","format","compareAsc","CalendarData","constructor","props","state","showChooseDate","days","createDayObjName","event","preventDefault","alert","day","startTimeDate","date","toLocalString","console","log","newDayObj","handleStartTimeDateChange","currentShowStartTimeDate","showStartTimeDate","dateDigit","year","month","dayObjName","currentDaysObj","word","dir","setState","startDate","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import classes from '../../components/Cockpit/Cockpit.module.css';\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksContext from '../../context/tasksContext';\nimport DatePicker from 'react-datepicker';\nimport numToDay from '../../components/Calendar/numToDay';\n//import * as moment from 'moment';\nimport { format, compareAsc } from 'date-fns';\nclass CalendarData extends Component {\n  constructor(props) {\n    super(props);\n\n    this.newDayObj = () => {};\n\n    this.createDayObjName = () => {};\n  }\n  state = {\n    showChooseDate: false,\n    days: {}\n  };\n\n  createDayObjName = event => {\n    event.preventDefault();\n    alert('inside createDayObjName');\n    let day = this.state.startTimeDate.day;\n\n    let date = this.state.startTimeDate.toLocalString;\n    console.log(date);\n  };\n\n  handleStartTimeDateChange(date) {\n    let currentShowStartTimeDate = this.state.showStartTimeDate;\n\n    let day = format(date, 'E');\n    let dateDigit = format(date, 'dd');\n    let year = format(date, 'yy');\n    let month = format(date, 'MM');\n    let dayObjName = year + month + dateDigit + day;\n\n    console.log(`day: ${day} type: ${typeof day}`);\n    console.log(`date: ${dateDigit} type: ${typeof dateDigit}`);\n    console.log(`year: ${year} type: ${typeof year}`);\n    console.log(`month: ${month} type: ${typeof month}`);\n    console.log(`dayObjName: ${dayObjName} type: ${typeof dayObjName}`);\n\n    //dynamic keys use []\n    let currentDaysObj = {\n      ...this.state.days,\n      [dayObjName]: {\n        word: 'hello'\n      }\n    };\n\n    console.dir(currentDaysObj);\n\n    this.setState(\n      {\n        showStartTimeDate: !currentShowStartTimeDate,\n        startDate: date\n        // startTimeDate: startTimeDate\n      },\n      () => console.log(day)\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <DatePicker\n            placeholderText=\"Choose Start Time\"\n            selected={this.state.startDate}\n            onChange={date => this.handleStartTimeDateChange(date)}\n            showTimeSelect\n            timeFormat=\"HH:mm\"\n            timeIntervals={30}\n            timeCaption=\"Start\"\n            dateFormat=\"MMMM dd, yyyy\"\n            //dateFormat=\"MMMM d, yyyy h:mm aa\"\n            //dateFormat=\"mm/dd/yyyy h:m aa\",\n            // format=\"mm/dd/yyyy\"\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default CalendarData;\n"]},"metadata":{},"sourceType":"module"}