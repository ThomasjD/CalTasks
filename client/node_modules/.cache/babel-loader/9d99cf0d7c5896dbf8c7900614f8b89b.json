{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport rocky from './App.module.css';\nimport Task from './Task/Task'; //import Radium, {StyleRoot} from 'radium';\n//import wtf from './SpecialBtn.module.css';\n\nimport classNames from 'classnames';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tasks: [{\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      }, {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      }, {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }],\n      maxReact: [{\n        id: 'xvlwil',\n        lesson: '90. Component Update Lifecycle (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbskk',\n        lesson: '91. Component Update Lifecycle (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      Monday: [{\n        id: 'al;ll',\n        taskTime: {\n          morning: '',\n          afternoon: '',\n          evening: ''\n        }\n      }],\n      Tuesday: [{\n        id: 'al;dl',\n        taskTime: {\n          morning: '',\n          afternoon: '',\n          evening: ''\n        }\n      }],\n      showTasks: false //show list of tasks\n\n    };\n\n    this.toggleShowTasksHandler = () => {\n      const doesShow = this.state.showTasks;\n      this.setState({\n        showTasks: !doesShow\n      });\n    };\n\n    this.deleteTaskhandler = taskIndex => {\n      //get tasks array\n      const tasks = [...this.state.tasks]; //splice task of interst\n\n      tasks.splice(taskIndex, 1); //update new list of tasks to state\n\n      this.setState({\n        tasks: tasks\n      });\n    };\n\n    this.deleteTaskUpdateStyleHandler = () => {};\n\n    this.taskChangeHandler = (event, taskChangedId) => {\n      //find the task that matches the taskChangedId\n      const foundTaskId = this.state.tasks.findIndex(currentId => {\n        return currentId.id === taskChangedId;\n      }); //create new task item that we will put into array\n\n      const updatedTask = _objectSpread({}, this.state.tasks[foundTaskId]);\n\n      updatedTask.todo = event.target.value; //pull out the states tasks array\n\n      const tasks = [...this.state.tasks]; //update the task with id of interest w/ new task description\n\n      tasks[foundTaskId] = updatedTask; //update the state\n\n      this.setState({\n        tasks: tasks\n      });\n    };\n  }\n\n  render() {\n    let displayTasks = null;\n    let btnClass = ''; //clicking on the show Tasks button to show available tasks\n\n    if (this.state.showTasks) {\n      displayTasks = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, this.state.tasks.map((task, index) => {\n        return React.createElement(Task, {\n          todo: task.todo,\n          deadline: task.deadline,\n          location: task.location,\n          click: () => this.deleteTaskhandler(index),\n          key: task.id,\n          changed: event => this.taskChangeHandler(event, task.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, \"Change Task (below)\");\n      }));\n      btnClass = rocky.specialbtn; //button turns red when <Tasks> are shown, when you can delete them (it overide style for hover)\n      //style.backgroundColor = 'red'\n    } else {\n      btnClass = rocky.button;\n    } //use switch case to determine color of button (depending on how many tasks left)\n    // console.log(classes)\n\n\n    let tasklength = this.state.tasks.length;\n    console.log(tasklength); //styling the 'Things to Do' using strings for classnames\n\n    const classes = [];\n\n    switch (this.state.tasks.length) {\n      case 3:\n        classes.push('bold', 'red');\n        break;\n\n      case 2:\n        classes.push('red');\n        break;\n\n      case 1:\n        classes.push('orange');\n        break;\n\n      default:\n        classes.push('green');\n        break;\n    }\n\n    console.log(classes[0]); //add multiple classes for <p> w/ strings\n    //const classesFinal = classes.join(' ')\n\n    const classesFinal = 'rocky.' + classes;\n    console.log(classesFinal);\n    console.log(\"This is classesFinal \".concat(classesFinal));\n    return (//<StyleRoot>\n      React.createElement(\"div\", {\n        className: rocky.App,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Medellin\"), React.createElement(\"p\", {\n        className: classNames({\n          [rocky[classes[0]]]: true,\n          [rocky[classes[1]]]: true\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Things to Do!\"), React.createElement(\"button\", {\n        className: btnClass,\n        onClick: this.toggleShowTasksHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Show Task\"), displayTasks) //</StyleRoot>\n\n    );\n  }\n\n} //<p>this class is {classes}</p>\n//export default Radium(App);\n\n\nexport default App; //<p className={rocky[classes]}>Things to Do!</p>\n//using css modules on multiple classNames \n//{classNames({[styles.foo]: true, [styles.bar]: true})}\n//<p className={classNames({[rocky[classes]]: true, [rocky.red]: true})}>Things to Do!</p>","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/App.js"],"names":["React","Component","rocky","Task","classNames","App","state","tasks","id","todo","deadline","location","maxReact","lesson","completion","Monday","taskTime","morning","afternoon","evening","Tuesday","showTasks","toggleShowTasksHandler","doesShow","setState","deleteTaskhandler","taskIndex","splice","deleteTaskUpdateStyleHandler","taskChangeHandler","event","taskChangedId","foundTaskId","findIndex","currentId","updatedTask","target","value","render","displayTasks","btnClass","map","task","index","specialbtn","button","tasklength","length","console","log","classes","push","classesFinal"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport rocky from './App.module.css';\nimport Task from './Task/Task'\n//import Radium, {StyleRoot} from 'radium';\n//import wtf from './SpecialBtn.module.css';\nimport classNames from 'classnames';\n\nclass App extends Component {\n  state = {\n    tasks: [\n      {id: 'qrwrwq', todo: 'Find work', deadline : 'Lunes', location: 'Poplado'},\n      {id: 'egewhw', todo: 'buy shoes', deadline : 'Martes', location: 'Floresta'},\n      {id: 'asfasv', todo: 'mail package', deadline : 'Jueves', location: 'Laureles'}\n    ],\n    maxReact: [\n      {id: 'xvlwil', lesson: '90. Component Update Lifecycle (for props Changes)', completion: false },\n      {id: 'bbbskk', lesson: '91. Component Update Lifecycle (for state Changes)', completion: false },\n      {id: 'kjhck2', lesson: '92. Using useEffect() in Functional Components ', completion: false },   \n    ],\n    Monday: [\n      {id: 'al;ll', taskTime: {morning: '', afternoon: '', evening: ''}}\n    ],\n    Tuesday: [\n      {id: 'al;dl', taskTime: {morning: '', afternoon: '', evening: ''}}\n    ],\n    \n        \n    showTasks: false\n\n  }\n\n  //show list of tasks\n  toggleShowTasksHandler = () => {\n    const doesShow = this.state.showTasks;\n    this.setState({showTasks: !doesShow}) \n    }\n\n  //delete a task \n  deleteTaskhandler = (taskIndex) => {\n    //get tasks array\n    const tasks = [...this.state.tasks];  \n    //splice task of interst\n    tasks.splice(taskIndex, 1);\n    //update new list of tasks to state\n    this.setState({tasks : tasks})\n  }\n\n  deleteTaskUpdateStyleHandler = () => {\n    \n  }\n\n  taskChangeHandler = (event, taskChangedId) => {\n    //find the task that matches the taskChangedId\n    const foundTaskId = this.state.tasks.findIndex(currentId => {\n      return currentId.id === taskChangedId\n    })\n\n    //create new task item that we will put into array\n    const updatedTask = {...this.state.tasks[foundTaskId]}\n    updatedTask.todo = event.target.value\n\n    //pull out the states tasks array\n    const tasks = [...this.state.tasks]\n    \n    //update the task with id of interest w/ new task description\n    tasks[foundTaskId] = updatedTask\n    \n    //update the state\n    this.setState({tasks: tasks})\n    }\n\n\n  render() {\n\n  \n    \n    let displayTasks = null;\n    let btnClass = '';\n\n    //clicking on the show Tasks button to show available tasks\n    if (this.state.showTasks) {\n      displayTasks = (\n        <div>\n        {this.state.tasks.map((task, index) => {\n          return <Task \n          todo = {task.todo} \n          deadline = {task.deadline}\n          location = {task.location}\n          click = {() => this.deleteTaskhandler(index)}\n          key = {task.id}\n          changed = {(event) => this.taskChangeHandler (event, task.id)}>Change Task (below)</Task>\n        })}  \n      </div>\n      )\n      btnClass = rocky.specialbtn \n      //button turns red when <Tasks> are shown, when you can delete them (it overide style for hover)\n      //style.backgroundColor = 'red'\n    } else {\n      btnClass = rocky.button\n    }\n\n    //use switch case to determine color of button (depending on how many tasks left)\n    // console.log(classes)\n     let tasklength = this.state.tasks.length\n\n     console.log(tasklength)\n//styling the 'Things to Do' using strings for classnames\n     const classes = [];\n\n    switch (this.state.tasks.length) {\n      case (3): \n        classes.push('bold', 'red')\n         break\n      case (2): \n         classes.push('red')\n         break\n      case (1):\n         classes.push('orange')\n         break\n      default: \n      classes.push('green')\n       break\n    }\n    \n    console.log(classes[0])\n\n    \n\n    //add multiple classes for <p> w/ strings\n      //const classesFinal = classes.join(' ')\n      const classesFinal = 'rocky.' + classes\n    console.log(classesFinal)\n    \n    console.log(`This is classesFinal ${classesFinal}`)\n    return (\n     //<StyleRoot>\n      <div className={rocky.App}>\n        <h1>Medellin</h1>\n       <p className={classNames({[rocky[classes[0]]]: true, [rocky[classes[1]]]: true})}>Things to Do!</p>\n\n        \n\n        <button \n          className = {btnClass}\n          onClick = {this.toggleShowTasksHandler}>Show Task</button>\n        {displayTasks}\n        \n        \n      </div>\n      //</StyleRoot>\n    );\n    \n  }\n}\n//<p>this class is {classes}</p>\n//export default Radium(App);\nexport default App\n//<p className={rocky[classes]}>Things to Do!</p>\n\n\n\n//using css modules on multiple classNames \n//{classNames({[styles.foo]: true, [styles.bar]: true})}\n//<p className={classNames({[rocky[classes]]: true, [rocky.red]: true})}>Things to Do!</p>"]},"metadata":{},"sourceType":"module"}