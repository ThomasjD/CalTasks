{"ast":null,"code":"import _objectSpread from \"/Users/thomasjd/Desktop/caltask/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/Creation/WeeklyTimeBudget/WeeklyTimeBudget.js\";\nimport React, { Component } from 'react';\nimport DailyTimeBudget from '../DailyTimeBudget/DailyTimeBudget';\nimport classes from './WeeklyTimeBudget.module.css'; //hygiene, traveling, packing,wating\n//each day have a predetermined amt of time for each category\n//then each day you can balance it according to 24 hours\n//after balancing for each day, you have to go back to balance the weekly total\n//24 hours a day //broken down into .5 hour\n//\n\nclass weeklyTimeBudget extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addHourToActivity = activity => {\n      let activityWeekCategories = _objectSpread({}, this.state.activityWeekCategories);\n\n      let currentTotalHourCount = activityWeekCategories.totalHours;\n      let currentActivityHourCount = activityWeekCategories[activity]; //const [[activity], totalHours] = {...this.state.activityWeekCategories}\n\n      let updatedTotalHourCount = currentTotalHourCount + 1;\n      activityWeekCategories.totalHours = updatedTotalHourCount;\n      let updatedActivityHourCount = currentActivityHourCount + 1;\n      activityWeekCategories[activity] = updatedActivityHourCount; //upgrade the ingredients count when adding more\n      // const updatedWeeklyBudget = {\n      //   ...this.state.weeklyBudget\n      // };\n\n      this.setState({\n        activityWeekCategories: activityWeekCategories\n      }); // //cost for 1 new ingredient aded\n      // const hourAddition = INGREDIENT_PRICES[activity];\n      // //Calculate the new price after new ingredient added\n      // const oldTotalWeekHours= this.state.totalWeekHours;\n      // const newPrice = oldPrice + priceAddition;\n      //upgrade the ingredients count & total price when adding more\n      //this.setState({ ingredients: updatedHourCount }); //ingredients now contains updated unit # of ingrediant just added\n      //pass in the new ingredients list so that it can calculate the total price\n      //this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.deductHourToActivity = activity => {};\n\n    this.thisWeek = new DailyTimeBudget();\n    this.state = {\n      activityWeekCategories: this.thisWeek.activityWeekCategories\n    };\n  } // state = {\n  //   totalWeekHours: 168,\n  //   hoursPerDay: 24,\n  //   weeklyBudget: {\n  //     sleep: 7,\n  //     exercise: 7,\n  //     work: 49,\n  //     free: 7,\n  //     errands: 14,\n  //     getReady: 28,\n  //     totalHours: 168\n  //   }\n  // };\n\n\n  render() {\n    let displayDailyTimeBudget = null;\n    console.log(Object.keys(this.state.activityWeekCategories));\n    displayDailyTimeBudget = Object.keys(this.state.activityWeekCategories).map(eachCategory => React.createElement(DailyTimeBudget, {\n      key: eachCategory.concat(eachCategory),\n      activity: eachCategory,\n      hours: this.state.activityWeekCategories[eachCategory],\n      decrease: this.deductHourToActivity(eachCategory),\n      add: this.addHourToActivity(eachCategory),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: classes.WeeklyTimeBudget,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, displayDailyTimeBudget);\n  }\n\n}\n\nexport default weeklyTimeBudget; // Monday: {},\n//   Tuesday: {},\n//   Wednesday: {},\n//   Thursday: {},\n//   Friday: {},\n//   Saturday: {},\n//   Sunday: {},","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/Creation/WeeklyTimeBudget/WeeklyTimeBudget.js"],"names":["React","Component","DailyTimeBudget","classes","weeklyTimeBudget","constructor","props","addHourToActivity","activity","activityWeekCategories","state","currentTotalHourCount","totalHours","currentActivityHourCount","updatedTotalHourCount","updatedActivityHourCount","setState","deductHourToActivity","thisWeek","render","displayDailyTimeBudget","console","log","Object","keys","map","eachCategory","concat","WeeklyTimeBudget"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,OAAP,MAAoB,+BAApB,C,CAEA;AAEA;AACA;AACA;AAEA;AACA;;AACA,MAAMC,gBAAN,SAA+BH,SAA/B,CAAyC;AACvCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAwBnBC,iBAxBmB,GAwBCC,QAAQ,IAAI;AAC9B,UAAIC,sBAAsB,qBAAQ,KAAKC,KAAL,CAAWD,sBAAnB,CAA1B;;AACA,UAAIE,qBAAqB,GAAGF,sBAAsB,CAACG,UAAnD;AACA,UAAIC,wBAAwB,GAAGJ,sBAAsB,CAACD,QAAD,CAArD,CAH8B,CAK9B;;AACA,UAAIM,qBAAqB,GAAGH,qBAAqB,GAAG,CAApD;AACAF,MAAAA,sBAAsB,CAACG,UAAvB,GAAoCE,qBAApC;AACA,UAAIC,wBAAwB,GAAGF,wBAAwB,GAAG,CAA1D;AACAJ,MAAAA,sBAAsB,CAACD,QAAD,CAAtB,GAAmCO,wBAAnC,CAT8B,CAW9B;AACA;AACA;AACA;;AAEA,WAAKC,QAAL,CAAc;AAAEP,QAAAA,sBAAsB,EAAEA;AAA1B,OAAd,EAhB8B,CAkB9B;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACD,KAtDkB;;AAAA,SAuDnBQ,oBAvDmB,GAuDIT,QAAQ,IAAI,CAAE,CAvDlB;;AAEjB,SAAKU,QAAL,GAAgB,IAAIhB,eAAJ,EAAhB;AAEA,SAAKQ,KAAL,GAAa;AACXD,MAAAA,sBAAsB,EAAE,KAAKS,QAAL,CAAcT;AAD3B,KAAb;AAGD,GARsC,CAUvC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAmCAU,EAAAA,MAAM,GAAG;AACP,QAAIC,sBAAsB,GAAG,IAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,IAAP,CAAY,KAAKd,KAAL,CAAWD,sBAAvB,CAAZ;AAEAW,IAAAA,sBAAsB,GAAGG,MAAM,CAACC,IAAP,CACvB,KAAKd,KAAL,CAAWD,sBADY,EAEvBgB,GAFuB,CAEnBC,YAAY,IAChB,oBAAC,eAAD;AACE,MAAA,GAAG,EAAEA,YAAY,CAACC,MAAb,CAAoBD,YAApB,CADP;AAEE,MAAA,QAAQ,EAAEA,YAFZ;AAGE,MAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWD,sBAAX,CAAkCiB,YAAlC,CAHT;AAIE,MAAA,QAAQ,EAAE,KAAKT,oBAAL,CAA0BS,YAA1B,CAJZ;AAKE,MAAA,GAAG,EAAE,KAAKnB,iBAAL,CAAuBmB,YAAvB,CALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHuB,CAAzB;AAYA,WACE;AAAK,MAAA,SAAS,EAAEvB,OAAO,CAACyB,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2CR,sBAA3C,CADF;AAGD;;AA7EsC;;AAgFzC,eAAehB,gBAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport DailyTimeBudget from '../DailyTimeBudget/DailyTimeBudget';\nimport classes from './WeeklyTimeBudget.module.css';\n\n//hygiene, traveling, packing,wating\n\n//each day have a predetermined amt of time for each category\n//then each day you can balance it according to 24 hours\n//after balancing for each day, you have to go back to balance the weekly total\n\n//24 hours a day //broken down into .5 hour\n//\nclass weeklyTimeBudget extends Component {\n  constructor(props) {\n    super(props);\n    this.thisWeek = new DailyTimeBudget();\n\n    this.state = {\n      activityWeekCategories: this.thisWeek.activityWeekCategories\n    };\n  }\n\n  // state = {\n  //   totalWeekHours: 168,\n\n  //   hoursPerDay: 24,\n  //   weeklyBudget: {\n  //     sleep: 7,\n  //     exercise: 7,\n  //     work: 49,\n  //     free: 7,\n  //     errands: 14,\n  //     getReady: 28,\n  //     totalHours: 168\n  //   }\n  // };\n\n  addHourToActivity = activity => {\n    let activityWeekCategories = { ...this.state.activityWeekCategories };\n    let currentTotalHourCount = activityWeekCategories.totalHours;\n    let currentActivityHourCount = activityWeekCategories[activity];\n\n    //const [[activity], totalHours] = {...this.state.activityWeekCategories}\n    let updatedTotalHourCount = currentTotalHourCount + 1;\n    activityWeekCategories.totalHours = updatedTotalHourCount;\n    let updatedActivityHourCount = currentActivityHourCount + 1;\n    activityWeekCategories[activity] = updatedActivityHourCount;\n\n    //upgrade the ingredients count when adding more\n    // const updatedWeeklyBudget = {\n    //   ...this.state.weeklyBudget\n    // };\n\n    this.setState({ activityWeekCategories: activityWeekCategories });\n\n    // //cost for 1 new ingredient aded\n    // const hourAddition = INGREDIENT_PRICES[activity];\n\n    // //Calculate the new price after new ingredient added\n    // const oldTotalWeekHours= this.state.totalWeekHours;\n    // const newPrice = oldPrice + priceAddition;\n\n    //upgrade the ingredients count & total price when adding more\n    //this.setState({ ingredients: updatedHourCount }); //ingredients now contains updated unit # of ingrediant just added\n    //pass in the new ingredients list so that it can calculate the total price\n\n    //this.updatePurchaseState(updatedIngredients);\n  };\n  deductHourToActivity = activity => {};\n\n  render() {\n    let displayDailyTimeBudget = null;\n    console.log(Object.keys(this.state.activityWeekCategories));\n\n    displayDailyTimeBudget = Object.keys(\n      this.state.activityWeekCategories\n    ).map(eachCategory => (\n      <DailyTimeBudget\n        key={eachCategory.concat(eachCategory)}\n        activity={eachCategory}\n        hours={this.state.activityWeekCategories[eachCategory]}\n        decrease={this.deductHourToActivity(eachCategory)}\n        add={this.addHourToActivity(eachCategory)}\n      />\n    ));\n\n    return (\n      <div className={classes.WeeklyTimeBudget}>{displayDailyTimeBudget}</div>\n    );\n  }\n}\n\nexport default weeklyTimeBudget;\n\n// Monday: {},\n//   Tuesday: {},\n//   Wednesday: {},\n//   Thursday: {},\n//   Friday: {},\n//   Saturday: {},\n//   Sunday: {},\n"]},"metadata":{},"sourceType":"module"}