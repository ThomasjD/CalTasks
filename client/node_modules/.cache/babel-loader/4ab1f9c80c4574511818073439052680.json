{"ast":null,"code":"import _objectSpread from \"/Users/thomasjd/Desktop/caltask/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/containers/Store/EventsData.js\";\nimport React, { Component } from 'react';\nimport StoreContext from '../../context/StoreDataContext';\n\nclass EventsData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentMonthEvents: ['hello', 'there'],\n      afterCurrentMonthEvents: {}\n    };\n\n    this.newEventHandler = () => {\n      //console.log(this.state.currentMonthEvents[1]);\n      console.log(typeof this.state.currentMonthEvents);\n      let newEvent = this.context.dataRequestDetails.value; //currentMonthEvents kept in array\n\n      if (newEvent.eventStartTimeDate.numDaysFromCurrentDay < 31) {\n        let currentMonthEvents = this.state.currentMonthEvents;\n        console.log(typeof currentMonthEvents);\n        currentMonthEvents.push(newEvent);\n        console.log(currentMonthEvents);\n        this.setState({\n          currentMonthEvents: currentMonthEvents\n        }, () => this.sendToCalendarData(newEvent));\n      } else {\n        let afterMonthEvents = this.state.afterCurrentMonthEvents;\n\n        let afterCurrentMonthEventsObj = _objectSpread({}, afterMonthEvents, {\n          [newEvent.eventId]: newEvent\n        });\n\n        this.setState({\n          afterCurrentMonthEvents: afterCurrentMonthEventsObj\n        }, () => this.sendToCalendarData(newEvent));\n      } //send to calendarData\n\n    };\n\n    this.sendToCalendarData = newEvent => {\n      let dataRequestMessage = {\n        //if task/event scheduled on calendar\n        typeOfData: 'CalendarData',\n        handlerChoice: '1',\n        dataLocation: newEvent.dayObjName,\n        infoType: 'newEvent',\n        info: newEvent\n      };\n      let event = null;\n      this.context.dataRequestHandler(event, dataRequestMessage);\n    };\n  }\n\n  render() {\n    if (this.context.dataRequestDetails.typeOfData === 'EventsData') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          //newEvent\n          this.context.resetHandlerChoice(this.newEventHandler());\n          break;\n      }\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    });\n  }\n\n}\n\nEventsData.contextType = StoreContext;\nexport default EventsData; //properties for newEvent\n// eventId: '',\n// eventTitle: '',\n// eventNote: '',\n// eventCategory: '',\n// eventStartTimeDate: '',\n// eventFinishTimeDate: '',\n// //later: If one-day event\n// eventDuration: '',\n// //Later:\n// //T -> schedule it on calendarData\n// //F--> put into unScheduledEventsList for that day\n// blockOffTimeSlot: false,\n// showStartTimeDate: false,\n// showFinishTimeDate: false,\n// eventDeadline: '',\n// //later: show multiday non-continous event\n// showMultidayNonContinousDate: false","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/containers/Store/EventsData.js"],"names":["React","Component","StoreContext","EventsData","constructor","props","state","currentMonthEvents","afterCurrentMonthEvents","newEventHandler","console","log","newEvent","context","dataRequestDetails","value","eventStartTimeDate","numDaysFromCurrentDay","push","setState","sendToCalendarData","afterMonthEvents","afterCurrentMonthEventsObj","eventId","dataRequestMessage","typeOfData","handlerChoice","dataLocation","dayObjName","infoType","info","event","dataRequestHandler","render","resetHandlerChoice","contextType"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,gCAAzB;;AACA,MAAMC,UAAN,SAAyBF,SAAzB,CAAmC;AACjCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAGnBC,KAHmB,GAGX;AACNC,MAAAA,kBAAkB,EAAE,CAAC,OAAD,EAAU,OAAV,CADd;AAENC,MAAAA,uBAAuB,EAAE;AAFnB,KAHW;;AAAA,SAQnBC,eARmB,GAQD,MAAM;AACtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAO,KAAKL,KAAL,CAAWC,kBAA9B;AACA,UAAIK,QAAQ,GAAG,KAAKC,OAAL,CAAaC,kBAAb,CAAgCC,KAA/C,CAHsB,CAItB;;AACA,UAAIH,QAAQ,CAACI,kBAAT,CAA4BC,qBAA5B,GAAoD,EAAxD,EAA4D;AAC1D,YAAIV,kBAAkB,GAAG,KAAKD,KAAL,CAAWC,kBAApC;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAOJ,kBAAnB;AACAA,QAAAA,kBAAkB,CAACW,IAAnB,CAAwBN,QAAxB;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAYJ,kBAAZ;AACA,aAAKY,QAAL,CACE;AACEZ,UAAAA,kBAAkB,EAAEA;AADtB,SADF,EAIE,MAAM,KAAKa,kBAAL,CAAwBR,QAAxB,CAJR;AAMD,OAXD,MAWO;AACL,YAAIS,gBAAgB,GAAG,KAAKf,KAAL,CAAWE,uBAAlC;;AACA,YAAIc,0BAA0B,qBACzBD,gBADyB;AAE5B,WAACT,QAAQ,CAACW,OAAV,GAAoBX;AAFQ,UAA9B;;AAIA,aAAKO,QAAL,CACE;AACEX,UAAAA,uBAAuB,EAAEc;AAD3B,SADF,EAIE,MAAM,KAAKF,kBAAL,CAAwBR,QAAxB,CAJR;AAMD,OA5BqB,CA6BtB;;AACD,KAtCkB;;AAAA,SAwCnBQ,kBAxCmB,GAwCER,QAAQ,IAAI;AAC/B,UAAIY,kBAAkB,GAAG;AACvB;AACAC,QAAAA,UAAU,EAAE,cAFW;AAGvBC,QAAAA,aAAa,EAAE,GAHQ;AAIvBC,QAAAA,YAAY,EAAEf,QAAQ,CAACgB,UAJA;AAKvBC,QAAAA,QAAQ,EAAE,UALa;AAMvBC,QAAAA,IAAI,EAAElB;AANiB,OAAzB;AAQA,UAAImB,KAAK,GAAG,IAAZ;AACA,WAAKlB,OAAL,CAAamB,kBAAb,CAAgCD,KAAhC,EAAuCP,kBAAvC;AACD,KAnDkB;AAElB;;AAkDDS,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKpB,OAAL,CAAaC,kBAAb,CAAgCW,UAAhC,KAA+C,YAAnD,EAAiE;AAC/D,cAAQ,KAAKZ,OAAL,CAAaC,kBAAb,CAAgCY,aAAxC;AACE,aAAK,GAAL;AAAU;AACR,eAAKb,OAAL,CAAaqB,kBAAb,CAAgC,KAAKzB,eAAL,EAAhC;AACA;AAHJ;AAKD;;AACD,WAAO,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AA9DgC;;AAA7BN,U,CAQGgC,W,GAAcjC,Y;AAwDvB,eAAeC,UAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport StoreContext from '../../context/StoreDataContext';\nclass EventsData extends Component {\n  constructor(props) {\n    super(props);\n  }\n  state = {\n    currentMonthEvents: ['hello', 'there'],\n    afterCurrentMonthEvents: {}\n  };\n  static contextType = StoreContext;\n  newEventHandler = () => {\n    //console.log(this.state.currentMonthEvents[1]);\n    console.log(typeof this.state.currentMonthEvents);\n    let newEvent = this.context.dataRequestDetails.value;\n    //currentMonthEvents kept in array\n    if (newEvent.eventStartTimeDate.numDaysFromCurrentDay < 31) {\n      let currentMonthEvents = this.state.currentMonthEvents;\n      console.log(typeof currentMonthEvents);\n      currentMonthEvents.push(newEvent);\n      console.log(currentMonthEvents);\n      this.setState(\n        {\n          currentMonthEvents: currentMonthEvents\n        },\n        () => this.sendToCalendarData(newEvent)\n      );\n    } else {\n      let afterMonthEvents = this.state.afterCurrentMonthEvents;\n      let afterCurrentMonthEventsObj = {\n        ...afterMonthEvents,\n        [newEvent.eventId]: newEvent\n      };\n      this.setState(\n        {\n          afterCurrentMonthEvents: afterCurrentMonthEventsObj\n        },\n        () => this.sendToCalendarData(newEvent)\n      );\n    }\n    //send to calendarData\n  };\n  //send to calendarData on unblockedTime\n  sendToCalendarData = newEvent => {\n    let dataRequestMessage = {\n      //if task/event scheduled on calendar\n      typeOfData: 'CalendarData',\n      handlerChoice: '1',\n      dataLocation: newEvent.dayObjName,\n      infoType: 'newEvent',\n      info: newEvent\n    };\n    let event = null;\n    this.context.dataRequestHandler(event, dataRequestMessage);\n  };\n  render() {\n    if (this.context.dataRequestDetails.typeOfData === 'EventsData') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1': //newEvent\n          this.context.resetHandlerChoice(this.newEventHandler());\n          break;\n      }\n    }\n    return <React.Fragment></React.Fragment>;\n  }\n}\nexport default EventsData;\n//properties for newEvent\n// eventId: '',\n// eventTitle: '',\n// eventNote: '',\n// eventCategory: '',\n// eventStartTimeDate: '',\n// eventFinishTimeDate: '',\n// //later: If one-day event\n// eventDuration: '',\n// //Later:\n// //T -> schedule it on calendarData\n// //F--> put into unScheduledEventsList for that day\n// blockOffTimeSlot: false,\n// showStartTimeDate: false,\n// showFinishTimeDate: false,\n// eventDeadline: '',\n// //later: show multiday non-continous event\n// showMultidayNonContinousDate: false\n"]},"metadata":{},"sourceType":"module"}