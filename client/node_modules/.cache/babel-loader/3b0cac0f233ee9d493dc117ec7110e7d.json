{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/Creation/NewEvent.js\";\nimport React, { Component } from 'react';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport ReactDatePicker from '../Calendar/ReactDatePicker'; //import RightCockpitContext from '../../context/RightCockpitContext';\n\nimport TasksDataContext from '../../context/tasksContext';\nimport Icon from '../Calendar/Icon';\nimport { Form, Input, FormGroup, Container, Label } from 'reactstrap';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\nimport { fi } from 'date-fns/locale';\n\nclass NewEvent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      eventId: 'ri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time',\n      eventTitle: 'Mavs vs Lakers',\n      eventNote: 'watch on TnT',\n      eventCategory: 'leisure',\n      startTimeDate: {\n        date: 31,\n        dateObjectString: 'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n        toISOString: '2020-01-31T13:00:00.000Z',\n        toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n        toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n        dateString: 'Fri Jan 31 2020',\n        timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n        year: 2020,\n        yearShort: 120,\n        month: 0,\n        day: 5,\n        time: '8:00:00 AM',\n        hour: 8,\n        minute: 0,\n        UTCDate: 31,\n        toLocalString: '1/31/2020, 8:00:00 AM',\n        toLocalDateString: '1/31/2020',\n        toLocaleTimeString: '8:00:00 AM'\n      },\n      finishTimeDate: '',\n      eventDuration: '',\n      //\n      blockOffTimeSlot: false,\n      showStartTimeDate: false,\n      showFinishTimeDate: false,\n      deadline: ''\n    };\n\n    this.newEventHandler = (event, info) => {\n      //let contentchoice = event.target.value;\n      let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n      let handlerChoice = ''; //string: '#' handler inside of database\n\n      let dataLocation = ''; // string: where obj found inside database\n\n      let infoType = ''; //string: index/id/\n      //let info = ''; //string: actual info\n      // let value = '';\n\n      let dataRequestMessage = {};\n      alert(`dataRequestMessage: ${dataRequestMessage}`);\n\n      switch (this.props.contentChoice) {\n        case '5':\n          alert('case 5');\n          typeOfData = 'events';\n          handlerChoice = '1';\n          dataLocation = '';\n          infoType = 'id'; //info = '';\n\n          break;\n\n        case '4':\n          break;\n\n        case '5':\n          break;\n\n        case '6':\n          break;\n      }\n\n      dataRequestMessage = {\n        typeOfData: typeOfData,\n        handlerChoice: handlerChoice,\n        dataLocation: dataLocation,\n        infoType: infoType,\n        info: info\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage);\n    };\n\n    this.startDatehandler = event => {\n      let date = {\n        date: 31,\n        dateObjectString: 'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n        toISOString: '2020-01-31T13:00:00.000Z',\n        toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n        toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n        dateString: 'Fri Jan 31 2020',\n        timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n        year: 2020,\n        yearShort: 120,\n        month: 0,\n        day: 5,\n        time: '8:00:00 AM',\n        hour: 8,\n        minute: 0,\n        UTCDate: 31,\n        toLocalString: '1/31/2020, 8:00:00 AM',\n        toLocalDateString: '1/31/2020',\n        toLocaleTimeString: '8:00:00 AM'\n      };\n      let dataRequestMessage = {\n        typeOfData: 'events',\n        handlerChoice: '1',\n        dataLocation: 'Thursday',\n        infoType: 'pickedDayTasks',\n        info: this.state\n      };\n      this.setState({\n        startTimeDate: date\n      }, event => this.context.dataRequestHandler(event, dataRequestMessage));\n    };\n\n    this.onSubmit = event => {\n      event.preventDefault();\n      let dataRequestMessage = {\n        typeOfData: 'events',\n        handlerChoice: '1',\n        dataLocation: 'Thursday',\n        infoType: 'pickedDayTasks',\n        info: this.state\n      };\n      this.resetState(event => this.context.dataRequestHandler(event, dataRequestMessage)); //alert(`contentView: ${this.props.contentChoice}`);\n      // this.setState({ blue: 'blue' }, event =>\n      //   this.context.dataRequestHandler(\n      //     event,\n      //     typeOfData,\n      //     handlerChoice,\n      //     infoType,\n      //     info\n      //   )\n      // );{\n      //this.startDatehandler(event);\n      //this.resetState();\n      //let dataLocation = this.state.startTimeDate.day;\n      // alert(`inside day2 roughing it: ${date2.day}`);\n      // let findDay = '';\n      // switch (date2.day) {\n      //   case 1:\n      //     findDay = 'Monday';\n      //     break;\n      //   case 2:\n      //     findDay = 'Tuesday';\n      //     break;\n      //   case 3:\n      //     findDay = 'Wednesday';\n      //     break;\n      //   case 4:\n      //     findDay = 'Thursday';\n      //     break;\n      //   case 5:\n      //     findDay = 'Friday';\n      //     break;\n      //   case 6:\n      //     findDay = 'Saturday';\n      //     break;\n      //   case 0:\n      //     findDay = 'Sunday';\n      //     break;\n      // }\n      // let typeOfData = 'tasks';\n      // let handlerChoice = '10';\n      // let dataLocation = 'Friday';\n      // let infoType = 'newEvent';\n      // let info = this.state;\n      // let dataRequestMessage = {\n      //   typeOfData: 'events',\n      //   handlerChoice: '1',\n      //   dataLocation: 'Thursday',\n      //   infoType: 'pickedDayTasks',\n      //   info: this.state\n      // };\n      // dataRequestMessage = {\n      //   typeOfData: typeOfData,\n      //   handlerChoice: handlerChoice,\n      //   dataLocation: dataLocation,\n      //   infoType: infoType,\n      //   info: info\n      // };\n      //  alert(\n      //       `inside NewEvent dataRequestMessage.dataLocation: ${dataRequestMessage.dataLocation}`\n      //     );\n      // this.context.dataRequestHandler(event, dataRequestMessage);\n      // alert(\n      //   `dataRequestMessage.info.eventTitle ${dataRequestMessage.info.eventTitle}`\n      // );\n      // this.resetState(event =>\n      //   this.context.dataRequestHandler(event, dataRequestMessage)\n      // );\n      // this.resetState(event =>\n      //   this.context.dataRequestHandler(event, dataRequestMessage)\n      // );\n    };\n\n    this.resetState = () => {\n      //event.preventDefault();\n      // event.preventDefault();\n      let dataRequestMessage = {\n        typeOfData: 'tasks',\n        handlerChoice: '9',\n        dataLocation: 'Thursday',\n        infoType: 'pickedDayTasks',\n        info: ''\n      };\n      let contentChoiceObj = {\n        target: {\n          value: '0'\n        }\n      };\n      this.setState({\n        showStartTimeDate: true\n      }, event => this.context.dataRequestHandler(event, dataRequestMessage)); // this.setState(\n      //   {\n      //     eventId: '', //task + date + start time\n      //     eventTitle: '',\n      //     eventNote: '',\n      //     eventCategory: '',\n      //     //required\n      //     startTimeDate: '',\n      //     finishTimeDate: '',\n      //     showStartTimeDate: false,\n      //     showFinishTimeDate: false,\n      //     deadline: '',\n      //     eventDuration: '', //\n      //     blockOffTimeSlot: ''\n      //   },\n      //   event => this.context.dataRequestHandler(event, dataRequestMessage)\n      // );\n\n      this.props.contentViewHandler(contentChoiceObj); // //let dataLocation = this.state.startTimeDate.day;\n      // alert(`inside day2 roughing it: ${date2.day}`);\n      // let findDay = '';\n      // switch (date2.day) {\n      //   case 1:\n      //     findDay = 'Monday';\n      //     break;\n      //   case 2:\n      //     findDay = 'Tuesday';\n      //     break;\n      //   case 3:\n      //     findDay = 'Wednesday';\n      //     break;\n      //   case 4:\n      //     findDay = 'Thursday';\n      //     break;\n      //   case 5:\n      //     findDay = 'Friday';\n      //     break;\n      //   case 6:\n      //     findDay = 'Saturday';\n      //     break;\n      //   case 0:\n      //     findDay = 'Sunday';\n      //     break;\n      // }\n      // let dataRequestMessage = {\n      //   typeOfData: 'tasks',\n      //   handlerChoice: '',\n      //   dataLocation: findDay,\n      //   infoType: 'pickedDayTasks',\n      //   info: ''\n      // };\n      // // alert(\n      // //   `inside NewEvent dataRequestMessage.dataLocation: ${dataRequestMessage.dataLocation}`\n      // // );\n      // this.context.dataRequestHandler(event, dataRequestMessage);\n      // alert(`contentViewObject : ${contentViewObject.target.value}`);\n      //send new view\n    };\n\n    this.handleDateChange = date => {\n      //let date = event.target.value;\n      this.setState({\n        startTimeDate: date,\n        showStartTimeDate: true\n      });\n    };\n\n    this.startDateTimeHandler = date => {\n      console.log(date);\n      let date2 = {\n        date: 31,\n        dateObjectString: 'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n        toISOString: '2020-01-31T13:00:00.000Z',\n        toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n        toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n        dateString: 'Fri Jan 31 2020',\n        timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n        year: 2020,\n        yearShort: 120,\n        month: 0,\n        day: 5,\n        time: '8:00:00 AM',\n        hour: 8,\n        minute: 0,\n        UTCDate: 31,\n        toLocalString: '1/31/2020, 8:00:00 AM',\n        toLocalDateString: '1/31/2020',\n        toLocaleTimeString: '8:00:00 AM'\n      }; //alert(`date2.day: ${date2.day}`);\n      // let eventStartTimeDate = {\n      //   dateObjectString: date.dateObjectString,\n      //   dateString: date.dateString,\n      //   day: date.day,\n      //   date: date.date,\n      //   month: date.month,\n      //   year: date.year,\n      //   timeString: date.time,\n      //   hour: date.hour,\n      //   minute: date.minute\n      // };\n\n      let eventStartTimeDate = {\n        dateObjectString: date2.dateObjectString,\n        dateString: date2.dateString,\n        day: date2.day,\n        date: date2.date,\n        month: date2.month,\n        year: date2.year,\n        timeString: date2.time,\n        hour: date2.hour,\n        minute: date2.minute\n      };\n      this.setState({\n        startTimeDate: eventStartTimeDate,\n        showFinishTimeDate: true\n      }, event => this.resetState(event)); //alert(`eventStartTimeDate.dateString: ${eventStartTimeDate.dateString}`);\n    };\n\n    this.finishTimeDateHandler = date => {\n      let eventFinishTimeDate = {\n        dateObjectString: date.dateObjectString,\n        dateString: date.dateString,\n        day: date.day,\n        date: date.date,\n        month: date.month,\n        year: date.year,\n        timeString: date.time,\n        hour: date.hour,\n        minute: date.minute\n      }; // let currentShowFinishTimeDate = this.state.showFinishTimeDate\n      // showFinishTimeDate: !currentShowFinishTimeDate\n\n      this.setState({\n        finishTimeDate: eventFinishTimeDate\n      });\n    };\n\n    this.eventTitleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.eventNoteChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.eventTypeChange = e => {\n      this.setState({\n        eventType: e.target.value\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, \"Event Title\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"eventTitle\",\n      className: \"form-control\",\n      defaultValue: \"NBA AllStar Game\" //value={this.state.eventTitle}\n      ,\n      onChange: e => this.eventTitleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, \"Event Type\"), React.createElement(\"select\", {\n      name: \"assignedTimeStart\",\n      className: \"form-control\",\n      placeholder: \"Enter Start Time.\",\n      onChange: e => this.eventTypeChange(e),\n      id: \"assignedTimeStart\",\n      defaultValue: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, \"Appointment\"), React.createElement(\"option\", {\n      value: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, \"Meeting\"), React.createElement(\"option\", {\n      value: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, \"One Time - Scheduled\"), React.createElement(\"option\", {\n      value: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, \"One Time - Unschedule\"), React.createElement(\"option\", {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, \"Multi Day Event\"))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, \"Note\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"eventNote\",\n      className: \"form-control\",\n      defaultValue: \"Watch on Chanel 13\" //value={this.state.eventNote}\n      ,\n      onChange: e => this.eventNoteChange(e) //ref={eventNoteRef => eventNoteRef.focus()}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }), React.createElement(DatePickerPicker, {\n      startDateTimeHandler: date => this.startDateTimeHandler(date),\n      finishTimeDateHandler: date => this.finishTimeHandler(date),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nNewEvent.contextType = TasksDataContext;\nexport default NewEvent;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/Creation/NewEvent.js"],"names":["React","Component","DatePickerPicker","ReactDatePicker","TasksDataContext","Icon","Form","Input","FormGroup","Container","Label","DateRangePicker","SingleDatePicker","DayPickerRangeController","fi","NewEvent","state","eventId","eventTitle","eventNote","eventCategory","startTimeDate","date","dateObjectString","toISOString","toUTCString","toGMTString","dateString","timeString","year","yearShort","month","day","time","hour","minute","UTCDate","toLocalString","toLocalDateString","toLocaleTimeString","finishTimeDate","eventDuration","blockOffTimeSlot","showStartTimeDate","showFinishTimeDate","deadline","newEventHandler","event","info","typeOfData","handlerChoice","dataLocation","infoType","dataRequestMessage","alert","props","contentChoice","context","dataRequestHandler","startDatehandler","setState","onSubmit","preventDefault","resetState","contentChoiceObj","target","value","contentViewHandler","handleDateChange","startDateTimeHandler","console","log","date2","eventStartTimeDate","finishTimeDateHandler","eventFinishTimeDate","eventTitleChange","e","name","eventNoteChange","eventTypeChange","eventType","render","finishTimeHandler","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport ReactDatePicker from '../Calendar/ReactDatePicker';\n//import RightCockpitContext from '../../context/RightCockpitContext';\nimport TasksDataContext from '../../context/tasksContext';\nimport Icon from '../Calendar/Icon';\nimport { Form, Input, FormGroup, Container, Label } from 'reactstrap';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport {\n  DateRangePicker,\n  SingleDatePicker,\n  DayPickerRangeController\n} from 'react-dates';\nimport { fi } from 'date-fns/locale';\n\nclass NewEvent extends Component {\n  // state = {\n  //   eventId: '', //task + date + start time\n  //   eventTitle: '',\n  //   eventNote: '',\n  //   eventCategory: '', //errand,multiday event, single day event, (radial choices)\n  //   //required\n  //   startTimeDate: '',\n  //   finishTimeDate: '',\n  //   eventDuration: '', //\n  //   blockOffTimeSlot: false,\n  //   showStartTimeDate: false,\n  //   showFinishTimeDate: false,\n  //   deadline: ''\n  // };\n\n  state = {\n    eventId: 'ri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time',\n    eventTitle: 'Mavs vs Lakers',\n    eventNote: 'watch on TnT',\n    eventCategory: 'leisure',\n    startTimeDate: {\n      date: 31,\n      dateObjectString:\n        'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n      toISOString: '2020-01-31T13:00:00.000Z',\n      toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n      toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n      dateString: 'Fri Jan 31 2020',\n      timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n      year: 2020,\n      yearShort: 120,\n      month: 0,\n      day: 5,\n      time: '8:00:00 AM',\n      hour: 8,\n      minute: 0,\n      UTCDate: 31,\n      toLocalString: '1/31/2020, 8:00:00 AM',\n      toLocalDateString: '1/31/2020',\n      toLocaleTimeString: '8:00:00 AM'\n    },\n\n    finishTimeDate: '',\n    eventDuration: '', //\n    blockOffTimeSlot: false,\n    showStartTimeDate: false,\n    showFinishTimeDate: false,\n    deadline: ''\n  };\n\n  newEventHandler = (event, info) => {\n    //let contentchoice = event.target.value;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    //let info = ''; //string: actual info\n\n    // let value = '';\n    let dataRequestMessage = {};\n    alert(`dataRequestMessage: ${dataRequestMessage}`);\n    switch (this.props.contentChoice) {\n      case '5':\n        alert('case 5');\n        typeOfData = 'events';\n        handlerChoice = '1';\n        dataLocation = '';\n        infoType = 'id';\n        //info = '';\n        break;\n      case '4':\n        break;\n      case '5':\n        break;\n      case '6':\n        break;\n    }\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    this.context.dataRequestHandler(event, dataRequestMessage);\n  };\n  startDatehandler = event => {\n    let date = {\n      date: 31,\n      dateObjectString:\n        'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n      toISOString: '2020-01-31T13:00:00.000Z',\n      toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n      toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n      dateString: 'Fri Jan 31 2020',\n      timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n      year: 2020,\n      yearShort: 120,\n      month: 0,\n      day: 5,\n      time: '8:00:00 AM',\n      hour: 8,\n      minute: 0,\n      UTCDate: 31,\n      toLocalString: '1/31/2020, 8:00:00 AM',\n      toLocalDateString: '1/31/2020',\n      toLocaleTimeString: '8:00:00 AM'\n    };\n    let dataRequestMessage = {\n      typeOfData: 'events',\n      handlerChoice: '1',\n      dataLocation: 'Thursday',\n      infoType: 'pickedDayTasks',\n      info: this.state\n    };\n    this.setState({ startTimeDate: date }, event =>\n      this.context.dataRequestHandler(event, dataRequestMessage)\n    );\n  };\n  // onSubmit2 = event => {\n\n  // }\n  onSubmit = event => {\n    event.preventDefault();\n    let dataRequestMessage = {\n      typeOfData: 'events',\n      handlerChoice: '1',\n      dataLocation: 'Thursday',\n      infoType: 'pickedDayTasks',\n      info: this.state\n    };\n    this.resetState(event =>\n      this.context.dataRequestHandler(event, dataRequestMessage)\n    );\n\n    //alert(`contentView: ${this.props.contentChoice}`);\n    // this.setState({ blue: 'blue' }, event =>\n    //   this.context.dataRequestHandler(\n    //     event,\n    //     typeOfData,\n    //     handlerChoice,\n    //     infoType,\n    //     info\n    //   )\n    // );{\n    //this.startDatehandler(event);\n    //this.resetState();\n    //let dataLocation = this.state.startTimeDate.day;\n    // alert(`inside day2 roughing it: ${date2.day}`);\n    // let findDay = '';\n    // switch (date2.day) {\n    //   case 1:\n    //     findDay = 'Monday';\n    //     break;\n    //   case 2:\n    //     findDay = 'Tuesday';\n    //     break;\n    //   case 3:\n    //     findDay = 'Wednesday';\n    //     break;\n    //   case 4:\n    //     findDay = 'Thursday';\n    //     break;\n    //   case 5:\n    //     findDay = 'Friday';\n    //     break;\n    //   case 6:\n    //     findDay = 'Saturday';\n    //     break;\n    //   case 0:\n    //     findDay = 'Sunday';\n    //     break;\n    // }\n\n    // let typeOfData = 'tasks';\n    // let handlerChoice = '10';\n    // let dataLocation = 'Friday';\n    // let infoType = 'newEvent';\n    // let info = this.state;\n\n    // let dataRequestMessage = {\n    //   typeOfData: 'events',\n    //   handlerChoice: '1',\n    //   dataLocation: 'Thursday',\n    //   infoType: 'pickedDayTasks',\n    //   info: this.state\n    // };\n\n    // dataRequestMessage = {\n    //   typeOfData: typeOfData,\n    //   handlerChoice: handlerChoice,\n    //   dataLocation: dataLocation,\n    //   infoType: infoType,\n    //   info: info\n    // };\n    //  alert(\n    //       `inside NewEvent dataRequestMessage.dataLocation: ${dataRequestMessage.dataLocation}`\n    //     );\n\n    // this.context.dataRequestHandler(event, dataRequestMessage);\n    // alert(\n    //   `dataRequestMessage.info.eventTitle ${dataRequestMessage.info.eventTitle}`\n    // );\n\n    // this.resetState(event =>\n    //   this.context.dataRequestHandler(event, dataRequestMessage)\n    // );\n    // this.resetState(event =>\n    //   this.context.dataRequestHandler(event, dataRequestMessage)\n    // );\n  };\n\n  resetState = () => {\n    //event.preventDefault();\n    // event.preventDefault();\n\n    let dataRequestMessage = {\n      typeOfData: 'tasks',\n      handlerChoice: '9',\n      dataLocation: 'Thursday',\n      infoType: 'pickedDayTasks',\n      info: ''\n    };\n\n    let contentChoiceObj = {\n      target: {\n        value: '0'\n      }\n    };\n\n    this.setState(\n      {\n        showStartTimeDate: true\n      },\n      event => this.context.dataRequestHandler(event, dataRequestMessage)\n    );\n\n    // this.setState(\n    //   {\n    //     eventId: '', //task + date + start time\n    //     eventTitle: '',\n    //     eventNote: '',\n    //     eventCategory: '',\n    //     //required\n    //     startTimeDate: '',\n    //     finishTimeDate: '',\n    //     showStartTimeDate: false,\n    //     showFinishTimeDate: false,\n    //     deadline: '',\n    //     eventDuration: '', //\n    //     blockOffTimeSlot: ''\n    //   },\n    //   event => this.context.dataRequestHandler(event, dataRequestMessage)\n    // );\n    this.props.contentViewHandler(contentChoiceObj);\n\n    // //let dataLocation = this.state.startTimeDate.day;\n    // alert(`inside day2 roughing it: ${date2.day}`);\n    // let findDay = '';\n    // switch (date2.day) {\n    //   case 1:\n    //     findDay = 'Monday';\n    //     break;\n    //   case 2:\n    //     findDay = 'Tuesday';\n    //     break;\n    //   case 3:\n    //     findDay = 'Wednesday';\n    //     break;\n    //   case 4:\n    //     findDay = 'Thursday';\n    //     break;\n    //   case 5:\n    //     findDay = 'Friday';\n    //     break;\n    //   case 6:\n    //     findDay = 'Saturday';\n    //     break;\n    //   case 0:\n    //     findDay = 'Sunday';\n    //     break;\n    // }\n    // let dataRequestMessage = {\n    //   typeOfData: 'tasks',\n    //   handlerChoice: '',\n    //   dataLocation: findDay,\n    //   infoType: 'pickedDayTasks',\n    //   info: ''\n    // };\n    // // alert(\n    // //   `inside NewEvent dataRequestMessage.dataLocation: ${dataRequestMessage.dataLocation}`\n    // // );\n    // this.context.dataRequestHandler(event, dataRequestMessage);\n\n    // alert(`contentViewObject : ${contentViewObject.target.value}`);\n    //send new view\n  };\n\n  handleDateChange = date => {\n    //let date = event.target.value;\n    this.setState({\n      startTimeDate: date,\n      showStartTimeDate: true\n    });\n  };\n\n  startDateTimeHandler = date => {\n    console.log(date);\n    let date2 = {\n      date: 31,\n      dateObjectString:\n        'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n      toISOString: '2020-01-31T13:00:00.000Z',\n      toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n      toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n      dateString: 'Fri Jan 31 2020',\n      timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n      year: 2020,\n      yearShort: 120,\n      month: 0,\n      day: 5,\n      time: '8:00:00 AM',\n      hour: 8,\n      minute: 0,\n      UTCDate: 31,\n      toLocalString: '1/31/2020, 8:00:00 AM',\n      toLocalDateString: '1/31/2020',\n      toLocaleTimeString: '8:00:00 AM'\n    };\n    //alert(`date2.day: ${date2.day}`);\n\n    // let eventStartTimeDate = {\n    //   dateObjectString: date.dateObjectString,\n    //   dateString: date.dateString,\n    //   day: date.day,\n    //   date: date.date,\n    //   month: date.month,\n    //   year: date.year,\n    //   timeString: date.time,\n    //   hour: date.hour,\n    //   minute: date.minute\n    // };\n\n    let eventStartTimeDate = {\n      dateObjectString: date2.dateObjectString,\n      dateString: date2.dateString,\n      day: date2.day,\n      date: date2.date,\n      month: date2.month,\n      year: date2.year,\n      timeString: date2.time,\n      hour: date2.hour,\n      minute: date2.minute\n    };\n    this.setState(\n      {\n        startTimeDate: eventStartTimeDate,\n        showFinishTimeDate: true\n      },\n\n      event => this.resetState(event)\n    );\n    //alert(`eventStartTimeDate.dateString: ${eventStartTimeDate.dateString}`);\n  };\n\n  finishTimeDateHandler = date => {\n    let eventFinishTimeDate = {\n      dateObjectString: date.dateObjectString,\n      dateString: date.dateString,\n      day: date.day,\n      date: date.date,\n      month: date.month,\n      year: date.year,\n      timeString: date.time,\n      hour: date.hour,\n      minute: date.minute\n    };\n\n    // let currentShowFinishTimeDate = this.state.showFinishTimeDate\n    // showFinishTimeDate: !currentShowFinishTimeDate\n    this.setState({ finishTimeDate: eventFinishTimeDate });\n  };\n\n  eventTitleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n  eventNoteChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  eventTypeChange = e => {\n    this.setState({\n      eventType: e.target.value\n    });\n  };\n  //static contextType = TasksDataContext;\n  static contextType = TasksDataContext;\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <form>\n            <div className=\"form-group\">\n              <label>Event Title</label>\n              <input\n                type=\"text\"\n                name=\"eventTitle\"\n                className=\"form-control\"\n                defaultValue=\"NBA AllStar Game\"\n                //value={this.state.eventTitle}\n                onChange={e => this.eventTitleChange(e)}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>Event Type</label>\n              <select\n                name=\"assignedTimeStart\"\n                className=\"form-control\"\n                placeholder=\"Enter Start Time.\"\n                onChange={e => this.eventTypeChange(e)}\n                id=\"assignedTimeStart\"\n                defaultValue=\"1\"\n              >\n                <option value=\"1\">Appointment</option>\n                <option value=\"2\">Meeting</option>\n                <option value=\"3\">One Time - Scheduled</option>\n                <option value=\"4\">One Time - Unschedule</option>\n                <option value=\"5\">Multi Day Event</option>\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label>Note</label>\n              <input\n                type=\"text\"\n                name=\"eventNote\"\n                className=\"form-control\"\n                defaultValue=\"Watch on Chanel 13\"\n                //value={this.state.eventNote}\n                onChange={e => this.eventNoteChange(e)}\n                //ref={eventNoteRef => eventNoteRef.focus()}\n              />\n\n              <DatePickerPicker\n                startDateTimeHandler={date => this.startDateTimeHandler(date)}\n                finishTimeDateHandler={date => this.finishTimeHandler(date)}\n              />\n            </div>\n\n            <button onClick={e => this.onSubmit(e)}>Submit</button>\n          </form>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NewEvent;\n"]},"metadata":{},"sourceType":"module"}