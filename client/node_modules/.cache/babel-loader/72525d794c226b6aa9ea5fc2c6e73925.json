{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/Creation/NewEvent.js\";\nimport React, { Component } from 'react';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport ReactDatePicker from '../Calendar/ReactDatePicker'; //import RightCockpitContext from '../../context/RightCockpitContext';\n\nimport TasksDataContext from '../../context/tasksContext';\nimport Icon from '../Calendar/Icon';\nimport { Form, Input, FormGroup, Container, Label } from 'reactstrap';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\nimport { fi } from 'date-fns/locale';\n\nclass NewEvent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      eventId: 'ri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time',\n      eventTitle: 'Mavs vs Lakers',\n      eventNote: 'watch on TnT',\n      eventCategory: 'leisure',\n      startTimeDate: '',\n      finishTimeDate: '',\n      eventDuration: '',\n      //\n      blockOffTimeSlot: false,\n      showStartTimeDate: false,\n      showFinishTimeDate: false,\n      deadline: 'tomorrow'\n    };\n\n    this.newEventHandler = (event, info) => {\n      //let contentchoice = event.target.value;\n      let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n      let handlerChoice = ''; //string: '#' handler inside of database\n\n      let dataLocation = ''; // string: where obj found inside database\n\n      let infoType = ''; //string: index/id/\n      //let info = ''; //string: actual info\n      // let value = '';\n\n      let dataRequestMessage = {}; //alert(`dataRequestMessage: ${dataRequestMessage}`);\n\n      switch (this.props.contentChoice) {\n        case '5':\n          alert('case 5');\n          typeOfData = 'events';\n          handlerChoice = '1';\n          dataLocation = '';\n          infoType = 'id'; //info = '';\n\n          break;\n\n        case '4':\n          break;\n\n        case '5':\n          break;\n\n        case '6':\n          break;\n      }\n\n      dataRequestMessage = {\n        typeOfData: typeOfData,\n        handlerChoice: handlerChoice,\n        dataLocation: dataLocation,\n        infoType: infoType,\n        info: info\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage);\n    };\n\n    this.startDatehandler = event => {\n      let date = {\n        date: 31,\n        dateObjectString: 'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n        toISOString: '2020-01-31T13:00:00.000Z',\n        toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n        toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n        dateString: 'Fri Jan 31 2020',\n        timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n        year: 2020,\n        yearShort: 120,\n        month: 0,\n        day: 5,\n        time: '8:00:00 AM',\n        hour: 8,\n        minute: 0,\n        UTCDate: 31,\n        toLocalString: '1/31/2020, 8:00:00 AM',\n        toLocalDateString: '1/31/2020',\n        toLocaleTimeString: '8:00:00 AM'\n      };\n      let dataRequestMessage = {\n        typeOfData: 'events',\n        handlerChoice: '1',\n        dataLocation: 'Thursday',\n        infoType: 'pickedDayTasks',\n        info: this.state\n      };\n      this.setState({\n        startTimeDate: date\n      }, event => this.context.dataRequestHandler(event, dataRequestMessage));\n    };\n\n    this.onSubmit = event => {\n      event.preventDefault();\n      let findDay = '';\n\n      switch (date2.day) {\n        case 1:\n          findDay = 'Monday';\n          break;\n\n        case 2:\n          findDay = 'Tuesday';\n          break;\n\n        case 3:\n          findDay = 'Wednesday';\n          break;\n\n        case 4:\n          findDay = 'Thursday';\n          break;\n\n        case 5:\n          findDay = 'Friday';\n          break;\n\n        case 6:\n          findDay = 'Saturday';\n          break;\n\n        case 0:\n          findDay = 'Sunday';\n          break;\n      }\n\n      let dataRequestMessage = {\n        typeOfData: 'events',\n        handlerChoice: '1',\n        dataLocation: findDay,\n        infoType: 'pickedDayTasks',\n        info: this.state\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage);\n      this.resetState();\n    };\n\n    this.resetState = () => {\n      let contentChoiceObj = {\n        target: {\n          value: '9'\n        }\n      };\n      this.setState({\n        eventId: '',\n        //task + date + start time\n        eventTitle: '',\n        eventNote: '',\n        eventCategory: '',\n        //required\n        startTimeDate: '',\n        finishTimeDate: '',\n        showStartTimeDate: false,\n        showFinishTimeDate: false,\n        deadline: '',\n        eventDuration: '',\n        //\n        blockOffTimeSlot: ''\n      }, () => this.props.contentViewHandler(contentChoiceObj));\n    };\n\n    this.handleDateChange = date => {\n      //let date = event.target.value;\n      this.setState({\n        startTimeDate: date,\n        showStartTimeDate: true\n      });\n    };\n\n    this.startDateTimeHandler = date => {\n      console.log(date); //alert(`date2.day: ${date2.day}`);\n      // let eventStartTimeDate = {\n      //   dateObjectString: date.dateObjectString,\n      //   dateString: date.dateString,\n      //   day: date.day,\n      //   date: date.date,\n      //   month: date.month,\n      //   year: date.year,\n      //   timeString: date.time,\n      //   hour: date.hour,\n      //   minute: date.minute\n      // };\n\n      let eventStartTimeDate = {\n        dateObjectString: date.dateObjectString,\n        dateString: date.dateString,\n        day: date.day,\n        date: date.date,\n        month: date.month,\n        year: date.year,\n        timeString: date.time,\n        hour: date.hour,\n        minute: date.minute\n      };\n      this.setState({\n        startTimeDate: eventStartTimeDate,\n        showFinishTimeDate: true\n      }, event => this.resetState(event)); //alert(`eventStartTimeDate.dateString: ${eventStartTimeDate.dateString}`);\n    };\n\n    this.finishTimeDateHandler = date => {\n      let eventFinishTimeDate = {\n        dateObjectString: date.dateObjectString,\n        dateString: date.dateString,\n        day: date.day,\n        date: date.date,\n        month: date.month,\n        year: date.year,\n        timeString: date.time,\n        hour: date.hour,\n        minute: date.minute\n      }; // let currentShowFinishTimeDate = this.state.showFinishTimeDate\n      // showFinishTimeDate: !currentShowFinishTimeDate\n\n      this.setState({\n        finishTimeDate: eventFinishTimeDate\n      });\n    };\n\n    this.eventTitleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.eventNoteChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.eventTypeChange = e => {\n      this.setState({\n        eventType: e.target.value\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"Event Title\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"eventTitle\",\n      className: \"form-control\" //defaultValue=\"NBA AllStar Game\"\n      ,\n      value: this.state.eventTitle,\n      onChange: e => this.eventTitleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"Event Type\"), React.createElement(\"select\", {\n      name: \"assignedTimeStart\",\n      className: \"form-control\",\n      placeholder: \"Enter Start Time.\",\n      onChange: e => this.eventTypeChange(e),\n      id: \"assignedTimeStart\",\n      defaultValue: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, \"Appointment\"), React.createElement(\"option\", {\n      value: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, \"Meeting\"), React.createElement(\"option\", {\n      value: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"One Time - Scheduled\"), React.createElement(\"option\", {\n      value: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, \"One Time - Unschedule\"), React.createElement(\"option\", {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, \"Multi Day Event\"))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, \"Note\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"eventNote\",\n      className: \"form-control\",\n      defaultValue: \"Watch on Chanel 13\" //value={this.state.eventNote}\n      ,\n      onChange: e => this.eventNoteChange(e) //ref={eventNoteRef => eventNoteRef.focus()}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }), React.createElement(DatePickerPicker, {\n      startDateTimeHandler: date => this.startDateTimeHandler(date),\n      finishTimeDateHandler: date => this.finishTimeHandler(date),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nNewEvent.contextType = TasksDataContext;\nexport default NewEvent; // let date2 = {\n//   date: 31,\n//   dateObjectString:\n//     'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n//   toISOString: '2020-01-31T13:00:00.000Z',\n//   toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   dateString: 'Fri Jan 31 2020',\n//   timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n//   year: 2020,\n//   yearShort: 120,\n//   month: 0,\n//   day: 5,\n//   time: '8:00:00 AM',\n//   hour: 8,\n//   minute: 0,\n//   UTCDate: 31,\n//   toLocalString: '1/31/2020, 8:00:00 AM',\n//   toLocalDateString: '1/31/2020',\n//   toLocaleTimeString: '8:00:00 AM'\n// };","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/Creation/NewEvent.js"],"names":["React","Component","DatePickerPicker","ReactDatePicker","TasksDataContext","Icon","Form","Input","FormGroup","Container","Label","DateRangePicker","SingleDatePicker","DayPickerRangeController","fi","NewEvent","state","eventId","eventTitle","eventNote","eventCategory","startTimeDate","finishTimeDate","eventDuration","blockOffTimeSlot","showStartTimeDate","showFinishTimeDate","deadline","newEventHandler","event","info","typeOfData","handlerChoice","dataLocation","infoType","dataRequestMessage","props","contentChoice","alert","context","dataRequestHandler","startDatehandler","date","dateObjectString","toISOString","toUTCString","toGMTString","dateString","timeString","year","yearShort","month","day","time","hour","minute","UTCDate","toLocalString","toLocalDateString","toLocaleTimeString","setState","onSubmit","preventDefault","findDay","date2","resetState","contentChoiceObj","target","value","contentViewHandler","handleDateChange","startDateTimeHandler","console","log","eventStartTimeDate","finishTimeDateHandler","eventFinishTimeDate","eventTitleChange","e","name","eventNoteChange","eventTypeChange","eventType","render","finishTimeHandler","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport ReactDatePicker from '../Calendar/ReactDatePicker';\n//import RightCockpitContext from '../../context/RightCockpitContext';\nimport TasksDataContext from '../../context/tasksContext';\nimport Icon from '../Calendar/Icon';\nimport { Form, Input, FormGroup, Container, Label } from 'reactstrap';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport {\n  DateRangePicker,\n  SingleDatePicker,\n  DayPickerRangeController\n} from 'react-dates';\nimport { fi } from 'date-fns/locale';\n\nclass NewEvent extends Component {\n  // state = {\n  //   eventId: '', //task + date + start time\n  //   eventTitle: '',\n  //   eventNote: '',\n  //   eventCategory: '', //errand,multiday event, single day event, (radial choices)\n  //   //required\n  //   startTimeDate: '',\n  //   finishTimeDate: '',\n  //   eventDuration: '', //\n  //   blockOffTimeSlot: false,\n  //   showStartTimeDate: false,\n  //   showFinishTimeDate: false,\n  //   deadline: ''\n  // };\n\n  state = {\n    eventId: 'ri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time',\n    eventTitle: 'Mavs vs Lakers',\n    eventNote: 'watch on TnT',\n    eventCategory: 'leisure',\n    startTimeDate: '',\n    finishTimeDate: '',\n    eventDuration: '', //\n    blockOffTimeSlot: false,\n    showStartTimeDate: false,\n    showFinishTimeDate: false,\n    deadline: 'tomorrow'\n  };\n\n  newEventHandler = (event, info) => {\n    //let contentchoice = event.target.value;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    //let info = ''; //string: actual info\n\n    // let value = '';\n    let dataRequestMessage = {};\n    //alert(`dataRequestMessage: ${dataRequestMessage}`);\n    switch (this.props.contentChoice) {\n      case '5':\n        alert('case 5');\n        typeOfData = 'events';\n        handlerChoice = '1';\n        dataLocation = '';\n        infoType = 'id';\n        //info = '';\n        break;\n      case '4':\n        break;\n      case '5':\n        break;\n      case '6':\n        break;\n    }\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    this.context.dataRequestHandler(event, dataRequestMessage);\n  };\n  startDatehandler = event => {\n    let date = {\n      date: 31,\n      dateObjectString:\n        'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n      toISOString: '2020-01-31T13:00:00.000Z',\n      toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n      toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n      dateString: 'Fri Jan 31 2020',\n      timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n      year: 2020,\n      yearShort: 120,\n      month: 0,\n      day: 5,\n      time: '8:00:00 AM',\n      hour: 8,\n      minute: 0,\n      UTCDate: 31,\n      toLocalString: '1/31/2020, 8:00:00 AM',\n      toLocalDateString: '1/31/2020',\n      toLocaleTimeString: '8:00:00 AM'\n    };\n    let dataRequestMessage = {\n      typeOfData: 'events',\n      handlerChoice: '1',\n      dataLocation: 'Thursday',\n      infoType: 'pickedDayTasks',\n      info: this.state\n    };\n    this.setState({ startTimeDate: date }, event =>\n      this.context.dataRequestHandler(event, dataRequestMessage)\n    );\n  };\n\n  onSubmit = event => {\n    event.preventDefault();\n\n    let findDay = '';\n    switch (date2.day) {\n      case 1:\n        findDay = 'Monday';\n        break;\n      case 2:\n        findDay = 'Tuesday';\n        break;\n      case 3:\n        findDay = 'Wednesday';\n        break;\n      case 4:\n        findDay = 'Thursday';\n        break;\n      case 5:\n        findDay = 'Friday';\n        break;\n      case 6:\n        findDay = 'Saturday';\n        break;\n      case 0:\n        findDay = 'Sunday';\n        break;\n    }\n\n    let dataRequestMessage = {\n      typeOfData: 'events',\n      handlerChoice: '1',\n      dataLocation: findDay,\n      infoType: 'pickedDayTasks',\n      info: this.state\n    };\n    this.context.dataRequestHandler(event, dataRequestMessage);\n\n    this.resetState();\n  };\n\n  resetState = () => {\n    let contentChoiceObj = {\n      target: {\n        value: '9'\n      }\n    };\n\n    this.setState(\n      {\n        eventId: '', //task + date + start time\n        eventTitle: '',\n        eventNote: '',\n        eventCategory: '',\n        //required\n        startTimeDate: '',\n        finishTimeDate: '',\n        showStartTimeDate: false,\n        showFinishTimeDate: false,\n        deadline: '',\n        eventDuration: '', //\n        blockOffTimeSlot: ''\n      },\n      () => this.props.contentViewHandler(contentChoiceObj)\n    );\n  };\n\n  handleDateChange = date => {\n    //let date = event.target.value;\n    this.setState({\n      startTimeDate: date,\n      showStartTimeDate: true\n    });\n  };\n\n  startDateTimeHandler = date => {\n    console.log(date);\n\n    //alert(`date2.day: ${date2.day}`);\n\n    // let eventStartTimeDate = {\n    //   dateObjectString: date.dateObjectString,\n    //   dateString: date.dateString,\n    //   day: date.day,\n    //   date: date.date,\n    //   month: date.month,\n    //   year: date.year,\n    //   timeString: date.time,\n    //   hour: date.hour,\n    //   minute: date.minute\n    // };\n\n    let eventStartTimeDate = {\n      dateObjectString: date.dateObjectString,\n      dateString: date.dateString,\n      day: date.day,\n      date: date.date,\n      month: date.month,\n      year: date.year,\n      timeString: date.time,\n      hour: date.hour,\n      minute: date.minute\n    };\n    this.setState(\n      {\n        startTimeDate: eventStartTimeDate,\n        showFinishTimeDate: true\n      },\n\n      event => this.resetState(event)\n    );\n    //alert(`eventStartTimeDate.dateString: ${eventStartTimeDate.dateString}`);\n  };\n\n  finishTimeDateHandler = date => {\n    let eventFinishTimeDate = {\n      dateObjectString: date.dateObjectString,\n      dateString: date.dateString,\n      day: date.day,\n      date: date.date,\n      month: date.month,\n      year: date.year,\n      timeString: date.time,\n      hour: date.hour,\n      minute: date.minute\n    };\n\n    // let currentShowFinishTimeDate = this.state.showFinishTimeDate\n    // showFinishTimeDate: !currentShowFinishTimeDate\n    this.setState({ finishTimeDate: eventFinishTimeDate });\n  };\n\n  eventTitleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n  eventNoteChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  eventTypeChange = e => {\n    this.setState({\n      eventType: e.target.value\n    });\n  };\n  //static contextType = TasksDataContext;\n  static contextType = TasksDataContext;\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <form>\n            <div className=\"form-group\">\n              <label>Event Title</label>\n              <input\n                type=\"text\"\n                name=\"eventTitle\"\n                className=\"form-control\"\n                //defaultValue=\"NBA AllStar Game\"\n\n                value={this.state.eventTitle}\n                onChange={e => this.eventTitleChange(e)}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>Event Type</label>\n              <select\n                name=\"assignedTimeStart\"\n                className=\"form-control\"\n                placeholder=\"Enter Start Time.\"\n                onChange={e => this.eventTypeChange(e)}\n                id=\"assignedTimeStart\"\n                defaultValue=\"1\"\n              >\n                <option value=\"1\">Appointment</option>\n                <option value=\"2\">Meeting</option>\n                <option value=\"3\">One Time - Scheduled</option>\n                <option value=\"4\">One Time - Unschedule</option>\n                <option value=\"5\">Multi Day Event</option>\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label>Note</label>\n              <input\n                type=\"text\"\n                name=\"eventNote\"\n                className=\"form-control\"\n                defaultValue=\"Watch on Chanel 13\"\n                //value={this.state.eventNote}\n                onChange={e => this.eventNoteChange(e)}\n                //ref={eventNoteRef => eventNoteRef.focus()}\n              />\n\n              <DatePickerPicker\n                startDateTimeHandler={date => this.startDateTimeHandler(date)}\n                finishTimeDateHandler={date => this.finishTimeHandler(date)}\n              />\n            </div>\n\n            <button onClick={e => this.onSubmit(e)}>Submit</button>\n          </form>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NewEvent;\n\n// let date2 = {\n//   date: 31,\n//   dateObjectString:\n//     'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n//   toISOString: '2020-01-31T13:00:00.000Z',\n//   toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   dateString: 'Fri Jan 31 2020',\n//   timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n//   year: 2020,\n//   yearShort: 120,\n//   month: 0,\n//   day: 5,\n//   time: '8:00:00 AM',\n//   hour: 8,\n//   minute: 0,\n//   UTCDate: 31,\n//   toLocalString: '1/31/2020, 8:00:00 AM',\n//   toLocalDateString: '1/31/2020',\n//   toLocaleTimeString: '8:00:00 AM'\n// };\n"]},"metadata":{},"sourceType":"module"}