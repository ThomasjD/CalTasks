{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/components/Tasks/Tasks.js\";\n\n/*\nimport React, { PureComponent } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\nimport student from '../../containers/Student.css';\n\nclass Tasks extends PureComponent {\n  constructor(props) {\n    super(props);\n  }\n\n  allTasksHandler() {\n    return this.props.tasks.map((task, index) => {\n      return (\n        <ErrorBoundary key={task.id}>\n          <Task\n            todo={task.todo}\n            deadline={task.deadline}\n            location={task.location}\n            key={task.id}\n            click={() => this.props.clicked(index)}\n            changed={event => this.props.changed(event, task.id)}\n          ></Task>\n        </ErrorBoundary>\n      );\n    });\n  }\n\n  renderTableHeaderAllTasksHandler() {\n    let header = Object.keys(this.props.tasks[0]);\n    return header.map((key, index) => {\n      if (key == 'id') {\n        return <th key={index}>Click to Delete</th>;\n      } else {\n        return <th key={index}>{key.toUpperCase()}</th>;\n      }\n    });\n  }\n\n  // static getDerivedStateFromProps(props, state) {\n  //     console.log('[Tasks] getDerivedStateFromProps')\n  //     return state\n  // }\n\n  //niche -removed\n  // componentWillReceiveProps(props) {\n  //    console.log('[Persons.js] componentWillReceiveProps', props);\n  // }\n\n  /*\n    shouldComponentUpdate (nextProps, nextState) {\n        console.log('[Tasks] shouldComponentUpdate')\n        //comparing if props have changed\n        if (nextProps.tasks !== this.props.tasks) {\n            return true\n        } else {\n            return false\n        }\n       \n    }\n    */\n\n/*\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('[Tasks] getSnapshotBeforeUpdate');\n    return { message: 'Snapshot' };\n  }\n\n  // componentWillUpdate() {\n  //     return\n  // }\n\n  componentDidUpdate(prevProps, prevState, message) {\n    console.log('[Tasks] componentDidUpdate');\n    console.log(message);\n  }\n\n  componentWillUnmount() {\n    console.log('[Tasks.js] componentWillUnmount');\n  }\n\n  render() {\n    console.log('[Tasks] rendering...');\n\n    return (\n      <div>\n        <h1 id=\"title\"> All Tasks</h1>\n        <table id=\"students\">\n          <tbody>\n            <tr>{this.renderTableHeaderAllTasksHandler()}</tr>\n            {this.allTasksHandler()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Tasks;\n*/\n//original\n\n/*\nthis.props.tasks.map((task, index) => {\n            return (<ErrorBoundary key = {task.id}>\n            <Task \n            todo = {task.todo} \n            deadline = {task.deadline}\n            location = {task.location}\n            key = {task.id}\n            click = {() => this.props.clicked(index)}\n            changed = {(event) => this.props.changed (event, task.id)}>Change Task (below)</Task>\n            </ErrorBoundary>\n            )\n          })\n*/\n//original functional component\nimport React, { useEffect } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\n\nconst Tasks = props => {\n  console.log('[Tasks.js] rendering');\n\n  const allTasksHandler = () => {\n    return props.tasks.map((task, index) => {\n      return (//<ErrorBoundary key={task.id}>\n        React.createElement(Task, {\n          todo: task.todo,\n          deadline: task.deadline,\n          location: task.location,\n          key: task.id,\n          click: () => props.clicked(index),\n          changed: event => props.changed(event, task.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }) //</ErrorBoundary>\n\n      );\n    });\n  };\n\n  const renderTableHeaderAllTasksHandler = () => {\n    console.log(\"this is print of props.tasks \".concat(props.tasks));\n    props.tasks ? console.log(\"still got some tasks exactly \".concat(props.tasks.length, \" more\")) : console.log('we out of tasks ');\n    let header = Object.keys(props.tasks[0]); //let header = Object.keys(props.tasks);\n\n    console.log(\"this is the header: \".concat(header));\n    return header.map((key, index) => {\n      console.log(\"this is the key: (\".concat(key, \") and the index: (\").concat(index, \")\"));\n\n      if (key == 'id') {\n        return React.createElement(\"th\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, \"Click to Delete\");\n      } else {\n        return React.createElement(\"th\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, key.toUpperCase());\n      }\n    });\n  };\n\n  useEffect(() => {\n    // console.log(`this is the state of alert ${onCallDelete.signalAlert}`);\n    // if (onCallDelete.signalAlert === 'true') {\n    if (props.reRender === true) {\n      alert('Are you sure you want to delete this task?'); //return (props.reRender = {})\n    } // }\n\n\n    return () => {\n      console.log(\"i am in the return of useEffect in TASKS \".concat(props.tasks.length));\n    };\n  }, [props.reRender]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    id: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \" All Tasks\"), React.createElement(\"table\", {\n    id: \"students\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, renderTableHeaderAllTasksHandler()), allTasksHandler()))); // return props.tasks.map((task, index) => {\n  //   return (\n  //     <ErrorBoundary key={task.id}>\n  //       <Task\n  //         todo={task.todo}\n  //         deadline={task.deadline}\n  //         location={task.location}\n  //         key={task.id}\n  //         click={() => props.clicked(index)}\n  //         changed={event => props.changed(event, task.id)}\n  //       >\n  //         Change Task (below)\n  //       </Task>\n  //     </ErrorBoundary>\n  //   );\n  // });\n};\n\nexport default Tasks;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/components/Tasks/Tasks.js"],"names":["React","useEffect","Task","ErrorBoundary","Tasks","props","console","log","allTasksHandler","tasks","map","task","index","todo","deadline","location","id","clicked","event","changed","renderTableHeaderAllTasksHandler","length","header","Object","keys","key","toUpperCase","reRender","alert"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;AAEA;;;;;;;;;;;;;;AAeA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;;AAEA,QAAMC,eAAe,GAAG,MAAM;AAC5B,WAAOH,KAAK,CAACI,KAAN,CAAYC,GAAZ,CAAgB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACtC,aACE;AACA,4BAAC,IAAD;AACE,UAAA,IAAI,EAAED,IAAI,CAACE,IADb;AAEE,UAAA,QAAQ,EAAEF,IAAI,CAACG,QAFjB;AAGE,UAAA,QAAQ,EAAEH,IAAI,CAACI,QAHjB;AAIE,UAAA,GAAG,EAAEJ,IAAI,CAACK,EAJZ;AAKE,UAAA,KAAK,EAAE,MAAMX,KAAK,CAACY,OAAN,CAAcL,KAAd,CALf;AAME,UAAA,OAAO,EAAEM,KAAK,IAAIb,KAAK,CAACc,OAAN,CAAcD,KAAd,EAAqBP,IAAI,CAACK,EAA1B,CANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CAUE;;AAVF;AAYD,KAbM,CAAP;AAcD,GAfD;;AAiBA,QAAMI,gCAAgC,GAAG,MAAM;AAC7Cd,IAAAA,OAAO,CAACC,GAAR,wCAA4CF,KAAK,CAACI,KAAlD;AACAJ,IAAAA,KAAK,CAACI,KAAN,GACIH,OAAO,CAACC,GAAR,wCAA4CF,KAAK,CAACI,KAAN,CAAYY,MAAxD,WADJ,GAEIf,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAFJ;AAGA,QAAIe,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYnB,KAAK,CAACI,KAAN,CAAY,CAAZ,CAAZ,CAAb,CAL6C,CAM7C;;AACAH,IAAAA,OAAO,CAACC,GAAR,+BAAmCe,MAAnC;AACA,WAAOA,MAAM,CAACZ,GAAP,CAAW,CAACe,GAAD,EAAMb,KAAN,KAAgB;AAChCN,MAAAA,OAAO,CAACC,GAAR,6BAAiCkB,GAAjC,+BAAyDb,KAAzD;;AACA,UAAIa,GAAG,IAAI,IAAX,EAAiB;AACf,eAAO;AAAI,UAAA,GAAG,EAAEb,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACD,OAFD,MAEO;AACL,eAAO;AAAI,UAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAiBa,GAAG,CAACC,WAAJ,EAAjB,CAAP;AACD;AACF,KAPM,CAAP;AAQD,GAhBD;;AAkBAzB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA,QAAII,KAAK,CAACsB,QAAN,KAAmB,IAAvB,EAA6B;AAC3BC,MAAAA,KAAK,CAAC,4CAAD,CAAL,CAD2B,CAE3B;AACD,KANa,CAQd;;;AAEA,WAAO,MAAM;AACXtB,MAAAA,OAAO,CAACC,GAAR,oDAC8CF,KAAK,CAACI,KAAN,CAAYY,MAD1D;AAGD,KAJD;AAKD,GAfQ,EAeN,CAAChB,KAAK,CAACsB,QAAP,CAfM,CAAT;AAiBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAGE;AAAO,IAAA,EAAE,EAAC,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKP,gCAAgC,EAArC,CADF,EAEGZ,eAAe,EAFlB,CADF,CAHF,CADF,CAvDqB,CAoErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CApFD;;AAqFA,eAAeJ,KAAf","sourcesContent":["/*\nimport React, { PureComponent } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\nimport student from '../../containers/Student.css';\n\nclass Tasks extends PureComponent {\n  constructor(props) {\n    super(props);\n  }\n\n  allTasksHandler() {\n    return this.props.tasks.map((task, index) => {\n      return (\n        <ErrorBoundary key={task.id}>\n          <Task\n            todo={task.todo}\n            deadline={task.deadline}\n            location={task.location}\n            key={task.id}\n            click={() => this.props.clicked(index)}\n            changed={event => this.props.changed(event, task.id)}\n          ></Task>\n        </ErrorBoundary>\n      );\n    });\n  }\n\n  renderTableHeaderAllTasksHandler() {\n    let header = Object.keys(this.props.tasks[0]);\n    return header.map((key, index) => {\n      if (key == 'id') {\n        return <th key={index}>Click to Delete</th>;\n      } else {\n        return <th key={index}>{key.toUpperCase()}</th>;\n      }\n    });\n  }\n\n  // static getDerivedStateFromProps(props, state) {\n  //     console.log('[Tasks] getDerivedStateFromProps')\n  //     return state\n  // }\n\n  //niche -removed\n  // componentWillReceiveProps(props) {\n  //    console.log('[Persons.js] componentWillReceiveProps', props);\n  // }\n\n  /*\n    shouldComponentUpdate (nextProps, nextState) {\n        console.log('[Tasks] shouldComponentUpdate')\n        //comparing if props have changed\n        if (nextProps.tasks !== this.props.tasks) {\n            return true\n        } else {\n            return false\n        }\n       \n    }\n    */\n/*\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('[Tasks] getSnapshotBeforeUpdate');\n    return { message: 'Snapshot' };\n  }\n\n  // componentWillUpdate() {\n  //     return\n  // }\n\n  componentDidUpdate(prevProps, prevState, message) {\n    console.log('[Tasks] componentDidUpdate');\n    console.log(message);\n  }\n\n  componentWillUnmount() {\n    console.log('[Tasks.js] componentWillUnmount');\n  }\n\n  render() {\n    console.log('[Tasks] rendering...');\n\n    return (\n      <div>\n        <h1 id=\"title\"> All Tasks</h1>\n        <table id=\"students\">\n          <tbody>\n            <tr>{this.renderTableHeaderAllTasksHandler()}</tr>\n            {this.allTasksHandler()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Tasks;\n*/\n\n//original\n\n/*\nthis.props.tasks.map((task, index) => {\n            return (<ErrorBoundary key = {task.id}>\n            <Task \n            todo = {task.todo} \n            deadline = {task.deadline}\n            location = {task.location}\n            key = {task.id}\n            click = {() => this.props.clicked(index)}\n            changed = {(event) => this.props.changed (event, task.id)}>Change Task (below)</Task>\n            </ErrorBoundary>\n            )\n          })\n*/\n\n//original functional component\n\nimport React, { useEffect } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\n\nconst Tasks = props => {\n  console.log('[Tasks.js] rendering');\n\n  const allTasksHandler = () => {\n    return props.tasks.map((task, index) => {\n      return (\n        //<ErrorBoundary key={task.id}>\n        <Task\n          todo={task.todo}\n          deadline={task.deadline}\n          location={task.location}\n          key={task.id}\n          click={() => props.clicked(index)}\n          changed={event => props.changed(event, task.id)}\n        />\n        //</ErrorBoundary>\n      );\n    });\n  };\n\n  const renderTableHeaderAllTasksHandler = () => {\n    console.log(`this is print of props.tasks ${props.tasks}`);\n    props.tasks\n      ? console.log(`still got some tasks exactly ${props.tasks.length} more`)\n      : console.log('we out of tasks ');\n    let header = Object.keys(props.tasks[0]);\n    //let header = Object.keys(props.tasks);\n    console.log(`this is the header: ${header}`);\n    return header.map((key, index) => {\n      console.log(`this is the key: (${key}) and the index: (${index})`);\n      if (key == 'id') {\n        return <th key={index}>Click to Delete</th>;\n      } else {\n        return <th key={index}>{key.toUpperCase()}</th>;\n      }\n    });\n  };\n\n  useEffect(() => {\n    // console.log(`this is the state of alert ${onCallDelete.signalAlert}`);\n    // if (onCallDelete.signalAlert === 'true') {\n    if (props.reRender === true) {\n      alert('Are you sure you want to delete this task?');\n      //return (props.reRender = {})\n    }\n\n    // }\n\n    return () => {\n      console.log(\n        `i am in the return of useEffect in TASKS ${props.tasks.length}`\n      );\n    };\n  }, [props.reRender]);\n\n  return (\n    <div>\n      <h1 id=\"title\"> All Tasks</h1>\n\n      <table id=\"students\">\n        <tbody>\n          <tr>{renderTableHeaderAllTasksHandler()}</tr>\n          {allTasksHandler()}\n        </tbody>\n      </table>\n    </div>\n  );\n\n  // return props.tasks.map((task, index) => {\n  //   return (\n  //     <ErrorBoundary key={task.id}>\n  //       <Task\n  //         todo={task.todo}\n  //         deadline={task.deadline}\n  //         location={task.location}\n  //         key={task.id}\n  //         click={() => props.clicked(index)}\n  //         changed={event => props.changed(event, task.id)}\n  //       >\n  //         Change Task (below)\n  //       </Task>\n  //     </ErrorBoundary>\n  //   );\n  // });\n};\nexport default Tasks;\n"]},"metadata":{},"sourceType":"module"}