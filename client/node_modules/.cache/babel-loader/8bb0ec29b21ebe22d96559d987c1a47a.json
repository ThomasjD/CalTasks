{"ast":null,"code":"import _objectSpread from \"/Users/thomasjd/Desktop/caltask/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport React, { Component } from 'react'; //import classes from '../../components/Cockpit/Cockpit.module.css';\n\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport Store from './Store';\nimport EventsData from './EventsData';\nimport SyllabusContext from '../../context/syllabusContext';\n\nclass Syllabus extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataBaseName: 'syllabus',\n      maxReact: [{\n        id: 'xvlwil',\n        lesson: '90. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbskk',\n        lesson: '91. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      maxReactWorkLeft: [{\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      }, {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      }, {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }],\n      syllabi: {\n        maxReact: {\n          //key act as name\n          syllabusId: 'maxReact',\n          name: 'Max React Full Stack',\n          category: 'programing',\n          concentration: 'fullstack',\n          subject: 'React',\n          source: 'Udemy',\n          syllabusCompletionTime: '30 hour',\n          completionStatus: '30',\n          currentShowSyllabusList: false,\n          //actived from Navbar syllabus dropdown\n          lessons: [{\n            syllabusId: 'maxReact',\n            section: '7. Diving Deeper into Components & React Internals',\n            lessonId: 'xvlwil',\n            lessonNum: '90',\n            lessonName: 'For props Changes',\n            completion: false\n          }, {\n            syllabusId: 'maxReact',\n            section: '7. Diving Deeper into Components & React Internals',\n            lessonId: 'bbbskk',\n            lessonNum: '91',\n            lessonName: 'For state Changes',\n            completion: false\n          }, {\n            syllabusId: 'maxReact',\n            section: '7. Diving Deeper into Components & React Internals',\n            lessonId: 'kjhck2',\n            lessonNum: '92',\n            lessonName: 'Using useEffect() in Functional Components',\n            completion: false\n          }]\n        },\n        travestyBootStrap: {\n          syllabusId: 'travestyBootStrap',\n          name: 'Travesty BootStrap',\n          category: 'programing',\n          concentration: 'front-end',\n          subject: 'Bootstrap',\n          source: 'Udemy',\n          syllabusCompletionTime: '40 hours',\n          completionStatus: '5',\n          currentShowSyllabusList: false,\n          lessons: [{\n            syllabusId: 'travestyBootStrap',\n            section: 'Section 4: Grid System & Flexbox',\n            lessonId: 'xvlwil',\n            lessonNum: '26',\n            lessonName: 'Grid System',\n            lessonCompletionTime: '',\n            completion: false\n          }, {\n            syllabusId: 'travestyBootStrap',\n            section: 'Section 4: Grid System & Flexbox',\n            lessonId: 'bbbskk',\n            lessonNum: '27',\n            lessonName: 'Grid Alignment',\n            lessonCompletionTime: '',\n            completion: false\n          }, {\n            syllabusId: 'travestyBootStrap',\n            section: 'Section 4: Grid System & Flexbox',\n            lessonId: 'kjhck2',\n            lessonNum: '28',\n            lessonName: 'Flexbox Classes',\n            lessonCompletionTime: '',\n            completion: false\n          }]\n        }\n      },\n      lastLessonHeader: [],\n      showLeftOverLessonsFromSyllabus: false,\n      TasksData: 'd'\n    };\n\n    this.assignLessonFromSyllabus = () => {\n      alert('inside assignedLesson');\n      let currentShowLeftOverLessonsFromSyllabus = this.state.showLeftOverLessonsFromSyllabus;\n\n      if (this.state.maxReact.length != 0) {\n        this.setState({\n          lastLessonHeader: this.state.maxReact[0],\n          showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus\n        }, () => {\n          this.context.dataReceiverHandler(this.state);\n        });\n      } else {\n        this.setState({\n          lastLessonHeader: this.state.lastLessonHeader,\n          showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus\n        }, () => {\n          this.context.dataReceiverHandler(this.state);\n        });\n      }\n    };\n\n    this.deleteLessonFromOriginalSyllabusHandler = taskIndex => {\n      alert('Are you sure you want to add this lesson?');\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      currentOriginalLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReactWorkLeft: currentOriginalLessons\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n\n    this.addLessonFromOriginalSyllabusHandler = taskIndex => {\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      let lessonToAdd = currentOriginalLessons[taskIndex]; //add to maxReact the picked lesson\n\n      console.log('I am inside addNewLesonHandler');\n      let currentMaxReactSyllabus = [...this.state.maxReact];\n      currentMaxReactSyllabus.push(lessonToAdd); //currentMaxReactSyllabus.push(newLesson);\n\n      console.log(currentMaxReactSyllabus);\n      let currentShowLeftOverLessonsFromSyllabus = this.state.showLeftOverLessonsFromSyllabus; //showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus,\n      //Showing current left over Lessons from Syllabus (after addition/deletion)\n\n      this.setState({\n        maxReact: currentMaxReactSyllabus\n      }, this.deleteLessonFromOriginalSyllabusHandler(taskIndex));\n    };\n\n    this.lastLessonHeaderHandler = () => {\n      alert(this.context.dataRequestDetails.handlerChoice);\n\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          //list of syllabi\n          //[key: syllabiName, value: index]\n          //sallabiName1: {syllabi[syllabikey]}\n          //key = syllabiName+ index & value {this.state[syllabiName]}\n          // alert(`syllabiList ${syllabiList}`);\n          // this.context.resetHandlerChoice(\n          //   this.context.dataReceiverHandler(this.state)\n          // );\n          if (this.state.maxReact.length != 0) {\n            this.setState({\n              lastLessonHeader: this.state.maxReact[0]\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          } else {\n            this.setState({\n              lastLessonHeader: this.state.lastLessonHeader\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          }\n\n          break;\n\n        case '2':\n          alert('In case 2 of lastHeader()');\n          let dataLocation = this.context.dataRquestDetails.dataLocation;\n\n          if (this.state[dataLocation].length != 0) {\n            this.setState({\n              lastLessonHeader: this.state[dataLocation][0]\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          } else {\n            this.setState({\n              lastLessonHeader: this.state.lastLessonHeader\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          }\n\n          break;\n\n        case '6':\n          //alert('inside case 6');\n          if (this.state.maxReactWorkLeft.length != 0) {\n            this.setState({\n              lastLessonHeader: this.state.maxReactWorkLeft[0]\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          } else {\n            this.setState({\n              lastLessonHeader: this.state.lastLessonHeader\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          }\n\n          break;\n\n        case '8':\n          //array of keys\n          let newShowSyllabistList = !this.state.currentShowSyllabusList;\n          let syllabusListKeys = Object.keys(this.state.syllabi); //[maxReact, boostrap]\n\n          let syllabusListLength = syllabusListKeys.length; //alert(syllabusListLength);\n          //taking one of the syllabus object out\n\n          let modelHeader = syllabusListKeys[0]; //a key of one of the syllabus\n\n          if (syllabusListLength != 0) {\n            let syllabusHeaders = Object.keys(this.state.syllabi[modelHeader]); //[] keys for the specific syllabus\n            //   this.setState(\n            //     {\n            //       syllabusHeaders: syllabusHeaders,\n            //       currentShowSyllabusList: newShowSyllabistList\n            //     },\n            //     () => {\n            //       this.context.resetHandlerChoice(\n            //         this.context.dataReceiverHandler(this.state)\n            //       );\n            //     }\n            //   );\n            // } else {\n            //   this.setState(\n            //     { syllabusHeaders: this.state.syllabusHeaders },\n            //     () => {\n            //       this.context.resetHandlerChoice(\n            //         this.context.dataReceiverHandler(this.state)\n            //       );\n            //     }\n            //   );\n            // }\n            // break;\n          }\n\n          this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state.syllabi));\n      }\n    };\n\n    this.deleteLessonFromAssignedSyllabusHandler = taskIndex => {\n      let currentScheduledLessons = [...this.state.maxReact];\n      currentScheduledLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReact: currentScheduledLessons\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n\n    this.leftOverLessonChangeHandler = (lessonValue, taskChangeId) => {\n      const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReactWorkLeft[foundTaskId]); //using updated values to define the lesson of the particular pulled out lesson\n\n\n      updatedLessons.lesson = lessonValue; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReactWorkLeft]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskId] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReactWorkLeft: lessons,\n        showLeftOverLessonsFromSyllabus: true\n      }, () => this.lastLessonHeaderHandler(this.context.dataReceiverHandler(this.state)));\n    };\n\n    this.lessonChangeHandler = (lessonValue, taskChangeId) => {\n      //Find the index of the lessons that matches the id sent in\n      const foundTaskIndex = this.state.maxReact.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReact[foundTaskIndex]); //using updated values to define the lesson of the particular pulled out lesson\n      //updatedLessons.lesson = event.target.value;\n\n\n      updatedLessons.lesson = lessonValue; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReact]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskIndex] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReact: lessons\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n\n    this.showSyllabusListHandler = () => {\n      //alert('inside showSyllabusListHandler ');\n      //1st get all keys in an array\n      //2nd use keys of object to get values => name of these syllabus\n      let newShowSyllabistList = !this.state.currentShowSyllabusList;\n      this.setState({\n        currentShowSyllabusList: newShowSyllabistList\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n\n    this.lastSyllabusHeaderHandler = () => {\n      this.context.dataReceiverHandler(this.state); //this.setState({syllabiList})\n      //[{},{}, {}]\n    };\n  }\n\n  render() {\n    // alert(\n    //   `inside SyllabusData handlerChoice: ${this.context.dataRequestDetails.handlerChoice}`\n    // );\n    //syllabusHandlerChoice\n    // let {\n    //   typeOfData,\n    //   handlerChoice,\n    //   dataLocation,\n    //   infoType,\n    //   info\n    // } = this.context.dataRequestDetails;\n    alert(`inside syllabusData -> dataRequestDetails: ${this.context.dataRequestDetails}`); // alert(\n    //   `inside SyllabusData typeOfData: ${typeOfData} handlerChoice:${handlerChoice} dataLocation: ${dataLocation} info: ${info}`\n    // );\n\n    if (this.context.dataRequestDetails.typeOfData === 'syllabus') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          this.lastLessonHeaderHandler();\n          break;\n\n        case '2':\n          this.lastLessonHeaderHandler();\n          break;\n\n        case '3':\n          // alert(\n          //   `case 3 syllabusData for delete index:  ${this.context.dataRequestDetails['index']}`\n          // );\n          this.context.resetHandlerChoice(this.deleteLessonFromAssignedSyllabusHandler(this.context.dataRequestDetails.index));\n          break;\n\n        case '4':\n          //this.props.resetSyllabusHandlerChoice(\n          this.context.resetHandlerChoice(this.lessonChangeHandler(this.context.dataRequestDetails.value, this.context.dataRequestDetails.id));\n          break;\n\n        case '5':\n          //deleting from maxReactWorkLeft & add to maxReact Syllabus\n          this.context.resetHandlerChoice(this.addLessonFromOriginalSyllabusHandler(this.context.dataRequestDetails.index));\n          break;\n\n        case '6':\n          //Lesson change in maxReactWorkLeft\n          //alert('case 6');\n          // leftOverLessonChangeHandler;\n          //this.context.resetSyllabusHandlerChoice();\n          // this.leftOverLessonChangeHandler(\n          //   this.context.dataRequestDetails.value,\n          //   this.context.dataRequestDetails.id\n          // );\n          break;\n\n        case '7':\n          //let index = this.props.index;\n          //this.addLessonFromOriginalSyllabusHandler(index);\n          this.context.resetHandlerChoice(this.addLessonFromOriginalSyllabusHandler(this.context.dataRequestDetails.index));\n          break;\n\n        case '9':\n          this.lastSyllabusHeaderHandler();\n          break;\n\n        case '10':\n          //alert('case 6');\n          // leftOverLessonChangeHandler;\n          //this.context.resetSyllabusHandlerChoice();\n          this.context.resetHandlerChoice(this.assignLessonFromSyllabus()); // this.leftOverLessonChangeHandler(\n          //   this.context.dataRequestDetails.value,\n          //   this.context.dataRequestDetails.id\n          // );\n\n          break;\n\n        case '11':\n          break;\n\n        case '18':\n          //picked syllabus from navBar\n          //this.lastLessonHeaderHandler();\n          // alert(\n          //   `this.context.dataRequestDetails: ${JSON.stringify(\n          //     this.context.dataRequestDetails\n          //   )}`\n          // );\n          this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state)); // this.context.resetHandlerChoice(this.showSyllabusListHandler());\n\n          break;\n      }\n    }\n\n    return null;\n  }\n\n}\n\nSyllabus.contextType = SyllabusContext;\nexport default Syllabus;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/containers/Store/SyllabusData.js"],"names":["React","Component","RightCockpit","TasksData","Store","EventsData","SyllabusContext","Syllabus","state","dataBaseName","maxReact","id","lesson","completion","maxReactWorkLeft","syllabi","syllabusId","name","category","concentration","subject","source","syllabusCompletionTime","completionStatus","currentShowSyllabusList","lessons","section","lessonId","lessonNum","lessonName","travestyBootStrap","lessonCompletionTime","lastLessonHeader","showLeftOverLessonsFromSyllabus","assignLessonFromSyllabus","alert","currentShowLeftOverLessonsFromSyllabus","length","setState","context","dataReceiverHandler","deleteLessonFromOriginalSyllabusHandler","taskIndex","currentOriginalLessons","splice","addLessonFromOriginalSyllabusHandler","lessonToAdd","console","log","currentMaxReactSyllabus","push","lastLessonHeaderHandler","dataRequestDetails","handlerChoice","resetHandlerChoice","dataLocation","dataRquestDetails","newShowSyllabistList","syllabusListKeys","Object","keys","syllabusListLength","modelHeader","syllabusHeaders","deleteLessonFromAssignedSyllabusHandler","currentScheduledLessons","leftOverLessonChangeHandler","lessonValue","taskChangeId","foundTaskId","findIndex","currentId","updatedLessons","lessonChangeHandler","foundTaskIndex","showSyllabusListHandler","lastSyllabusHeaderHandler","render","typeOfData","index","value","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import classes from '../../components/Cockpit/Cockpit.module.css';\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport Store from './Store';\nimport EventsData from './EventsData';\nimport SyllabusContext from '../../context/syllabusContext';\n\nclass Syllabus extends Component {\n  state = {\n    dataBaseName: 'syllabus',\n    maxReact: [\n      { id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n      { id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n      {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    maxReactWorkLeft: [\n      {\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      },\n      {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      },\n      {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }\n    ],\n\n    syllabi: {\n      maxReact: {\n        //key act as name\n        syllabusId: 'maxReact',\n        name: 'Max React Full Stack',\n        category: 'programing',\n        concentration: 'fullstack',\n        subject: 'React',\n        source: 'Udemy',\n        syllabusCompletionTime: '30 hour',\n        completionStatus: '30',\n        currentShowSyllabusList: false, //actived from Navbar syllabus dropdown\n        lessons: [\n          {\n            syllabusId: 'maxReact',\n            section: '7. Diving Deeper into Components & React Internals',\n            lessonId: 'xvlwil',\n            lessonNum: '90',\n            lessonName: 'For props Changes',\n            completion: false\n          },\n          {\n            syllabusId: 'maxReact',\n            section: '7. Diving Deeper into Components & React Internals',\n            lessonId: 'bbbskk',\n            lessonNum: '91',\n            lessonName: 'For state Changes',\n            completion: false\n          },\n          {\n            syllabusId: 'maxReact',\n            section: '7. Diving Deeper into Components & React Internals',\n            lessonId: 'kjhck2',\n            lessonNum: '92',\n            lessonName: 'Using useEffect() in Functional Components',\n            completion: false\n          }\n        ]\n      },\n      travestyBootStrap: {\n        syllabusId: 'travestyBootStrap',\n        name: 'Travesty BootStrap',\n        category: 'programing',\n        concentration: 'front-end',\n        subject: 'Bootstrap',\n        source: 'Udemy',\n        syllabusCompletionTime: '40 hours',\n        completionStatus: '5',\n        currentShowSyllabusList: false,\n        lessons: [\n          {\n            syllabusId: 'travestyBootStrap',\n            section: 'Section 4: Grid System & Flexbox',\n            lessonId: 'xvlwil',\n            lessonNum: '26',\n            lessonName: 'Grid System',\n            lessonCompletionTime: '',\n            completion: false\n          },\n          {\n            syllabusId: 'travestyBootStrap',\n            section: 'Section 4: Grid System & Flexbox',\n            lessonId: 'bbbskk',\n            lessonNum: '27',\n            lessonName: 'Grid Alignment',\n            lessonCompletionTime: '',\n            completion: false\n          },\n          {\n            syllabusId: 'travestyBootStrap',\n            section: 'Section 4: Grid System & Flexbox',\n            lessonId: 'kjhck2',\n            lessonNum: '28',\n            lessonName: 'Flexbox Classes',\n            lessonCompletionTime: '',\n            completion: false\n          }\n        ]\n      }\n    },\n\n    lastLessonHeader: [],\n\n    showLeftOverLessonsFromSyllabus: false,\n    TasksData: 'd'\n  };\n\n  static contextType = SyllabusContext;\n  assignLessonFromSyllabus = () => {\n    alert('inside assignedLesson');\n\n    let currentShowLeftOverLessonsFromSyllabus = this.state\n      .showLeftOverLessonsFromSyllabus;\n\n    if (this.state.maxReact.length != 0) {\n      this.setState(\n        {\n          lastLessonHeader: this.state.maxReact[0],\n          showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus\n        },\n        () => {\n          this.context.dataReceiverHandler(this.state);\n        }\n      );\n    } else {\n      this.setState(\n        {\n          lastLessonHeader: this.state.lastLessonHeader,\n          showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus\n        },\n        () => {\n          this.context.dataReceiverHandler(this.state);\n        }\n      );\n    }\n  };\n\n  deleteLessonFromOriginalSyllabusHandler = taskIndex => {\n    alert('Are you sure you want to add this lesson?');\n\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n\n    currentOriginalLessons.splice(taskIndex, 1);\n\n    this.setState({ maxReactWorkLeft: currentOriginalLessons }, () =>\n      this.context.dataReceiverHandler(this.state)\n    );\n  };\n\n  addLessonFromOriginalSyllabusHandler = taskIndex => {\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n    let lessonToAdd = currentOriginalLessons[taskIndex];\n\n    //add to maxReact the picked lesson\n    console.log('I am inside addNewLesonHandler');\n    let currentMaxReactSyllabus = [...this.state.maxReact];\n    currentMaxReactSyllabus.push(lessonToAdd);\n\n    //currentMaxReactSyllabus.push(newLesson);\n    console.log(currentMaxReactSyllabus);\n    let currentShowLeftOverLessonsFromSyllabus = this.state\n      .showLeftOverLessonsFromSyllabus;\n    //showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus,\n    //Showing current left over Lessons from Syllabus (after addition/deletion)\n    this.setState(\n      {\n        maxReact: currentMaxReactSyllabus\n      },\n      this.deleteLessonFromOriginalSyllabusHandler(taskIndex)\n    );\n  };\n\n  lastLessonHeaderHandler = () => {\n    alert(this.context.dataRequestDetails.handlerChoice);\n    switch (this.context.dataRequestDetails.handlerChoice) {\n      case '1':\n        //list of syllabi\n\n        //[key: syllabiName, value: index]\n        //sallabiName1: {syllabi[syllabikey]}\n        //key = syllabiName+ index & value {this.state[syllabiName]}\n\n        // alert(`syllabiList ${syllabiList}`);\n        // this.context.resetHandlerChoice(\n        //   this.context.dataReceiverHandler(this.state)\n        // );\n\n        if (this.state.maxReact.length != 0) {\n          this.setState(\n            { lastLessonHeader: this.state.maxReact[0] },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        } else {\n          this.setState(\n            { lastLessonHeader: this.state.lastLessonHeader },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        }\n\n        break;\n\n      case '2':\n        alert('In case 2 of lastHeader()');\n        let dataLocation = this.context.dataRquestDetails.dataLocation;\n        if (this.state[dataLocation].length != 0) {\n          this.setState(\n            { lastLessonHeader: this.state[dataLocation][0] },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        } else {\n          this.setState(\n            { lastLessonHeader: this.state.lastLessonHeader },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        }\n        break;\n\n      case '6':\n        //alert('inside case 6');\n        if (this.state.maxReactWorkLeft.length != 0) {\n          this.setState(\n            {\n              lastLessonHeader: this.state.maxReactWorkLeft[0]\n            },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        } else {\n          this.setState(\n            { lastLessonHeader: this.state.lastLessonHeader },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        }\n        break;\n      case '8':\n        //array of keys\n        let newShowSyllabistList = !this.state.currentShowSyllabusList;\n\n        let syllabusListKeys = Object.keys(this.state.syllabi);\n        //[maxReact, boostrap]\n\n        let syllabusListLength = syllabusListKeys.length;\n        //alert(syllabusListLength);\n\n        //taking one of the syllabus object out\n        let modelHeader = syllabusListKeys[0]; //a key of one of the syllabus\n\n        if (syllabusListLength != 0) {\n          let syllabusHeaders = Object.keys(this.state.syllabi[modelHeader]);\n          //[] keys for the specific syllabus\n\n          //   this.setState(\n          //     {\n          //       syllabusHeaders: syllabusHeaders,\n          //       currentShowSyllabusList: newShowSyllabistList\n          //     },\n\n          //     () => {\n          //       this.context.resetHandlerChoice(\n          //         this.context.dataReceiverHandler(this.state)\n          //       );\n          //     }\n          //   );\n          // } else {\n          //   this.setState(\n          //     { syllabusHeaders: this.state.syllabusHeaders },\n\n          //     () => {\n          //       this.context.resetHandlerChoice(\n          //         this.context.dataReceiverHandler(this.state)\n          //       );\n          //     }\n          //   );\n          // }\n\n          // break;\n        }\n        this.context.resetHandlerChoice(\n          this.context.dataReceiverHandler(this.state.syllabi)\n        );\n    }\n  };\n\n  deleteLessonFromAssignedSyllabusHandler = taskIndex => {\n    let currentScheduledLessons = [...this.state.maxReact];\n    currentScheduledLessons.splice(taskIndex, 1);\n    this.setState({ maxReact: currentScheduledLessons }, () =>\n      this.context.dataReceiverHandler(this.state)\n    );\n  };\n\n  leftOverLessonChangeHandler = (lessonValue, taskChangeId) => {\n    const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReactWorkLeft[foundTaskId] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    updatedLessons.lesson = lessonValue;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReactWorkLeft];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskId] = updatedLessons;\n\n    //final update of lessons\n    this.setState(\n      { maxReactWorkLeft: lessons, showLeftOverLessonsFromSyllabus: true },\n      () =>\n        this.lastLessonHeaderHandler(\n          this.context.dataReceiverHandler(this.state)\n        )\n    );\n  };\n\n  lessonChangeHandler = (lessonValue, taskChangeId) => {\n    //Find the index of the lessons that matches the id sent in\n    const foundTaskIndex = this.state.maxReact.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReact[foundTaskIndex] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    //updatedLessons.lesson = event.target.value;\n    updatedLessons.lesson = lessonValue;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReact];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskIndex] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReact: lessons }, () =>\n      this.context.dataReceiverHandler(this.state)\n    );\n  };\n\n  showSyllabusListHandler = () => {\n    //alert('inside showSyllabusListHandler ');\n    //1st get all keys in an array\n    //2nd use keys of object to get values => name of these syllabus\n\n    let newShowSyllabistList = !this.state.currentShowSyllabusList;\n    this.setState(\n      {\n        currentShowSyllabusList: newShowSyllabistList\n      },\n      () => this.context.dataReceiverHandler(this.state)\n    );\n  };\n\n  lastSyllabusHeaderHandler = () => {\n    this.context.dataReceiverHandler(this.state);\n\n    //this.setState({syllabiList})\n\n    //[{},{}, {}]\n  };\n\n  render() {\n    // alert(\n    //   `inside SyllabusData handlerChoice: ${this.context.dataRequestDetails.handlerChoice}`\n    // );\n    //syllabusHandlerChoice\n\n    // let {\n    //   typeOfData,\n    //   handlerChoice,\n    //   dataLocation,\n    //   infoType,\n    //   info\n    // } = this.context.dataRequestDetails;\n\n    alert(\n      `inside syllabusData -> dataRequestDetails: ${this.context.dataRequestDetails}`\n    );\n    // alert(\n    //   `inside SyllabusData typeOfData: ${typeOfData} handlerChoice:${handlerChoice} dataLocation: ${dataLocation} info: ${info}`\n    // );\n\n    if (this.context.dataRequestDetails.typeOfData === 'syllabus') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          this.lastLessonHeaderHandler();\n\n          break;\n\n        case '2':\n          this.lastLessonHeaderHandler();\n          break;\n\n        case '3':\n          // alert(\n          //   `case 3 syllabusData for delete index:  ${this.context.dataRequestDetails['index']}`\n          // );\n          this.context.resetHandlerChoice(\n            this.deleteLessonFromAssignedSyllabusHandler(\n              this.context.dataRequestDetails.index\n            )\n          );\n          break;\n\n        case '4':\n          //this.props.resetSyllabusHandlerChoice(\n\n          this.context.resetHandlerChoice(\n            this.lessonChangeHandler(\n              this.context.dataRequestDetails.value,\n              this.context.dataRequestDetails.id\n            )\n          );\n          break;\n\n        case '5': //deleting from maxReactWorkLeft & add to maxReact Syllabus\n          this.context.resetHandlerChoice(\n            this.addLessonFromOriginalSyllabusHandler(\n              this.context.dataRequestDetails.index\n            )\n          );\n\n          break;\n        case '6': //Lesson change in maxReactWorkLeft\n          //alert('case 6');\n          // leftOverLessonChangeHandler;\n          //this.context.resetSyllabusHandlerChoice();\n\n          // this.leftOverLessonChangeHandler(\n          //   this.context.dataRequestDetails.value,\n          //   this.context.dataRequestDetails.id\n          // );\n\n          break;\n\n        case '7':\n          //let index = this.props.index;\n          //this.addLessonFromOriginalSyllabusHandler(index);\n          this.context.resetHandlerChoice(\n            this.addLessonFromOriginalSyllabusHandler(\n              this.context.dataRequestDetails.index\n            )\n          );\n\n          break;\n\n        case '9':\n          this.lastSyllabusHeaderHandler();\n\n          break;\n        case '10':\n          //alert('case 6');\n          // leftOverLessonChangeHandler;\n          //this.context.resetSyllabusHandlerChoice();\n          this.context.resetHandlerChoice(this.assignLessonFromSyllabus());\n\n          // this.leftOverLessonChangeHandler(\n          //   this.context.dataRequestDetails.value,\n          //   this.context.dataRequestDetails.id\n          // );\n\n          break;\n        case '11':\n          break;\n\n        case '18': //picked syllabus from navBar\n          //this.lastLessonHeaderHandler();\n          // alert(\n          //   `this.context.dataRequestDetails: ${JSON.stringify(\n          //     this.context.dataRequestDetails\n          //   )}`\n          // );\n\n          this.context.resetHandlerChoice(\n            this.context.dataReceiverHandler(this.state)\n          );\n          // this.context.resetHandlerChoice(this.showSyllabusListHandler());\n\n          break;\n      }\n    }\n\n    return null;\n  }\n}\n\nexport default Syllabus;\n"]},"metadata":{},"sourceType":"module"}