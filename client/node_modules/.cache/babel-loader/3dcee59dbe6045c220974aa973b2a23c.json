{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/components/Tasks/Tasks.js\";\n\n/*\nimport React, { PureComponent } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\nimport student from '../../containers/Student.css';\n\nclass Tasks extends PureComponent {\n  constructor(props) {\n    super(props);\n  }\n\n  allTasksHandler() {\n    return this.props.tasks.map((task, index) => {\n      return (\n        <ErrorBoundary key={task.id}>\n          <Task\n            todo={task.todo}\n            deadline={task.deadline}\n            location={task.location}\n            key={task.id}\n            click={() => this.props.clicked(index)}\n            changed={event => this.props.changed(event, task.id)}\n          ></Task>\n        </ErrorBoundary>\n      );\n    });\n  }\n\n  renderTableHeaderAllTasksHandler() {\n    let header = Object.keys(this.props.tasks[0]);\n    return header.map((key, index) => {\n      if (key == 'id') {\n        return <th key={index}>Click to Delete</th>;\n      } else {\n        return <th key={index}>{key.toUpperCase()}</th>;\n      }\n    });\n  }\n\n  // static getDerivedStateFromProps(props, state) {\n  //     console.log('[Tasks] getDerivedStateFromProps')\n  //     return state\n  // }\n\n  //niche -removed\n  // componentWillReceiveProps(props) {\n  //    console.log('[Persons.js] componentWillReceiveProps', props);\n  // }\n\n  /*\n    shouldComponentUpdate (nextProps, nextState) {\n        console.log('[Tasks] shouldComponentUpdate')\n        //comparing if props have changed\n        if (nextProps.tasks !== this.props.tasks) {\n            return true\n        } else {\n            return false\n        }\n       \n    }\n    */\n\n/*\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('[Tasks] getSnapshotBeforeUpdate');\n    return { message: 'Snapshot' };\n  }\n\n  // componentWillUpdate() {\n  //     return\n  // }\n\n  componentDidUpdate(prevProps, prevState, message) {\n    console.log('[Tasks] componentDidUpdate');\n    console.log(message);\n  }\n\n  componentWillUnmount() {\n    console.log('[Tasks.js] componentWillUnmount');\n  }\n\n  render() {\n    console.log('[Tasks] rendering...');\n\n    return (\n      <div>\n        <h1 id=\"title\"> All Tasks</h1>\n        <table id=\"students\">\n          <tbody>\n            <tr>{this.renderTableHeaderAllTasksHandler()}</tr>\n            {this.allTasksHandler()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Tasks;\n*/\n//original\n\n/*\nthis.props.tasks.map((task, index) => {\n            return (<ErrorBoundary key = {task.id}>\n            <Task \n            todo = {task.todo} \n            deadline = {task.deadline}\n            location = {task.location}\n            key = {task.id}\n            click = {() => this.props.clicked(index)}\n            changed = {(event) => this.props.changed (event, task.id)}>Change Task (below)</Task>\n            </ErrorBoundary>\n            )\n          })\n*/\n//original functional component\nimport React, { useEffect } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\n\nconst Tasks = props => {\n  console.log('[Tasks.js] rendering');\n  useEffect(() => {\n    // console.log(`this is the state of alert ${onCallDelete.signalAlert}`);\n    // if (onCallDelete.signalAlert === 'true') {\n    // alert('Are you sure you want to delete this task?');\n    // }\n    return () => {\n      console.log('i am in the return of useEffect');\n    };\n  }, [props.tasks]); //get props from app.js, run through each element in state to feed into <Task>\n  //todo,deadline,location,key,click, changed sent to <Task>\n\n  return props.tasks.map((task, index) => {\n    return React.createElement(ErrorBoundary, {\n      key: task.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Task, {\n      todo: task.todo,\n      deadline: task.deadline,\n      location: task.location,\n      key: task.id,\n      click: () => props.clicked(index),\n      changed: event => props.changed(event, task.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Change Task (below)\"));\n  });\n};\n\nexport default Tasks;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/components/Tasks/Tasks.js"],"names":["React","useEffect","Task","ErrorBoundary","Tasks","props","console","log","tasks","map","task","index","id","todo","deadline","location","clicked","event","changed"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;AAEA;;;;;;;;;;;;;;AAeA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA,WAAO,MAAM;AACXK,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACD,KAFD;AAGD,GARQ,EAQN,CAACF,KAAK,CAACG,KAAP,CARM,CAAT,CAHqB,CAarB;AACA;;AACA,SAAOH,KAAK,CAACG,KAAN,CAAYC,GAAZ,CAAgB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACtC,WACE,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAED,IAAI,CAACE,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AACE,MAAA,IAAI,EAAEF,IAAI,CAACG,IADb;AAEE,MAAA,QAAQ,EAAEH,IAAI,CAACI,QAFjB;AAGE,MAAA,QAAQ,EAAEJ,IAAI,CAACK,QAHjB;AAIE,MAAA,GAAG,EAAEL,IAAI,CAACE,EAJZ;AAKE,MAAA,KAAK,EAAE,MAAMP,KAAK,CAACW,OAAN,CAAcL,KAAd,CALf;AAME,MAAA,OAAO,EAAEM,KAAK,IAAIZ,KAAK,CAACa,OAAN,CAAcD,KAAd,EAAqBP,IAAI,CAACE,EAA1B,CANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CADF;AAcD,GAfM,CAAP;AAgBD,CA/BD;;AAgCA,eAAeR,KAAf","sourcesContent":["/*\nimport React, { PureComponent } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\nimport student from '../../containers/Student.css';\n\nclass Tasks extends PureComponent {\n  constructor(props) {\n    super(props);\n  }\n\n  allTasksHandler() {\n    return this.props.tasks.map((task, index) => {\n      return (\n        <ErrorBoundary key={task.id}>\n          <Task\n            todo={task.todo}\n            deadline={task.deadline}\n            location={task.location}\n            key={task.id}\n            click={() => this.props.clicked(index)}\n            changed={event => this.props.changed(event, task.id)}\n          ></Task>\n        </ErrorBoundary>\n      );\n    });\n  }\n\n  renderTableHeaderAllTasksHandler() {\n    let header = Object.keys(this.props.tasks[0]);\n    return header.map((key, index) => {\n      if (key == 'id') {\n        return <th key={index}>Click to Delete</th>;\n      } else {\n        return <th key={index}>{key.toUpperCase()}</th>;\n      }\n    });\n  }\n\n  // static getDerivedStateFromProps(props, state) {\n  //     console.log('[Tasks] getDerivedStateFromProps')\n  //     return state\n  // }\n\n  //niche -removed\n  // componentWillReceiveProps(props) {\n  //    console.log('[Persons.js] componentWillReceiveProps', props);\n  // }\n\n  /*\n    shouldComponentUpdate (nextProps, nextState) {\n        console.log('[Tasks] shouldComponentUpdate')\n        //comparing if props have changed\n        if (nextProps.tasks !== this.props.tasks) {\n            return true\n        } else {\n            return false\n        }\n       \n    }\n    */\n/*\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('[Tasks] getSnapshotBeforeUpdate');\n    return { message: 'Snapshot' };\n  }\n\n  // componentWillUpdate() {\n  //     return\n  // }\n\n  componentDidUpdate(prevProps, prevState, message) {\n    console.log('[Tasks] componentDidUpdate');\n    console.log(message);\n  }\n\n  componentWillUnmount() {\n    console.log('[Tasks.js] componentWillUnmount');\n  }\n\n  render() {\n    console.log('[Tasks] rendering...');\n\n    return (\n      <div>\n        <h1 id=\"title\"> All Tasks</h1>\n        <table id=\"students\">\n          <tbody>\n            <tr>{this.renderTableHeaderAllTasksHandler()}</tr>\n            {this.allTasksHandler()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Tasks;\n*/\n\n//original\n\n/*\nthis.props.tasks.map((task, index) => {\n            return (<ErrorBoundary key = {task.id}>\n            <Task \n            todo = {task.todo} \n            deadline = {task.deadline}\n            location = {task.location}\n            key = {task.id}\n            click = {() => this.props.clicked(index)}\n            changed = {(event) => this.props.changed (event, task.id)}>Change Task (below)</Task>\n            </ErrorBoundary>\n            )\n          })\n*/\n\n//original functional component\n\nimport React, { useEffect } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\n\nconst Tasks = props => {\n  console.log('[Tasks.js] rendering');\n\n  useEffect(() => {\n    // console.log(`this is the state of alert ${onCallDelete.signalAlert}`);\n    // if (onCallDelete.signalAlert === 'true') {\n    // alert('Are you sure you want to delete this task?');\n    // }\n    return () => {\n      console.log('i am in the return of useEffect');\n    };\n  }, [props.tasks]);\n\n  //get props from app.js, run through each element in state to feed into <Task>\n  //todo,deadline,location,key,click, changed sent to <Task>\n  return props.tasks.map((task, index) => {\n    return (\n      <ErrorBoundary key={task.id}>\n        <Task\n          todo={task.todo}\n          deadline={task.deadline}\n          location={task.location}\n          key={task.id}\n          click={() => props.clicked(index)}\n          changed={event => props.changed(event, task.id)}\n        >\n          Change Task (below)\n        </Task>\n      </ErrorBoundary>\n    );\n  });\n};\nexport default Tasks;\n"]},"metadata":{},"sourceType":"module"}