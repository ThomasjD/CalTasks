{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/src/AgendaEventItem.js\";\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Popover from 'antd/lib/popover';\nimport 'antd/lib/popover/style/index.css';\nimport EventItemPopover from './EventItemPopover';\n\nclass AgendaEventItem extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const _this$props = this.props,\n          eventItem = _this$props.eventItem,\n          isStart = _this$props.isStart,\n          isEnd = _this$props.isEnd,\n          eventItemClick = _this$props.eventItemClick,\n          schedulerData = _this$props.schedulerData,\n          eventItemTemplateResolver = _this$props.eventItemTemplateResolver;\n    const config = schedulerData.config;\n    let roundCls = isStart ? isEnd ? 'round-all' : 'round-head' : isEnd ? 'round-tail' : 'round-none';\n    let bgColor = config.defaultEventBgColor;\n    if (!!eventItem.bgColor) bgColor = eventItem.bgColor;\n    let titleText = schedulerData.behaviors.getEventTextFunc(schedulerData, eventItem);\n    let content = React.createElement(EventItemPopover, Object.assign({}, this.props, {\n      title: eventItem.title,\n      startTime: eventItem.start,\n      endTime: eventItem.end,\n      statusColor: bgColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }));\n    let eventItemTemplate = React.createElement(\"div\", {\n      className: roundCls + ' event-item',\n      key: eventItem.id,\n      style: {\n        height: config.eventItemHeight,\n        maxWidth: config.agendaMaxEventWidth,\n        backgroundColor: bgColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        marginLeft: '10px',\n        lineHeight: \"\".concat(config.eventItemHeight, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, titleText));\n    if (eventItemTemplateResolver != undefined) eventItemTemplate = eventItemTemplateResolver(schedulerData, eventItem, bgColor, isStart, isEnd, 'event-item', config.eventItemHeight, config.agendaMaxEventWidth);\n    return config.eventItemPopoverEnabled ? React.createElement(Popover, {\n      placement: \"bottomLeft\",\n      content: content,\n      trigger: \"hover\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"day-event\",\n      onClick: () => {\n        if (!!eventItemClick) eventItemClick(schedulerData, eventItem);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, eventItemTemplate)) : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"day-event\",\n      onClick: () => {\n        if (!!eventItemClick) eventItemClick(schedulerData, eventItem);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, eventItemTemplate));\n  }\n\n}\n\nAgendaEventItem.propTypes = {\n  schedulerData: PropTypes.object.isRequired,\n  eventItem: PropTypes.object.isRequired,\n  isStart: PropTypes.bool.isRequired,\n  isEnd: PropTypes.bool.isRequired,\n  subtitleGetter: PropTypes.func,\n  eventItemClick: PropTypes.func,\n  viewEventClick: PropTypes.func,\n  viewEventText: PropTypes.string,\n  viewEvent2Click: PropTypes.func,\n  viewEvent2Text: PropTypes.string,\n  eventItemTemplateResolver: PropTypes.func\n};\nexport default AgendaEventItem;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/src/AgendaEventItem.js"],"names":["React","Component","PropTypes","Popover","EventItemPopover","AgendaEventItem","constructor","props","render","eventItem","isStart","isEnd","eventItemClick","schedulerData","eventItemTemplateResolver","config","roundCls","bgColor","defaultEventBgColor","titleText","behaviors","getEventTextFunc","content","title","start","end","eventItemTemplate","id","height","eventItemHeight","maxWidth","agendaMaxEventWidth","backgroundColor","marginLeft","lineHeight","undefined","eventItemPopoverEnabled","propTypes","object","isRequired","bool","subtitleGetter","func","viewEventClick","viewEventText","string","viewEvent2Click","viewEvent2Text"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {PropTypes} from 'prop-types'\r\nimport Popover from 'antd/lib/popover'\r\nimport 'antd/lib/popover/style/index.css'\r\nimport EventItemPopover from './EventItemPopover'\r\n\r\nclass AgendaEventItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    static propTypes = {\r\n        schedulerData: PropTypes.object.isRequired,\r\n        eventItem: PropTypes.object.isRequired,\r\n        isStart: PropTypes.bool.isRequired,\r\n        isEnd: PropTypes.bool.isRequired,\r\n        subtitleGetter: PropTypes.func,\r\n        eventItemClick: PropTypes.func,\r\n        viewEventClick: PropTypes.func,\r\n        viewEventText:PropTypes.string,\r\n        viewEvent2Click: PropTypes.func,\r\n        viewEvent2Text: PropTypes.string,\r\n        eventItemTemplateResolver: PropTypes.func,\r\n    }\r\n\r\n    render() {\r\n        const {eventItem, isStart, isEnd, eventItemClick, schedulerData, eventItemTemplateResolver} = this.props;\r\n        const {config} = schedulerData;\r\n        let roundCls = isStart ? (isEnd ? 'round-all' : 'round-head') : (isEnd ? 'round-tail' : 'round-none');\r\n        let bgColor = config.defaultEventBgColor;\r\n        if(!!eventItem.bgColor)\r\n            bgColor = eventItem.bgColor;\r\n\r\n        let titleText = schedulerData.behaviors.getEventTextFunc(schedulerData, eventItem);\r\n        let content = (\r\n            <EventItemPopover\r\n                {...this.props}\r\n                title={eventItem.title}\r\n                startTime={eventItem.start}\r\n                endTime={eventItem.end}\r\n                statusColor={bgColor}\r\n            />\r\n        );\r\n\r\n        let eventItemTemplate = (\r\n            <div className={roundCls + ' event-item'} key={eventItem.id}\r\n                 style={{height: config.eventItemHeight, maxWidth: config.agendaMaxEventWidth, backgroundColor: bgColor}}>\r\n                <span style={{marginLeft: '10px', lineHeight: `${config.eventItemHeight}px` }}>{titleText}</span>\r\n            </div>\r\n        );\r\n        if(eventItemTemplateResolver != undefined)\r\n            eventItemTemplate = eventItemTemplateResolver(schedulerData, eventItem, bgColor, isStart, isEnd, 'event-item', config.eventItemHeight, config.agendaMaxEventWidth);\r\n\r\n        return ( config.eventItemPopoverEnabled ?\r\n                <Popover placement=\"bottomLeft\" content={content} trigger=\"hover\">\r\n                    <a className=\"day-event\" onClick={() => { if(!!eventItemClick) eventItemClick(schedulerData, eventItem);}}>\r\n                        {eventItemTemplate}\r\n                    </a>\r\n                </Popover> :\r\n                <span>\r\n                    <a className=\"day-event\" onClick={() => { if(!!eventItemClick) eventItemClick(schedulerData, eventItem);}}>\r\n                        {eventItemTemplate}\r\n                    </a>\r\n                </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AgendaEventItem"]},"metadata":{},"sourceType":"module"}