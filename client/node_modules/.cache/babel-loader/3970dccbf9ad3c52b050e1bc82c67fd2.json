{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/src/HeaderView.js\";\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { CellUnits } from './index';\n\nclass HeaderView extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const _this$props = this.props,\n          schedulerData = _this$props.schedulerData,\n          nonAgendaCellHeaderTemplateResolver = _this$props.nonAgendaCellHeaderTemplateResolver;\n    const headers = schedulerData.headers,\n          cellUnit = schedulerData.cellUnit,\n          config = schedulerData.config,\n          localeMoment = schedulerData.localeMoment;\n    let headerHeight = schedulerData.getTableHeaderHeight();\n    let cellWidth = schedulerData.getContentCellWidth();\n    let minuteStepsInHour = schedulerData.getMinuteStepsInHour();\n    let headerList = [];\n    let style = {};\n\n    if (cellUnit === CellUnits.Hour) {\n      headers.forEach((item, index) => {\n        if (index % minuteStepsInHour === 0) {\n          let datetime = localeMoment(item.time);\n          const isCurrentTime = datetime.isSame(new Date(), 'hour');\n          style = !!item.nonWorkingTime ? {\n            width: cellWidth * minuteStepsInHour,\n            color: config.nonWorkingTimeHeadColor,\n            backgroundColor: config.nonWorkingTimeHeadBgColor\n          } : {\n            width: cellWidth * minuteStepsInHour\n          };\n          if (index === headers.length - minuteStepsInHour) style = !!item.nonWorkingTime ? {\n            color: config.nonWorkingTimeHeadColor,\n            backgroundColor: config.nonWorkingTimeHeadBgColor\n          } : {};\n          let pFormattedList = config.nonAgendaDayCellHeaderFormat.split('|').map(item => datetime.format(item));\n          let element;\n\n          if (typeof nonAgendaCellHeaderTemplateResolver === 'function') {\n            element = nonAgendaCellHeaderTemplateResolver(schedulerData, item, pFormattedList, style);\n          } else {\n            const pList = pFormattedList.map((item, index) => React.createElement(\"div\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 44\n              },\n              __self: this\n            }, item));\n            element = React.createElement(\"th\", {\n              key: item.time,\n              className: \"header3-text\",\n              style: style,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 48\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 49\n              },\n              __self: this\n            }, pList));\n          }\n\n          headerList.push(element);\n        }\n      });\n    } else {\n      headerList = headers.map((item, index) => {\n        let datetime = localeMoment(item.time);\n        style = !!item.nonWorkingTime ? {\n          width: cellWidth,\n          color: config.nonWorkingTimeHeadColor,\n          backgroundColor: config.nonWorkingTimeHeadBgColor\n        } : {\n          width: cellWidth\n        };\n        if (index === headers.length - 1) style = !!item.nonWorkingTime ? {\n          color: config.nonWorkingTimeHeadColor,\n          backgroundColor: config.nonWorkingTimeHeadBgColor\n        } : {};\n        let pFormattedList = config.nonAgendaOtherCellHeaderFormat.split('|').map(item => datetime.format(item));\n\n        if (typeof nonAgendaCellHeaderTemplateResolver === 'function') {\n          return nonAgendaCellHeaderTemplateResolver(schedulerData, item, pFormattedList, style);\n        }\n\n        const pList = pFormattedList.map((item, index) => React.createElement(\"div\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, item));\n        return React.createElement(\"th\", {\n          key: item.time,\n          className: \"header3-text\",\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, pList));\n      });\n    }\n\n    return React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      style: {\n        height: headerHeight\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, headerList));\n  }\n\n}\n\nHeaderView.propTypes = {\n  schedulerData: PropTypes.object.isRequired,\n  nonAgendaCellHeaderTemplateResolver: PropTypes.func\n};\nexport default HeaderView;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/src/HeaderView.js"],"names":["React","Component","PropTypes","CellUnits","HeaderView","constructor","props","render","schedulerData","nonAgendaCellHeaderTemplateResolver","headers","cellUnit","config","localeMoment","headerHeight","getTableHeaderHeight","cellWidth","getContentCellWidth","minuteStepsInHour","getMinuteStepsInHour","headerList","style","Hour","forEach","item","index","datetime","time","isCurrentTime","isSame","Date","nonWorkingTime","width","color","nonWorkingTimeHeadColor","backgroundColor","nonWorkingTimeHeadBgColor","length","pFormattedList","nonAgendaDayCellHeaderFormat","split","map","format","element","pList","push","nonAgendaOtherCellHeaderFormat","height","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {PropTypes} from 'prop-types'\r\nimport {CellUnits} from './index'\r\n\r\nclass HeaderView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    static propTypes = {\r\n        schedulerData: PropTypes.object.isRequired,\r\n        nonAgendaCellHeaderTemplateResolver : PropTypes.func,\r\n    }\r\n\r\n    render() {\r\n        const {schedulerData, nonAgendaCellHeaderTemplateResolver} = this.props;\r\n        const {headers, cellUnit, config, localeMoment} = schedulerData;\r\n        let headerHeight = schedulerData.getTableHeaderHeight();\r\n        let cellWidth = schedulerData.getContentCellWidth();\r\n        let minuteStepsInHour = schedulerData.getMinuteStepsInHour();\r\n\r\n        let headerList = [];\r\n        let style = {};\r\n        if(cellUnit === CellUnits.Hour){\r\n            headers.forEach((item, index) => {\r\n                if(index % minuteStepsInHour === 0){\r\n                    let datetime = localeMoment(item.time);\r\n                    const isCurrentTime = datetime.isSame(new Date(), 'hour');\r\n\r\n                    style = !!item.nonWorkingTime ? {width: cellWidth*minuteStepsInHour, color: config.nonWorkingTimeHeadColor, backgroundColor: config.nonWorkingTimeHeadBgColor} : {width: cellWidth*minuteStepsInHour};\r\n\r\n                    if(index === headers.length - minuteStepsInHour)\r\n                        style = !!item.nonWorkingTime ? {color: config.nonWorkingTimeHeadColor, backgroundColor: config.nonWorkingTimeHeadBgColor} : {};\r\n\r\n                    let pFormattedList = config.nonAgendaDayCellHeaderFormat.split('|').map(item => datetime.format(item));\r\n                    let element;\r\n\r\n                    if (typeof nonAgendaCellHeaderTemplateResolver === 'function') {\r\n                        element = nonAgendaCellHeaderTemplateResolver(schedulerData, item, pFormattedList, style)\r\n                    }\r\n                    else {\r\n                        const pList = pFormattedList.map((item, index) => (\r\n                            <div key={index}>{item}</div>\r\n                        ));\r\n\r\n                        element = (\r\n                            <th key={item.time} className=\"header3-text\" style={style}>\r\n                                <div>\r\n                                    {pList}\r\n                                </div>\r\n                            </th>\r\n                        );\r\n                    }\r\n\r\n                    headerList.push(element);\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            headerList = headers.map((item, index) => {\r\n                let datetime = localeMoment(item.time);\r\n                style = !!item.nonWorkingTime ? {width: cellWidth, color: config.nonWorkingTimeHeadColor, backgroundColor: config.nonWorkingTimeHeadBgColor} : {width: cellWidth};\r\n                if(index === headers.length - 1)\r\n                    style = !!item.nonWorkingTime ? {color: config.nonWorkingTimeHeadColor, backgroundColor: config.nonWorkingTimeHeadBgColor} : {};\r\n\r\n                let pFormattedList = config.nonAgendaOtherCellHeaderFormat.split('|').map(item => datetime.format(item));\r\n\r\n                if (typeof nonAgendaCellHeaderTemplateResolver === 'function') {\r\n                    return nonAgendaCellHeaderTemplateResolver(schedulerData, item, pFormattedList, style)\r\n                }\r\n\r\n                const pList = pFormattedList.map((item, index) => (\r\n                    <div key={index}>{item}</div>\r\n                ));\r\n\r\n                return (\r\n                    <th key={item.time} className=\"header3-text\" style={style}>\r\n                        <div>\r\n                            {pList}\r\n                        </div>\r\n                    </th>\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <thead>\r\n                <tr style={{height: headerHeight}}>\r\n                    {headerList}\r\n                </tr>\r\n            </thead>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeaderView\r\n"]},"metadata":{},"sourceType":"module"}