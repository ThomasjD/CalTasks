{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport rocky from './App.module.css';\nimport Tasks from '../components/Tasks/Tasks'; //import Task from '../components/Tasks/Task/Task'\n\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport classes from '../components/Cockpit/Cockpit.module.css';\nimport Cockpit2 from '../components/Cockpit/Cockpit2';\nimport Navbar2 from '../components/Cockpit/Navbar/Navbar2';\nimport '../components/Tasks/Task/Task';\nimport TodayTasks from '../components/TodayTasks/TodayTasks'; //import MaxReact from '../components/Syllabus/MaxReact'\n\nimport WithClass from '../hoc/WithClass';\nimport NewTaskContext from '../context/newTask-context';\nimport RightCockpit from './RightCockpit/RightCockpit';\nimport DataStructure from './DataStructure'; //import Student from './Student.css';\n//import StudentTable from './StudentTable'\n// import StudentTable from './StudentTable';\n//import Navbar from '../components/Cockpit/navBar';\n//import Syllabus from '../components/Syllabus/Syllabus';\n//import for bootstraps\n// import axios from 'axios';\n// import { Container, Row, Col } from 'reactstrap';\n// import Post from '../components/Post';\n// import Header from '../components/Header';\n// import SideCard from '../components/SideCard';\n\nclass App extends Component {\n  constructor(props) {\n    // const bigDaddy = {...this.DataStructure}\n    // console.log(bigDaddy.state.ShowView)\n    super(props);\n\n    this.contentViewHandler = event => {\n      let newViewChoice = event.target.value;\n      console.log(newViewChoice); //Comparing new contentChoice with previous contentChoice\n      //if newContentChoice === oldContentChoice\n      //turn off the view\n\n      if (newViewChoice === this.state.contentChoice) {\n        return this.setState({\n          contentChoice: '0'\n        });\n      } else {\n        //Setting which Content view to show\n        //there will be only 1 contentChoice stored in state\n        switch (newViewChoice) {\n          case '0':\n            //only cockpit\n            this.setState({\n              contentChoice: '0'\n            });\n            break;\n\n          case '1':\n            //All tasks\n            this.setState({\n              contentChoice: '1'\n            });\n\n            if (this.state.tasks != 0) {\n              this.setState({\n                lastHeader: this.state.tasks[0]\n              });\n            } else {\n              this.setState({\n                lastHeader: this.state.lastHeader\n              });\n            }\n\n            break;\n\n          case '2':\n            //TodaysTasks\n            this.setState({\n              contentChoice: '2'\n            });\n\n            if (this.state.Monday != 0) {\n              this.setState({\n                lastTodayTasksHeader: this.state.Monday[0]\n              });\n            } else {\n              this.setState({\n                lastTodayTasksHeader: this.state.lastTodayTasksHeader\n              });\n            }\n\n            break;\n\n          case '3':\n            //Syllabus\n            this.setState({\n              contentChoice: '3',\n              showSyllabus: true\n            });\n            break;\n        }\n      }\n    };\n\n    this.deleteTaskhandler = taskIndex => {\n      alert('Are you sure you want to delete this task?');\n      this.setState({\n        reRenderTasks: true\n      }); //get tasks array\n\n      const tasks = [...this.state.tasks]; //splice task of interst\n\n      tasks.splice(taskIndex, 1); //update new list of tasks to state\n\n      this.setState({\n        tasks: tasks\n      }); //this.setState({ showTasksCounter: false });\n    };\n\n    this.deleteTodayTaskhandler = taskIndex => {\n      alert('Are you sure you want to delete this task?');\n      this.setState({\n        reRenderTodayTasks: true\n      }); //get tasks array\n\n      const Monday = [...this.state.Monday]; //splice task of interst\n\n      Monday.splice(taskIndex, 1); //update new list of tasks to state\n\n      this.setState({\n        Monday: Monday\n      }); //this.setState({ showTasksCounter: false });\n    };\n\n    this.taskChangeHandler = (event, taskChangedId) => {\n      //find the task that matches the taskChangedId\n      const foundTaskId = this.state.tasks.findIndex(currentId => {\n        return currentId.id === taskChangedId;\n      }); //create new task item that we will put into array\n\n      const updatedTask = _objectSpread({}, this.state.tasks[foundTaskId]);\n\n      updatedTask.todo = event.target.value; //pull out the states tasks array\n\n      const tasks = [...this.state.tasks]; //update the task with id of interest w/ new task description\n\n      tasks[foundTaskId] = updatedTask; //update the state\n\n      this.setState({\n        tasks: tasks\n      });\n    };\n\n    this.newTaskHandler = event => {\n      let newTitle = event.target.value.newTaskTitle;\n      console.log(\"this is inside of app.js newTaskHandler \".concat(newTitle));\n    };\n\n    this.todayTaskChangeHandler = (event, taskChangedId) => {\n      //find the task that matches the taskChangedId\n      const foundTaskId = this.state.Monday.findIndex(currentId => {\n        return currentId.id === taskChangedId;\n      }); //create new task item that we will put into array\n\n      const updatedTask = _objectSpread({}, this.state.Monday[foundTaskId]);\n\n      updatedTask.task = event.target.value; //pull out the states tasks array\n\n      const Monday = [...this.state.Monday]; //update the task with id of interest w/ new task description\n\n      Monday[foundTaskId] = updatedTask; //update the state\n\n      this.setState({\n        Monday: Monday\n      });\n    };\n  } // state = {\n  //   tasks: [\n  //     {\n  //       id: 'qrwrwq',\n  //       todo: 'Find work',\n  //       deadline: 'Lunes',\n  //       location: 'Poplado'\n  //     },\n  //     {\n  //       id: 'egewhw',\n  //       todo: 'buy shoes',\n  //       deadline: 'Martes',\n  //       location: 'Floresta'\n  //     },\n  //     {\n  //       id: 'asfasv',\n  //       todo: 'mail package',\n  //       deadline: 'Jueves',\n  //       location: 'Laureles'\n  //     }\n  //   ],\n  //   lastHeaderStatus: true,\n  //   lastHeader: [],\n  //   lastTodayTasksHeader: [],\n  //   maxReact: [\n  //     { id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n  //     { id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n  //     {\n  //       id: 'kjhck2',\n  //       lesson: '92. Using useEffect() in Functional Components ',\n  //       completion: false\n  //     }\n  //   ],\n  //   Monday: [\n  //     { id: 'morning', timeOfDay: '', task: 'comprar comida' },\n  //     { id: 'afternoon', timeOfDay: '', task: 'eat lunch' },\n  //     { id: 'evening', timeOfDay: '', task: 'play ball' }\n  //   ],\n  //   Tuesday: [\n  //     { id: 'morning', task: '' },\n  //     { id: 'afternoon', task: '' },\n  //     { id: 'evening', task: '' }\n  //   ],\n  //   showTasks: false,\n  //   reRenderTasks: false,\n  //   reRenderTodayTasks: false,\n  //   showTasksToday: false,\n  //   showCockpit: true,\n  //   showCockpit2: true,\n  //   showView: '0',\n  //   showNewTask: false,\n  //   showSyllabusFromNav: false,\n  //   showSyllabus: true,\n  //   contentChoice: '0'\n  // };\n\n\n  // componentWillMount() {\n  //   console.log('[App.js] componentWillMount')\n  // }\n  //(year, month, day, hours, minutes, seconds, milliseconds)\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[App.js] shouldComponentUpdate'); // let currentShowTaskStatus = this.state.showTasksCounter;\n    // if (nextState.tasks.length !== this.state.tasks.length) {\n    //   this.setState({ showTasksCounter: false });\n    // }\n\n    return true;\n  }\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount');\n  }\n\n  componentDidUpdate(nextProps, nextState) {\n    console.log('[App.js] componentDidUpdate ');\n\n    if (nextState.tasks.length !== this.state.tasks.length) {\n      this.setState({\n        reRenderTasks: false\n      });\n    }\n  }\n\n  render() {\n    // let viewOptions = null;\n    // if (this.state.showCockpit == true) {\n    //   viewOptions = (\n    //     <React.Fragment>\n    //       <Cockpit\n    //         title={this.props.appTitle}\n    //         allTasksClicked={this.toggleShowTasksHandler}\n    //         tasksLength={this.state.tasks.length}\n    //         todayTasksClicked={this.displayTodayScheduleHandler}\n    //         deleteCockpit={() => {\n    //           this.setState({ showCockpit: false });\n    //         }}\n    //       />\n    //     </React.Fragment>\n    //   );\n    // }\n    // let displayContent = null;\n    // switch (this.state.contentChoice) {\n    //   case '0':\n    //     displayContent = (\n    //       <React.Fragment>\n    //         <h3>Hello Thomas.... What would you like to see?</h3>\n    //         <img\n    //           className={classes.logoImage}\n    //           src={require('../Assets/cockpitIcon.png')}\n    //         />\n    //       </React.Fragment>\n    //     );\n    //     break;\n    //   case '1':\n    //     displayContent = (\n    //       <React.Fragment>\n    //         <p>tasks has # {this.state.tasks.length}</p>\n    //\n    //         <Tasks\n    //           reRenderTasks={this.state.reRenderTasks}\n    //           tasks={this.state.tasks}\n    //           clicked={this.deleteTaskhandler}\n    //           changed={this.taskChangeHandler}\n    //           lastHeader={this.state.lastHeader}\n    //         />\n    //\n    //       </React.Fragment>\n    //     );\n    //     break;\n    //   case '2':\n    //     displayContent = (\n    //       <React.Fragment>\n    //\n    //         <TodayTasks\n    //           reRenderTodayTasks={this.state.reRenderTodayTasks}\n    //           monday={this.state.Monday}\n    //           clicked={this.deleteTodayTaskhandler}\n    //           changed={this.todayTaskChangeHandler}\n    //           lastTodayTasksHeader={this.state.lastTodayTasksHeader}\n    //         />\n    //\n    //       </React.Fragment>\n    //     );\n    //     break;\n    //   case '3':\n    //     displayContent = (\n    //       <React.Fragment>\n    //\n    //         <Cockpit2\n    //           showSyllabusFromNav={this.state.showSyllabusFromNav}\n    //           showSyllabus={this.state.showSyllabus}\n    //           tasks={this.state.tasks}\n    //           lastHeader={this.state.lastHeader}\n    //           deleteCockpit2={() => {\n    //             this.setState({ showCockpit2: false });\n    //           }}\n    //         />\n    //\n    //       </React.Fragment>\n    //     );\n    //     break;\n    // }\n    // let displayOptions = (\n    //   <div>\n    //     <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n    //       <label className=\"btn btn-danger m-1 active\">\n    //         <button\n    //           type=\"radio\"\n    //           name=\"options\"\n    //           id=\"option1\"\n    //           autoComplete=\"off\"\n    //           onClick={event => this.contentViewHandler(event)}\n    //           value=\"0\"\n    //         />{' '}\n    //         Cockpit\n    //       </label>\n    //       <label className=\"btn btn-primary m-1 active\">\n    //         <button\n    //           type=\"radio\"\n    //           name=\"options\"\n    //           id=\"option1\"\n    //           autoComplete=\"off\"\n    //           onClick={event => this.contentViewHandler(event)}\n    //           value=\"1\"\n    //         />{' '}\n    //         All Tasks\n    //       </label>\n    //       <label className=\"btn btn-success m-1 active \">\n    //         <button\n    //           type=\"radio\"\n    //           name=\"options\"\n    //           id=\"option2\"\n    //           autoComplete=\"off\"\n    //           onClick={event => this.contentViewHandler(event)}\n    //           value=\"2\"\n    //         />{' '}\n    //         Todays Tasks\n    //       </label>\n    //       <label className=\"btn btn-warning m-1 \">\n    //         <button\n    //           type=\"radio\"\n    //           name=\"options\"\n    //           id=\"option3\"\n    //           autoComplete=\"off\"\n    //           onClick={event => this.contentViewHandler(event)}\n    //           value=\"3\"\n    //         />{' '}\n    //         React Syllabus\n    //       </label>\n    //     </div>\n    //   </div>\n    // );\n    // //syllabusClicked={this.showSyllabusHandler}\n    // //allTasksClicked={this.toggleShowTasksHandler}\n    // let displayCockpit = (\n    //   <div className=\"container\">\n    //     <div className=\"d-flex flex-row \">\n    //       <div className=\"card text-white bg-info m-1 p-1 col-3\">\n    //         <div className=\"p-1\">{viewOptions}</div>\n    //       </div>\n    //       <div className=\"card bg-light m-1 p-1 col-9\">\n    //         <div className=\"p-1 \">{displayContent}</div>\n    //       </div>\n    //     </div>\n    //   </div>\n    // );\n    return React.createElement(WithClass, {\n      passClass: rocky.App,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, React.createElement(RightCockpit, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }));\n  }\n\n} //<p>{this.props.appTitle}</p>\n\n\nApp.getDerivedStateFromProps = (state, props) => {\n  console.log('[App.js] getDerivedStateFromProps', props);\n  return state;\n};\n\nexport default App; //\n//using css modules on multiple classNames\n//{classNames({[styles.foo]: true, [styles.bar]: true})}\n//<p className={classNames({[rocky[classes]]: true, [rocky.red]: true})}\n\n/*\n<div>\n          <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n            <label className=\"btn btn-danger m-1 active\">\n              <button\n                type=\"radio\"\n                name=\"options\"\n                id=\"option1\"\n                autoComplete=\"off\"\n                onClick={event => this.contentViewHandler(event)}\n                value=\"0\"\n              />{' '}\n              Cockpit\n            </label>\n\n            <label className=\"btn btn-primary m-1 active\">\n              <button\n                type=\"radio\"\n                name=\"options\"\n                id=\"option1\"\n                autoComplete=\"off\"\n                onClick={event => this.contentViewHandler(event)}\n                value=\"1\"\n              />{' '}\n              All Tasks\n            </label>\n\n            <label className=\"btn btn-success m-1 active \">\n              <button\n                type=\"radio\"\n                name=\"options\"\n                id=\"option2\"\n                autoComplete=\"off\"\n                onClick={event => this.contentViewHandler(event)}\n                value=\"2\"\n              />{' '}\n              Todays Tasks\n            </label>\n\n            <label className=\"btn btn-warning m-1 \">\n              <button\n                type=\"radio\"\n                name=\"options\"\n                id=\"option3\"\n                autoComplete=\"off\"\n                onClick={event => this.contentViewHandler(event)}\n                value=\"3\"\n              />{' '}\n              React Syllabus\n            </label>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"d-flex flex-row \">\n            <div className=\"card text-white bg-info m-1 p-1 col-3\">\n              <div className=\"p-1\">{viewOptions}</div>\n            </div>\n            <div className=\"card bg-light m-1 p-1 col-9\">\n              <div className=\"p-1 \">{displayContent}</div>\n            </div>\n          </div>\n        </div>\n        \n        */","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/App.js"],"names":["React","Component","rocky","Tasks","Cockpit","classes","Cockpit2","Navbar2","TodayTasks","WithClass","NewTaskContext","RightCockpit","DataStructure","App","constructor","props","contentViewHandler","event","newViewChoice","target","value","console","log","state","contentChoice","setState","tasks","lastHeader","Monday","lastTodayTasksHeader","showSyllabus","deleteTaskhandler","taskIndex","alert","reRenderTasks","splice","deleteTodayTaskhandler","reRenderTodayTasks","taskChangeHandler","taskChangedId","foundTaskId","findIndex","currentId","id","updatedTask","todo","newTaskHandler","newTitle","newTaskTitle","todayTaskChangeHandler","task","shouldComponentUpdate","nextProps","nextState","componentDidMount","componentDidUpdate","length","render","getDerivedStateFromProps"],"mappings":"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GAAsBI,WAAtB,CAfiD,CAiBjD;;AACA,WAAKnB,QAAL,CAAc;AAAEG,QAAAA,MAAM,EAAEA;AAAV,OAAd;AACD,KAtNkB;AAIlB,GALyB,CAO1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAOA;AACA;AACA;AAEA;AAEAuB,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1ChC,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAD0C,CAE1C;AACA;AACA;AACA;;AACA,WAAO,IAAP;AACD;;AAEDgC,EAAAA,iBAAiB,GAAG;AAClBjC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD;;AAEDiC,EAAAA,kBAAkB,CAACH,SAAD,EAAYC,SAAZ,EAAuB;AACvChC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;;AACA,QAAI+B,SAAS,CAAC3B,KAAV,CAAgB8B,MAAhB,KAA2B,KAAKjC,KAAL,CAAWG,KAAX,CAAiB8B,MAAhD,EAAwD;AACtD,WAAK/B,QAAL,CAAc;AAAES,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACD;AACF;;AA6HDuB,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WACE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAEvD,KAAK,CAACW,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAvXyB,C,CAyX5B;;;AAzXMA,G,CA+DG6C,wB,GAA2B,CAACnC,KAAD,EAAQR,KAAR,KAAkB;AAClDM,EAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDP,KAAjD;AACA,SAAOQ,KAAP;AACD,C;;AAwTH,eAAeV,GAAf,C,CACA;AACA;AACA;AACA;;AAEA","sourcesContent":["import React, { Component } from 'react';\nimport rocky from './App.module.css';\nimport Tasks from '../components/Tasks/Tasks';\n//import Task from '../components/Tasks/Task/Task'\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport classes from '../components/Cockpit/Cockpit.module.css';\nimport Cockpit2 from '../components/Cockpit/Cockpit2';\nimport Navbar2 from '../components/Cockpit/Navbar/Navbar2';\nimport '../components/Tasks/Task/Task';\nimport TodayTasks from '../components/TodayTasks/TodayTasks';\n//import MaxReact from '../components/Syllabus/MaxReact'\nimport WithClass from '../hoc/WithClass';\nimport NewTaskContext from '../context/newTask-context';\nimport RightCockpit from './RightCockpit/RightCockpit';\nimport DataStructure from './DataStructure';\n\n//import Student from './Student.css';\n//import StudentTable from './StudentTable'\n// import StudentTable from './StudentTable';\n//import Navbar from '../components/Cockpit/navBar';\n//import Syllabus from '../components/Syllabus/Syllabus';\n\n//import for bootstraps\n// import axios from 'axios';\n// import { Container, Row, Col } from 'reactstrap';\n// import Post from '../components/Post';\n// import Header from '../components/Header';\n// import SideCard from '../components/SideCard';\n\nclass App extends Component {\n  constructor(props) {\n    // const bigDaddy = {...this.DataStructure}\n    // console.log(bigDaddy.state.ShowView)\n    super(props);\n  }\n\n  // state = {\n  //   tasks: [\n  //     {\n  //       id: 'qrwrwq',\n  //       todo: 'Find work',\n  //       deadline: 'Lunes',\n  //       location: 'Poplado'\n  //     },\n  //     {\n  //       id: 'egewhw',\n  //       todo: 'buy shoes',\n  //       deadline: 'Martes',\n  //       location: 'Floresta'\n  //     },\n  //     {\n  //       id: 'asfasv',\n  //       todo: 'mail package',\n  //       deadline: 'Jueves',\n  //       location: 'Laureles'\n  //     }\n  //   ],\n  //   lastHeaderStatus: true,\n  //   lastHeader: [],\n  //   lastTodayTasksHeader: [],\n  //   maxReact: [\n  //     { id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n  //     { id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n  //     {\n  //       id: 'kjhck2',\n  //       lesson: '92. Using useEffect() in Functional Components ',\n  //       completion: false\n  //     }\n  //   ],\n  //   Monday: [\n  //     { id: 'morning', timeOfDay: '', task: 'comprar comida' },\n  //     { id: 'afternoon', timeOfDay: '', task: 'eat lunch' },\n  //     { id: 'evening', timeOfDay: '', task: 'play ball' }\n  //   ],\n  //   Tuesday: [\n  //     { id: 'morning', task: '' },\n  //     { id: 'afternoon', task: '' },\n  //     { id: 'evening', task: '' }\n  //   ],\n  //   showTasks: false,\n  //   reRenderTasks: false,\n  //   reRenderTodayTasks: false,\n  //   showTasksToday: false,\n  //   showCockpit: true,\n  //   showCockpit2: true,\n  //   showView: '0',\n  //   showNewTask: false,\n  //   showSyllabusFromNav: false,\n  //   showSyllabus: true,\n  //   contentChoice: '0'\n  // };\n\n  static getDerivedStateFromProps = (state, props) => {\n    console.log('[App.js] getDerivedStateFromProps', props);\n    return state;\n  };\n\n  // componentWillMount() {\n  //   console.log('[App.js] componentWillMount')\n  // }\n\n  //(year, month, day, hours, minutes, seconds, milliseconds)\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[App.js] shouldComponentUpdate');\n    // let currentShowTaskStatus = this.state.showTasksCounter;\n    // if (nextState.tasks.length !== this.state.tasks.length) {\n    //   this.setState({ showTasksCounter: false });\n    // }\n    return true;\n  }\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount');\n  }\n\n  componentDidUpdate(nextProps, nextState) {\n    console.log('[App.js] componentDidUpdate ');\n    if (nextState.tasks.length !== this.state.tasks.length) {\n      this.setState({ reRenderTasks: false });\n    }\n  }\n\n  contentViewHandler = event => {\n    let newViewChoice = event.target.value;\n    console.log(newViewChoice);\n    //Comparing new contentChoice with previous contentChoice\n    //if newContentChoice === oldContentChoice\n    //turn off the view\n    if (newViewChoice === this.state.contentChoice) {\n      return this.setState({ contentChoice: '0' });\n    } else {\n      //Setting which Content view to show\n      //there will be only 1 contentChoice stored in state\n      switch (newViewChoice) {\n        case '0': //only cockpit\n          this.setState({ contentChoice: '0' });\n          break;\n        case '1': //All tasks\n          this.setState({ contentChoice: '1' });\n          if (this.state.tasks != 0) {\n            this.setState({ lastHeader: this.state.tasks[0] });\n          } else {\n            this.setState({ lastHeader: this.state.lastHeader });\n          }\n          break;\n\n        case '2': //TodaysTasks\n          this.setState({ contentChoice: '2' });\n          if (this.state.Monday != 0) {\n            this.setState({ lastTodayTasksHeader: this.state.Monday[0] });\n          } else {\n            this.setState({\n              lastTodayTasksHeader: this.state.lastTodayTasksHeader\n            });\n          }\n          break;\n        case '3': //Syllabus\n          this.setState({ contentChoice: '3', showSyllabus: true });\n\n          break;\n      }\n    }\n  };\n\n  //delete a task\n  deleteTaskhandler = taskIndex => {\n    alert('Are you sure you want to delete this task?');\n    this.setState({ reRenderTasks: true });\n\n    //get tasks array\n    const tasks = [...this.state.tasks];\n\n    //splice task of interst\n    tasks.splice(taskIndex, 1);\n\n    //update new list of tasks to state\n    this.setState({ tasks: tasks });\n\n    //this.setState({ showTasksCounter: false });\n  };\n\n  deleteTodayTaskhandler = taskIndex => {\n    alert('Are you sure you want to delete this task?');\n    this.setState({ reRenderTodayTasks: true });\n\n    //get tasks array\n    const Monday = [...this.state.Monday];\n\n    //splice task of interst\n    Monday.splice(taskIndex, 1);\n\n    //update new list of tasks to state\n    this.setState({ Monday: Monday });\n\n    //this.setState({ showTasksCounter: false });\n  };\n\n  //dynamic edit task\n  taskChangeHandler = (event, taskChangedId) => {\n    //find the task that matches the taskChangedId\n    const foundTaskId = this.state.tasks.findIndex(currentId => {\n      return currentId.id === taskChangedId;\n    });\n\n    //create new task item that we will put into array\n    const updatedTask = { ...this.state.tasks[foundTaskId] };\n    updatedTask.todo = event.target.value;\n\n    //pull out the states tasks array\n    const tasks = [...this.state.tasks];\n\n    //update the task with id of interest w/ new task description\n    tasks[foundTaskId] = updatedTask;\n\n    //update the state\n    this.setState({ tasks: tasks });\n  };\n\n  //dynamic edit task for Today (Monday)\n  newTaskHandler = event => {\n    let newTitle = event.target.value.newTaskTitle;\n    console.log(`this is inside of app.js newTaskHandler ${newTitle}`);\n  };\n\n  todayTaskChangeHandler = (event, taskChangedId) => {\n    //find the task that matches the taskChangedId\n    const foundTaskId = this.state.Monday.findIndex(currentId => {\n      return currentId.id === taskChangedId;\n    });\n\n    //create new task item that we will put into array\n    const updatedTask = { ...this.state.Monday[foundTaskId] };\n\n    updatedTask.task = event.target.value;\n\n    //pull out the states tasks array\n    const Monday = [...this.state.Monday];\n\n    //update the task with id of interest w/ new task description\n    Monday[foundTaskId] = updatedTask;\n\n    //update the state\n    this.setState({ Monday: Monday });\n  };\n\n  render() {\n    // let viewOptions = null;\n    // if (this.state.showCockpit == true) {\n    //   viewOptions = (\n    //     <React.Fragment>\n    //       <Cockpit\n    //         title={this.props.appTitle}\n    //         allTasksClicked={this.toggleShowTasksHandler}\n    //         tasksLength={this.state.tasks.length}\n    //         todayTasksClicked={this.displayTodayScheduleHandler}\n    //         deleteCockpit={() => {\n    //           this.setState({ showCockpit: false });\n    //         }}\n    //       />\n    //     </React.Fragment>\n    //   );\n    // }\n\n    // let displayContent = null;\n\n    // switch (this.state.contentChoice) {\n    //   case '0':\n    //     displayContent = (\n    //       <React.Fragment>\n    //         <h3>Hello Thomas.... What would you like to see?</h3>\n    //         <img\n    //           className={classes.logoImage}\n    //           src={require('../Assets/cockpitIcon.png')}\n    //         />\n    //       </React.Fragment>\n    //     );\n    //     break;\n\n    //   case '1':\n    //     displayContent = (\n    //       <React.Fragment>\n    //         <p>tasks has # {this.state.tasks.length}</p>\n    //\n    //         <Tasks\n    //           reRenderTasks={this.state.reRenderTasks}\n    //           tasks={this.state.tasks}\n    //           clicked={this.deleteTaskhandler}\n    //           changed={this.taskChangeHandler}\n    //           lastHeader={this.state.lastHeader}\n    //         />\n    //\n    //       </React.Fragment>\n    //     );\n    //     break;\n\n    //   case '2':\n    //     displayContent = (\n    //       <React.Fragment>\n    //\n    //         <TodayTasks\n    //           reRenderTodayTasks={this.state.reRenderTodayTasks}\n    //           monday={this.state.Monday}\n    //           clicked={this.deleteTodayTaskhandler}\n    //           changed={this.todayTaskChangeHandler}\n    //           lastTodayTasksHeader={this.state.lastTodayTasksHeader}\n    //         />\n    //\n    //       </React.Fragment>\n    //     );\n    //     break;\n\n    //   case '3':\n    //     displayContent = (\n    //       <React.Fragment>\n    //\n    //         <Cockpit2\n    //           showSyllabusFromNav={this.state.showSyllabusFromNav}\n    //           showSyllabus={this.state.showSyllabus}\n    //           tasks={this.state.tasks}\n    //           lastHeader={this.state.lastHeader}\n    //           deleteCockpit2={() => {\n    //             this.setState({ showCockpit2: false });\n    //           }}\n    //         />\n    //\n    //       </React.Fragment>\n    //     );\n    //     break;\n    // }\n\n    // let displayOptions = (\n    //   <div>\n    //     <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n    //       <label className=\"btn btn-danger m-1 active\">\n    //         <button\n    //           type=\"radio\"\n    //           name=\"options\"\n    //           id=\"option1\"\n    //           autoComplete=\"off\"\n    //           onClick={event => this.contentViewHandler(event)}\n    //           value=\"0\"\n    //         />{' '}\n    //         Cockpit\n    //       </label>\n\n    //       <label className=\"btn btn-primary m-1 active\">\n    //         <button\n    //           type=\"radio\"\n    //           name=\"options\"\n    //           id=\"option1\"\n    //           autoComplete=\"off\"\n    //           onClick={event => this.contentViewHandler(event)}\n    //           value=\"1\"\n    //         />{' '}\n    //         All Tasks\n    //       </label>\n\n    //       <label className=\"btn btn-success m-1 active \">\n    //         <button\n    //           type=\"radio\"\n    //           name=\"options\"\n    //           id=\"option2\"\n    //           autoComplete=\"off\"\n    //           onClick={event => this.contentViewHandler(event)}\n    //           value=\"2\"\n    //         />{' '}\n    //         Todays Tasks\n    //       </label>\n\n    //       <label className=\"btn btn-warning m-1 \">\n    //         <button\n    //           type=\"radio\"\n    //           name=\"options\"\n    //           id=\"option3\"\n    //           autoComplete=\"off\"\n    //           onClick={event => this.contentViewHandler(event)}\n    //           value=\"3\"\n    //         />{' '}\n    //         React Syllabus\n    //       </label>\n    //     </div>\n    //   </div>\n    // );\n    // //syllabusClicked={this.showSyllabusHandler}\n    // //allTasksClicked={this.toggleShowTasksHandler}\n\n    // let displayCockpit = (\n    //   <div className=\"container\">\n    //     <div className=\"d-flex flex-row \">\n    //       <div className=\"card text-white bg-info m-1 p-1 col-3\">\n    //         <div className=\"p-1\">{viewOptions}</div>\n    //       </div>\n    //       <div className=\"card bg-light m-1 p-1 col-9\">\n    //         <div className=\"p-1 \">{displayContent}</div>\n    //       </div>\n    //     </div>\n    //   </div>\n    // );\n    return (\n      <WithClass passClass={rocky.App}>\n        <RightCockpit />\n      </WithClass>\n    );\n  }\n}\n//<p>{this.props.appTitle}</p>\nexport default App;\n//\n//using css modules on multiple classNames\n//{classNames({[styles.foo]: true, [styles.bar]: true})}\n//<p className={classNames({[rocky[classes]]: true, [rocky.red]: true})}\n\n/*\n<div>\n          <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n            <label className=\"btn btn-danger m-1 active\">\n              <button\n                type=\"radio\"\n                name=\"options\"\n                id=\"option1\"\n                autoComplete=\"off\"\n                onClick={event => this.contentViewHandler(event)}\n                value=\"0\"\n              />{' '}\n              Cockpit\n            </label>\n\n            <label className=\"btn btn-primary m-1 active\">\n              <button\n                type=\"radio\"\n                name=\"options\"\n                id=\"option1\"\n                autoComplete=\"off\"\n                onClick={event => this.contentViewHandler(event)}\n                value=\"1\"\n              />{' '}\n              All Tasks\n            </label>\n\n            <label className=\"btn btn-success m-1 active \">\n              <button\n                type=\"radio\"\n                name=\"options\"\n                id=\"option2\"\n                autoComplete=\"off\"\n                onClick={event => this.contentViewHandler(event)}\n                value=\"2\"\n              />{' '}\n              Todays Tasks\n            </label>\n\n            <label className=\"btn btn-warning m-1 \">\n              <button\n                type=\"radio\"\n                name=\"options\"\n                id=\"option3\"\n                autoComplete=\"off\"\n                onClick={event => this.contentViewHandler(event)}\n                value=\"3\"\n              />{' '}\n              React Syllabus\n            </label>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"d-flex flex-row \">\n            <div className=\"card text-white bg-info m-1 p-1 col-3\">\n              <div className=\"p-1\">{viewOptions}</div>\n            </div>\n            <div className=\"card bg-light m-1 p-1 col-9\">\n              <div className=\"p-1 \">{displayContent}</div>\n            </div>\n          </div>\n        </div>\n        \n        */\n"]},"metadata":{},"sourceType":"module"}