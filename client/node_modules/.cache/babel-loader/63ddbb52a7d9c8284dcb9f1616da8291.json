{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/components/Tasks/Tasks.js\";\nimport React, { PureComponent } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\nimport student from '../../containers/Student.css';\n\nclass Tasks extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {//lastHeader: this.props.lastHeader\n    };\n  }\n\n  //check to see if there is last header\n  //if its empty then store it\n  //if not empty continue to use it\n  // setupLastTableHeader() {\n  //   if (this.props.tasks != 0) {\n  //     this.setState({ lastHeader: this.state.tasks[0] });\n  //   } else {\n  //     this.setState({ lastHeader: this.state.lastHeader });\n  //   }\n  // }\n  renderTableHeaderAllTasksHandler() {\n    let header = Object.keys(this.props.lastHeader);\n    return header.map((key, index) => {\n      //console.log(`this is the key: (${key}) and the index: (${index})`);\n      if (key === 'id') {\n        return React.createElement(\"th\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, \"Click\\xA0to\\xA0Delete\");\n      } else {\n        return React.createElement(\"th\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, key.toUpperCase());\n      }\n    });\n  }\n\n  allTasksHandler() {\n    return this.props.tasks.map((task, index) => {\n      //destructuring\n      // const { id, name, age, email } = student;\n      return React.createElement(ErrorBoundary, {\n        key: task.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(Task, {\n        todo: task.todo,\n        deadline: task.deadline,\n        location: task.location,\n        particularKey: task.id,\n        click: () => this.props.clicked(index),\n        changed: event => this.props.changed(event, task.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }));\n    });\n  } // static getDerivedStateFromProps(props, state) {\n  //     console.log('[Tasks] getDerivedStateFromProps')\n  //     return state\n  // }\n  //niche -removed\n  // componentWillReceiveProps(props) {\n  //    console.log('[Persons.js] componentWillReceiveProps', props);\n  // }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[Tasks] shouldComponentUpdate'); //comparing if props have changed\n\n    if (nextProps.tasks !== this.props.tasks) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('[Tasks] getSnapshotBeforeUpdate');\n    return {\n      message: 'Snapshot'\n    };\n  } // componentWillUpdate() {\n  //     return\n  // }\n\n\n  componentDidUpdate(prevProps, prevState, message) {\n    console.log('[Tasks] componentDidUpdate');\n    console.log(message);\n  }\n\n  componentWillUnmount() {\n    console.log('[Tasks.js] componentWillUnmount');\n  }\n\n  render() {\n    console.log('[Tasks] rendering...');\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \" All Tasks\"), React.createElement(\"table\", {\n      id: \"students\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.renderTableHeaderAllTasksHandler()), this.allTasksHandler())));\n  }\n\n}\n\nexport default Tasks; //original\n\n/*\nthis.props.tasks.map((task, index) => {\n            return (<ErrorBoundary key = {task.id}>\n            <Task \n            todo = {task.todo} \n            deadline = {task.deadline}\n            location = {task.location}\n            key = {task.id}\n            click = {() => this.props.clicked(index)}\n            changed = {(event) => this.props.changed (event, task.id)}>Change Task (below)</Task>\n            </ErrorBoundary>\n            )\n          })\n*/\n//original functional component\n\n/*\nimport React, { useEffect, useState } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\n//import { isEmptyStatement } from '@babel/types';\n\nconst Tasks = props => {\n  console.log('[Tasks.js] rendering');\n\n  const allTasksHandler = () => {\n    return props.tasks.map((task, index) => {\n      return (\n        //<ErrorBoundary key={task.id}>\n        <Task\n          todo={task.todo}\n          deadline={task.deadline}\n          location={task.location}\n          key={task.id}\n          click={() => props.clicked(index)}\n          changed={event => props.changed(event, task.id)}\n        />\n        //</ErrorBoundary>\n      );\n    });\n  };\n\n  const renderTableHeaderAllTasksHandler = () => {\n    //props.tasks.length !== 0\n    //if (Object.keys(props.tasks !== 0)) {\n\n    //if there are still tasks left\n    if (props.tasks.length > 1) {\n      let header = Object.keys(props.tasks[0]);\n\n      return header.map((key, index) => {\n        console.log(`this is the key: (${key}) and the index: (${index})`);\n        if (key === 'id') {\n          return <th key={index}>Click to Delete</th>;\n        } else {\n          return <th key={index}>{key.toUpperCase()}</th>;\n        }\n      });\n    } else {\n      //if there are no tasks left then these will be used to print the log\n      // return (\n      //   <React.Fragment>\n      //     <th>Click To Delete</th>\n      //     <th>todo</th>\n      //     <th>deadline</th>\n      //     <th>location</th>\n      //   </React.Fragment>\n      // );\n      //console.log(Object.keys(lastTaskHeader.lastHeader));\n      let header = Object.keys(lastTaskHeader.lastHeader[0]);\n\n      return header.map((key, index) => {\n        console.log(`this is the key: (${key}) and the index: (${index})`);\n        if (key === 'id') {\n          return <th key={index}>Click to Delete</th>;\n        } else {\n          return <th key={index}>{key.toUpperCase()}</th>;\n        }\n      });\n    }\n  };\n\n  //console.log('we out of tasks');\n\n  //? console.log('still got some tasks')\n\n  //let header = Object.keys(props.tasks);\n\n  //console.log(`this is the header: ${header}`);\n  const [lastTaskHeader, setLastTaskHeader] = useState({\n    lastHeader: props.tasks\n  });\n\n  useEffect(() => {\n    // console.log(`this is the state of alert ${onCallDelete.signalAlert}`);\n    // if (onCallDelete.signalAlert === 'true') {\n\n    if (props.tasks.length === 1) {\n      //let savedHeader = Object.keys(props.tasks[0]);\n      //let savedHeader = props.tasks\n      console.log(props.tasks);\n      setLastTaskHeader({ lastHeader: props.tasks });\n\n      console.log(`this is the last task alert ${lastTaskHeader.lastHeader}`);\n    }\n    if (props.reRender === true) {\n      alert('Are you sure you want to delete this task?');\n      //return (props.reRender = {})\n    }\n\n    // }\n\n    return () => {\n      console.log('i am in the return of useEffect in TASKS');\n    };\n  }, [props.reRender]);\n  //\n  return (\n    <div>\n      <h1 id=\"title\"> All Tasks</h1>\n\n      <table id=\"students\">\n        <tbody>\n          <tr>{renderTableHeaderAllTasksHandler()}</tr>\n          {allTasksHandler()}\n        </tbody>\n      </table>\n    </div>\n  );\n\n  // return props.tasks.map((task, index) => {\n  //   return (\n  //     <ErrorBoundary key={task.id}>\n  //       <Task\n  //         todo={task.todo}\n  //         deadline={task.deadline}\n  //         location={task.location}\n  //         key={task.id}\n  //         click={() => props.clicked(index)}\n  //         changed={event => props.changed(event, task.id)}\n  //       >\n  //         Change Task (below)\n  //       </Task>\n  //     </ErrorBoundary>\n  //   );\n  // });\n};\nexport default Tasks;\n*/","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/components/Tasks/Tasks.js"],"names":["React","PureComponent","Task","ErrorBoundary","student","Tasks","constructor","props","state","renderTableHeaderAllTasksHandler","header","Object","keys","lastHeader","map","key","index","toUpperCase","allTasksHandler","tasks","task","id","todo","deadline","location","clicked","event","changed","shouldComponentUpdate","nextProps","nextState","console","log","getSnapshotBeforeUpdate","prevProps","prevState","message","componentDidUpdate","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\nimport student from '../../containers/Student.css';\n\nclass Tasks extends PureComponent {\n  constructor(props) {\n    super(props);\n  }\n  state = {\n    //lastHeader: this.props.lastHeader\n  };\n\n  //check to see if there is last header\n  //if its empty then store it\n  //if not empty continue to use it\n\n  // setupLastTableHeader() {\n  //   if (this.props.tasks != 0) {\n  //     this.setState({ lastHeader: this.state.tasks[0] });\n  //   } else {\n  //     this.setState({ lastHeader: this.state.lastHeader });\n  //   }\n  // }\n\n  renderTableHeaderAllTasksHandler() {\n    let header = Object.keys(this.props.lastHeader);\n    return header.map((key, index) => {\n      //console.log(`this is the key: (${key}) and the index: (${index})`);\n      if (key === 'id') {\n        return <th key={index}>Click to Delete</th>;\n      } else {\n        return <th key={index}>{key.toUpperCase()}</th>;\n      }\n    });\n  }\n\n  allTasksHandler() {\n    return this.props.tasks.map((task, index) => {\n      //destructuring\n      // const { id, name, age, email } = student;\n      return (\n        <ErrorBoundary key={task.id}>\n          <Task\n            todo={task.todo}\n            deadline={task.deadline}\n            location={task.location}\n            particularKey={task.id}\n            click={() => this.props.clicked(index)}\n            changed={event => this.props.changed(event, task.id)}\n          ></Task>\n        </ErrorBoundary>\n      );\n    });\n  }\n\n  // static getDerivedStateFromProps(props, state) {\n  //     console.log('[Tasks] getDerivedStateFromProps')\n  //     return state\n  // }\n\n  //niche -removed\n  // componentWillReceiveProps(props) {\n  //    console.log('[Persons.js] componentWillReceiveProps', props);\n  // }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[Tasks] shouldComponentUpdate');\n    //comparing if props have changed\n    if (nextProps.tasks !== this.props.tasks) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('[Tasks] getSnapshotBeforeUpdate');\n    return { message: 'Snapshot' };\n  }\n\n  // componentWillUpdate() {\n  //     return\n  // }\n\n  componentDidUpdate(prevProps, prevState, message) {\n    console.log('[Tasks] componentDidUpdate');\n    console.log(message);\n  }\n\n  componentWillUnmount() {\n    console.log('[Tasks.js] componentWillUnmount');\n  }\n\n  render() {\n    console.log('[Tasks] rendering...');\n\n    return (\n      <div>\n        <h1 id=\"title\"> All Tasks</h1>\n        <table id=\"students\">\n          <tbody>\n            <tr>{this.renderTableHeaderAllTasksHandler()}</tr>\n            {this.allTasksHandler()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Tasks;\n\n//original\n\n/*\nthis.props.tasks.map((task, index) => {\n            return (<ErrorBoundary key = {task.id}>\n            <Task \n            todo = {task.todo} \n            deadline = {task.deadline}\n            location = {task.location}\n            key = {task.id}\n            click = {() => this.props.clicked(index)}\n            changed = {(event) => this.props.changed (event, task.id)}>Change Task (below)</Task>\n            </ErrorBoundary>\n            )\n          })\n*/\n\n//original functional component\n\n/*\nimport React, { useEffect, useState } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\n//import { isEmptyStatement } from '@babel/types';\n\nconst Tasks = props => {\n  console.log('[Tasks.js] rendering');\n\n  const allTasksHandler = () => {\n    return props.tasks.map((task, index) => {\n      return (\n        //<ErrorBoundary key={task.id}>\n        <Task\n          todo={task.todo}\n          deadline={task.deadline}\n          location={task.location}\n          key={task.id}\n          click={() => props.clicked(index)}\n          changed={event => props.changed(event, task.id)}\n        />\n        //</ErrorBoundary>\n      );\n    });\n  };\n\n  const renderTableHeaderAllTasksHandler = () => {\n    //props.tasks.length !== 0\n    //if (Object.keys(props.tasks !== 0)) {\n\n    //if there are still tasks left\n    if (props.tasks.length > 1) {\n      let header = Object.keys(props.tasks[0]);\n\n      return header.map((key, index) => {\n        console.log(`this is the key: (${key}) and the index: (${index})`);\n        if (key === 'id') {\n          return <th key={index}>Click to Delete</th>;\n        } else {\n          return <th key={index}>{key.toUpperCase()}</th>;\n        }\n      });\n    } else {\n      //if there are no tasks left then these will be used to print the log\n      // return (\n      //   <React.Fragment>\n      //     <th>Click To Delete</th>\n      //     <th>todo</th>\n      //     <th>deadline</th>\n      //     <th>location</th>\n      //   </React.Fragment>\n      // );\n      //console.log(Object.keys(lastTaskHeader.lastHeader));\n      let header = Object.keys(lastTaskHeader.lastHeader[0]);\n\n      return header.map((key, index) => {\n        console.log(`this is the key: (${key}) and the index: (${index})`);\n        if (key === 'id') {\n          return <th key={index}>Click to Delete</th>;\n        } else {\n          return <th key={index}>{key.toUpperCase()}</th>;\n        }\n      });\n    }\n  };\n\n  //console.log('we out of tasks');\n\n  //? console.log('still got some tasks')\n\n  //let header = Object.keys(props.tasks);\n\n  //console.log(`this is the header: ${header}`);\n  const [lastTaskHeader, setLastTaskHeader] = useState({\n    lastHeader: props.tasks\n  });\n\n  useEffect(() => {\n    // console.log(`this is the state of alert ${onCallDelete.signalAlert}`);\n    // if (onCallDelete.signalAlert === 'true') {\n\n    if (props.tasks.length === 1) {\n      //let savedHeader = Object.keys(props.tasks[0]);\n      //let savedHeader = props.tasks\n      console.log(props.tasks);\n      setLastTaskHeader({ lastHeader: props.tasks });\n\n      console.log(`this is the last task alert ${lastTaskHeader.lastHeader}`);\n    }\n    if (props.reRender === true) {\n      alert('Are you sure you want to delete this task?');\n      //return (props.reRender = {})\n    }\n\n    // }\n\n    return () => {\n      console.log('i am in the return of useEffect in TASKS');\n    };\n  }, [props.reRender]);\n  //\n  return (\n    <div>\n      <h1 id=\"title\"> All Tasks</h1>\n\n      <table id=\"students\">\n        <tbody>\n          <tr>{renderTableHeaderAllTasksHandler()}</tr>\n          {allTasksHandler()}\n        </tbody>\n      </table>\n    </div>\n  );\n\n  // return props.tasks.map((task, index) => {\n  //   return (\n  //     <ErrorBoundary key={task.id}>\n  //       <Task\n  //         todo={task.todo}\n  //         deadline={task.deadline}\n  //         location={task.location}\n  //         key={task.id}\n  //         click={() => props.clicked(index)}\n  //         changed={event => props.changed(event, task.id)}\n  //       >\n  //         Change Task (below)\n  //       </Task>\n  //     </ErrorBoundary>\n  //   );\n  // });\n};\nexport default Tasks;\n*/\n"]},"metadata":{},"sourceType":"module"}