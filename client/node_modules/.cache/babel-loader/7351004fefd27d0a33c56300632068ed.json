{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/ReactScheduler/DragAndDrop.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Col from 'antd/lib/col';\nimport Row from 'antd/lib/row';\nimport 'antd/lib/grid/style/index.css';\nimport Scheduler, { SchedulerData, ViewTypes, DnDSource, DemoData } from '../src/index';\nimport { DnDTypes } from './DnDTypes';\nimport TaskItem from './TaskItem';\nimport TaskList from './TaskList';\nimport ResourceItem from './ResourceItem';\nimport ResourceList from './ResourceList';\nimport Nav from './Nav';\nimport ViewSrcCode from './ViewSrcCode';\nimport withDragDropContext from './withDnDContext';\n\nclass DragAndDrop extends Component {\n  constructor(props) {\n    super(props);\n\n    this.prevClick = schedulerData => {\n      schedulerData.prev();\n      schedulerData.setEvents(DemoData.eventsForTaskView);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.nextClick = schedulerData => {\n      schedulerData.next();\n      schedulerData.setEvents(DemoData.eventsForTaskView);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.onViewChange = (schedulerData, view) => {\n      schedulerData.setViewType(view.viewType, view.showAgenda, view.isEventPerspective);\n      schedulerData.config.creatable = !view.isEventPerspective;\n      schedulerData.setEvents(DemoData.eventsForTaskView);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.onSelectDate = (schedulerData, date) => {\n      schedulerData.setDate(date);\n      schedulerData.setEvents(DemoData.eventsForTaskView);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.eventClicked = (schedulerData, event) => {\n      alert(\"You just clicked an event: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.ops1 = (schedulerData, event) => {\n      alert(\"You just executed ops1 to event: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.ops2 = (schedulerData, event) => {\n      alert(\"You just executed ops2 to event: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\n      if (confirm(\"Do you want to create a new event? {slotId: \".concat(slotId, \", slotName: \").concat(slotName, \", start: \").concat(start, \", end: \").concat(end, \", type: \").concat(type, \", item: \").concat(item, \"}\"))) {\n        let newFreshId = 0;\n        schedulerData.events.forEach(item => {\n          if (item.id >= newFreshId) newFreshId = item.id + 1;\n        });\n        let newEvent = {\n          id: newFreshId,\n          title: 'New event you just created',\n          start: start,\n          end: end,\n          resourceId: slotId,\n          bgColor: 'purple'\n        };\n\n        if (type === DnDTypes.RESOURCE) {\n          newEvent = _objectSpread({}, newEvent, {\n            groupId: slotId,\n            groupName: slotName,\n            resourceId: item.id\n          });\n        } else if (type === DnDTypes.TASK) {\n          newEvent = _objectSpread({}, newEvent, {\n            groupId: item.id,\n            groupName: item.name\n          });\n        }\n\n        schedulerData.addEvent(newEvent);\n        this.setState({\n          viewModel: schedulerData\n        });\n      }\n    };\n\n    this.updateEventStart = (schedulerData, event, newStart) => {\n      if (confirm(\"Do you want to adjust the start of the event? {eventId: \".concat(event.id, \", eventTitle: \").concat(event.title, \", newStart: \").concat(newStart, \"}\"))) {\n        schedulerData.updateEventStart(event, newStart);\n      }\n\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.updateEventEnd = (schedulerData, event, newEnd) => {\n      if (confirm(\"Do you want to adjust the end of the event? {eventId: \".concat(event.id, \", eventTitle: \").concat(event.title, \", newEnd: \").concat(newEnd, \"}\"))) {\n        schedulerData.updateEventEnd(event, newEnd);\n      }\n\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\n      if (confirm(\"Do you want to move the event? {eventId: \".concat(event.id, \", eventTitle: \").concat(event.title, \", newSlotId: \").concat(slotId, \", newSlotName: \").concat(slotName, \", newStart: \").concat(start, \", newEnd: \").concat(end))) {\n        schedulerData.moveEvent(event, slotId, slotName, start, end);\n        this.setState({\n          viewModel: schedulerData\n        });\n      }\n    };\n\n    this.movingEvent = (schedulerData, slotId, slotName, newStart, newEnd, action, type, item) => {\n      console.log('moving event', schedulerData, slotId, slotName, newStart, newEnd, action, type, item);\n    };\n\n    this.subtitleGetter = (schedulerData, event) => {\n      return schedulerData.isEventPerspective ? schedulerData.getResourceById(event.resourceId).name : event.groupName;\n    };\n\n    this.toggleExpandFunc = (schedulerData, slotId) => {\n      schedulerData.toggleExpandStatus(slotId);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    let _schedulerData = new SchedulerData('2017-12-18', ViewTypes.Month, false, false, {\n      schedulerWidth: '80%',\n      schedulerMaxHeight: 500,\n      views: [{\n        viewName: 'Agenda View',\n        viewType: ViewTypes.Month,\n        showAgenda: true,\n        isEventPerspective: false\n      }, {\n        viewName: 'Resource View',\n        viewType: ViewTypes.Month,\n        showAgenda: false,\n        isEventPerspective: false\n      }, {\n        viewName: 'Task View',\n        viewType: ViewTypes.Month,\n        showAgenda: false,\n        isEventPerspective: true\n      }]\n    });\n\n    _schedulerData.localeMoment.locale('en');\n\n    _schedulerData.setResources(DemoData.resources);\n\n    _schedulerData.setEvents(DemoData.eventsForTaskView);\n\n    this.state = {\n      viewModel: _schedulerData,\n      taskDndSource: new DnDSource(props => {\n        return props.task;\n      }, TaskItem, DnDTypes.TASK),\n      resourceDndSource: new DnDSource(props => {\n        return props.resource;\n      }, ResourceItem, DnDTypes.RESOURCE)\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          viewModel = _this$state.viewModel,\n          taskDndSource = _this$state.taskDndSource,\n          resourceDndSource = _this$state.resourceDndSource;\n    let h3 = viewModel.isEventPerspective ? 'Drag and drop from outside: Drag a resource and drop to the task view' : 'Drag and drop from outside: Drag a task and drop to the resource view';\n    let dndList = viewModel.isEventPerspective ? React.createElement(ResourceList, {\n      schedulerData: viewModel,\n      newEvent: this.newEvent,\n      resourceDndSource: resourceDndSource,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }) : React.createElement(TaskList, {\n      schedulerData: viewModel,\n      newEvent: this.newEvent,\n      taskDndSource: taskDndSource,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }); //register the external DnDSources\n\n    let dndSources = [taskDndSource, resourceDndSource];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, h3, React.createElement(ViewSrcCode, {\n      srcCodeUrl: \"https://github.com/StephenChou1017/react-big-scheduler/blob/master/example/DragAndDrop.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Scheduler, {\n      schedulerData: viewModel,\n      prevClick: this.prevClick,\n      nextClick: this.nextClick,\n      onSelectDate: this.onSelectDate,\n      onViewChange: this.onViewChange,\n      eventItemClick: this.eventClicked,\n      viewEventClick: this.ops1,\n      viewEventText: \"Ops 1\",\n      viewEvent2Text: \"Ops 2\",\n      viewEvent2Click: this.ops2,\n      updateEventStart: this.updateEventStart,\n      updateEventEnd: this.updateEventEnd,\n      moveEvent: this.moveEvent,\n      movingEvent: this.movingEvent,\n      newEvent: this.newEvent,\n      subtitleGetter: this.subtitleGetter,\n      dndSources: dndSources,\n      toggleExpandFunc: this.toggleExpandFunc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(Col, {\n      span: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, dndList))));\n  }\n\n}\n\nexport default withDragDropContext(DragAndDrop);","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/ReactScheduler/DragAndDrop.js"],"names":["React","Component","PropTypes","Col","Row","Scheduler","SchedulerData","ViewTypes","DnDSource","DemoData","DnDTypes","TaskItem","TaskList","ResourceItem","ResourceList","Nav","ViewSrcCode","withDragDropContext","DragAndDrop","constructor","props","prevClick","schedulerData","prev","setEvents","eventsForTaskView","setState","viewModel","nextClick","next","onViewChange","view","setViewType","viewType","showAgenda","isEventPerspective","config","creatable","onSelectDate","date","setDate","eventClicked","event","alert","id","title","ops1","ops2","newEvent","slotId","slotName","start","end","type","item","confirm","newFreshId","events","forEach","resourceId","bgColor","RESOURCE","groupId","groupName","TASK","name","addEvent","updateEventStart","newStart","updateEventEnd","newEnd","moveEvent","movingEvent","action","console","log","subtitleGetter","getResourceById","toggleExpandFunc","toggleExpandStatus","Month","schedulerWidth","schedulerMaxHeight","views","viewName","localeMoment","locale","setResources","resources","state","taskDndSource","task","resourceDndSource","resource","render","h3","dndList","dndSources","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Col from 'antd/lib/col';\nimport Row from 'antd/lib/row';\nimport 'antd/lib/grid/style/index.css';\nimport Scheduler, {\n  SchedulerData,\n  ViewTypes,\n  DnDSource,\n  DemoData\n} from '../src/index';\nimport { DnDTypes } from './DnDTypes';\nimport TaskItem from './TaskItem';\nimport TaskList from './TaskList';\nimport ResourceItem from './ResourceItem';\nimport ResourceList from './ResourceList';\nimport Nav from './Nav';\nimport ViewSrcCode from './ViewSrcCode';\nimport withDragDropContext from './withDnDContext';\n\nclass DragAndDrop extends Component {\n  constructor(props) {\n    super(props);\n\n    let schedulerData = new SchedulerData(\n      '2017-12-18',\n      ViewTypes.Month,\n      false,\n      false,\n      {\n        schedulerWidth: '80%',\n        schedulerMaxHeight: 500,\n        views: [\n          {\n            viewName: 'Agenda View',\n            viewType: ViewTypes.Month,\n            showAgenda: true,\n            isEventPerspective: false\n          },\n          {\n            viewName: 'Resource View',\n            viewType: ViewTypes.Month,\n            showAgenda: false,\n            isEventPerspective: false\n          },\n          {\n            viewName: 'Task View',\n            viewType: ViewTypes.Month,\n            showAgenda: false,\n            isEventPerspective: true\n          }\n        ]\n      }\n    );\n    schedulerData.localeMoment.locale('en');\n    schedulerData.setResources(DemoData.resources);\n    schedulerData.setEvents(DemoData.eventsForTaskView);\n    this.state = {\n      viewModel: schedulerData,\n      taskDndSource: new DnDSource(\n        props => {\n          return props.task;\n        },\n        TaskItem,\n        DnDTypes.TASK\n      ),\n      resourceDndSource: new DnDSource(\n        props => {\n          return props.resource;\n        },\n        ResourceItem,\n        DnDTypes.RESOURCE\n      )\n    };\n  }\n\n  render() {\n    const { viewModel, taskDndSource, resourceDndSource } = this.state;\n    let h3 = viewModel.isEventPerspective\n      ? 'Drag and drop from outside: Drag a resource and drop to the task view'\n      : 'Drag and drop from outside: Drag a task and drop to the resource view';\n    let dndList = viewModel.isEventPerspective ? (\n      <ResourceList\n        schedulerData={viewModel}\n        newEvent={this.newEvent}\n        resourceDndSource={resourceDndSource}\n      />\n    ) : (\n      <TaskList\n        schedulerData={viewModel}\n        newEvent={this.newEvent}\n        taskDndSource={taskDndSource}\n      />\n    );\n\n    //register the external DnDSources\n    let dndSources = [taskDndSource, resourceDndSource];\n    return (\n      <div>\n        <Nav />\n        <div>\n          <h3 style={{ textAlign: 'center' }}>\n            {h3}\n            <ViewSrcCode srcCodeUrl=\"https://github.com/StephenChou1017/react-big-scheduler/blob/master/example/DragAndDrop.js\" />\n          </h3>\n          <Row>\n            <Col span={20}>\n              <Scheduler\n                schedulerData={viewModel}\n                prevClick={this.prevClick}\n                nextClick={this.nextClick}\n                onSelectDate={this.onSelectDate}\n                onViewChange={this.onViewChange}\n                eventItemClick={this.eventClicked}\n                viewEventClick={this.ops1}\n                viewEventText=\"Ops 1\"\n                viewEvent2Text=\"Ops 2\"\n                viewEvent2Click={this.ops2}\n                updateEventStart={this.updateEventStart}\n                updateEventEnd={this.updateEventEnd}\n                moveEvent={this.moveEvent}\n                movingEvent={this.movingEvent}\n                newEvent={this.newEvent}\n                subtitleGetter={this.subtitleGetter}\n                dndSources={dndSources}\n                toggleExpandFunc={this.toggleExpandFunc}\n              />\n            </Col>\n            <Col span={4}>{dndList}</Col>\n          </Row>\n        </div>\n      </div>\n    );\n  }\n\n  prevClick = schedulerData => {\n    schedulerData.prev();\n    schedulerData.setEvents(DemoData.eventsForTaskView);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  nextClick = schedulerData => {\n    schedulerData.next();\n    schedulerData.setEvents(DemoData.eventsForTaskView);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  onViewChange = (schedulerData, view) => {\n    schedulerData.setViewType(\n      view.viewType,\n      view.showAgenda,\n      view.isEventPerspective\n    );\n    schedulerData.config.creatable = !view.isEventPerspective;\n    schedulerData.setEvents(DemoData.eventsForTaskView);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  onSelectDate = (schedulerData, date) => {\n    schedulerData.setDate(date);\n    schedulerData.setEvents(DemoData.eventsForTaskView);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  eventClicked = (schedulerData, event) => {\n    alert(\n      `You just clicked an event: {id: ${event.id}, title: ${event.title}}`\n    );\n  };\n\n  ops1 = (schedulerData, event) => {\n    alert(\n      `You just executed ops1 to event: {id: ${event.id}, title: ${event.title}}`\n    );\n  };\n\n  ops2 = (schedulerData, event) => {\n    alert(\n      `You just executed ops2 to event: {id: ${event.id}, title: ${event.title}}`\n    );\n  };\n\n  newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\n    if (\n      confirm(\n        `Do you want to create a new event? {slotId: ${slotId}, slotName: ${slotName}, start: ${start}, end: ${end}, type: ${type}, item: ${item}}`\n      )\n    ) {\n      let newFreshId = 0;\n      schedulerData.events.forEach(item => {\n        if (item.id >= newFreshId) newFreshId = item.id + 1;\n      });\n\n      let newEvent = {\n        id: newFreshId,\n        title: 'New event you just created',\n        start: start,\n        end: end,\n        resourceId: slotId,\n        bgColor: 'purple'\n      };\n\n      if (type === DnDTypes.RESOURCE) {\n        newEvent = {\n          ...newEvent,\n          groupId: slotId,\n          groupName: slotName,\n          resourceId: item.id\n        };\n      } else if (type === DnDTypes.TASK) {\n        newEvent = {\n          ...newEvent,\n          groupId: item.id,\n          groupName: item.name\n        };\n      }\n\n      schedulerData.addEvent(newEvent);\n      this.setState({\n        viewModel: schedulerData\n      });\n    }\n  };\n\n  updateEventStart = (schedulerData, event, newStart) => {\n    if (\n      confirm(\n        `Do you want to adjust the start of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newStart: ${newStart}}`\n      )\n    ) {\n      schedulerData.updateEventStart(event, newStart);\n    }\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  updateEventEnd = (schedulerData, event, newEnd) => {\n    if (\n      confirm(\n        `Do you want to adjust the end of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newEnd: ${newEnd}}`\n      )\n    ) {\n      schedulerData.updateEventEnd(event, newEnd);\n    }\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\n    if (\n      confirm(\n        `Do you want to move the event? {eventId: ${event.id}, eventTitle: ${event.title}, newSlotId: ${slotId}, newSlotName: ${slotName}, newStart: ${start}, newEnd: ${end}`\n      )\n    ) {\n      schedulerData.moveEvent(event, slotId, slotName, start, end);\n      this.setState({\n        viewModel: schedulerData\n      });\n    }\n  };\n\n  movingEvent = (\n    schedulerData,\n    slotId,\n    slotName,\n    newStart,\n    newEnd,\n    action,\n    type,\n    item\n  ) => {\n    console.log(\n      'moving event',\n      schedulerData,\n      slotId,\n      slotName,\n      newStart,\n      newEnd,\n      action,\n      type,\n      item\n    );\n  };\n\n  subtitleGetter = (schedulerData, event) => {\n    return schedulerData.isEventPerspective\n      ? schedulerData.getResourceById(event.resourceId).name\n      : event.groupName;\n  };\n\n  toggleExpandFunc = (schedulerData, slotId) => {\n    schedulerData.toggleExpandStatus(slotId);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n}\n\nexport default withDragDropContext(DragAndDrop);\n"]},"metadata":{},"sourceType":"module"}