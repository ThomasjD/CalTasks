{"ast":null,"code":"import _objectSpread from \"/Users/thomasjd/Desktop/caltask/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/containers/Store/CalendarData.js\";\nimport React, { Component } from 'react'; //import classes from '../../components/Cockpit/Cockpit.module.css';\n\nimport DatePicker from 'react-datepicker';\nimport numToDay from '../../components/Calendar/numToDay';\nimport StoreContext from '../../context/StoreDataContext';\nimport { format, compareAsc } from 'date-fns';\n\nclass CalendarData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showChooseDate: false,\n      days: {\n        //'200131Fri': {\n        '200303Tue': {\n          unScheduledTasks: [{\n            id: 'task8',\n            title: 'homework;'\n          }],\n          unScheduledEvents: [{\n            eventId: 'event37',\n            eventTitle: 'homework festival;',\n            eventNote: '',\n            eventCategory: '',\n            eventStartTimeDate: {\n              date: 31,\n              dateObjectString: 'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n              toISOString: '2020-01-31T13:00:00.000Z',\n              toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n              toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n              dateString: 'Fri Jan 31 2020',\n              timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n              year: 2020,\n              yearShort: 120,\n              month: 0,\n              day: 5,\n              time: '8:00:00 AM',\n              hour: 8,\n              minute: 0,\n              UTCDate: 31,\n              toLocalString: '1/31/2020, 8:00:00 AM',\n              toLocalDateString: '1/31/2020',\n              toLocaleTimeString: '8:00:00 AM'\n            },\n            eventFinishTimeDate: '',\n            //later: If one-day event\n            eventDuration: '',\n            //later: T -> schedule it on calendarData\n            //F--> put into unScheduledEventsList for that day\n            blockOffTimeSlot: false,\n            showStartTimeDate: false,\n            showFinishTimeDate: false,\n            eventDeadline: '',\n            //later: show multiday non-continous event\n            showMultidayNonContinousDate: false\n          }]\n        }\n      }\n    };\n\n    this.newTaskHandler = value => {\n      let newTask = this.context.dataRequestDetails.value;\n      let newTaskObj = {\n        taskId: value.eventId,\n        //.concat(newEvent.dayObjName),\n        // timeOfDay: startTimeDate.time,\n        objName: value.dayObjName,\n        taskTitle: value.taskTitle,\n        taskNote: value.taskNote,\n        taskDeadline: value.taskDeadline,\n        taskCategory: value.taskCategory,\n        taskStartTimeDate: value.taskStartTimeDate,\n        taskFinishTimeDate: value.taskFinishTimeDate,\n        taskDuration: value.taskDuration,\n        //\n        blockOffTimeSlot: value.blockOffTimeSlot,\n        //required\n        showStartTimeDate: value.showStartTimeDate,\n        //later: show another datePicker to pick a multiday task\n        showFinishTimeDate: value.showFinishTimeDate,\n        //later: show multiday non-continous task\n        showMultidayNonContinousDate: value.showMultidayNonContinousDate,\n        taskDeadline: value.taskDeadline,\n        //later: If one-day task\n        taskDuration: value.taskDuration,\n        //later: T -> schedule it on calendarData\n        //F--> put into unScheduledTasksList for that day\n        blockOffTimeSlot: value.blockOffTimeSlot\n      };\n      let dayObjName = this.context.dataRequestDetails.value.dayObjName;\n      let dataLocation = newTaskObj.dayObjName;\n      let currentDaysObj = this.state.days; //if there there is NO obj for that day\n\n      if (typeof currentDaysObj[dayObjName] == 'undefined') {\n        let newTaskObj = null;\n        let newEventObj = null; //This way a day can store these new objs\n\n        this.newDayObj(dayObjName, newTaskObj, newEventObj);\n      } else {\n        //if there is an obj for that day -> add this newEvent\n        //adding the newEvent to the unScheduledEvents list for that day\n        currentDaysObj[dayObjName].unScheduledTasks.push(newTaskObj);\n        console.log(currentDaysObj[dayObjName]);\n        this.setState({\n          days: currentDaysObj\n        }, () => console.log('Inside of newevent() setState '));\n      }\n    };\n\n    this.newEventHandler = value => {\n      let newEvent = this.context.dataRequestDetails.value;\n      let newEventObj = {\n        eventId: value.eventId,\n        //.concat(newEvent.dayObjName),\n        // timeOfDay: startTimeDate.time,\n        objName: value.dayObjName,\n        eventTitle: value.eventTitle,\n        eventNote: value.eventNote,\n        eventDeadline: value.eventDeadline,\n        eventCategory: value.eventCategory,\n        eventStartTimeDate: value.eventStartTimeDate,\n        eventFinishTimeDate: value.eventFinishTimeDate,\n        eventDuration: value.eventDuration,\n        //\n        blockOffTimeSlot: value.blockOffTimeSlot,\n        //required\n        showStartTimeDate: value.showStartTimeDate,\n        //later: show another datePicker to pick a multiday event\n        showFinishTimeDate: value.showFinishTimeDate,\n        //later: show multiday non-continous event\n        showMultidayNonContinousDate: value.showMultidayNonContinousDate,\n        eventDeadline: value.eventDeadline,\n        //later: If one-day event\n        eventDuration: value.eventDuration,\n        //later: T -> schedule it on calendarData\n        //F--> put into unScheduledEventsList for that day\n        blockOffTimeSlot: value.blockOffTimeSlot\n      };\n      let dayObjName = this.context.dataRequestDetails.value.dayObjName;\n      let dataLocation = newEvent.dayObjName;\n      let currentDaysObj = this.state.days; //if there there is NO obj for that day\n\n      if (typeof currentDaysObj[dayObjName] == 'undefined') {\n        let newTask = null; //This way a day can store these new objs\n\n        this.newDayObj(dayObjName, newTask, newEventObj);\n      } else {\n        //if there is an obj for that day -> add this newEvent\n        if (!newEventObj.blockOffTimeSlot) {\n          console.log('inside if'); //adding the newEvent to the unScheduledEvents list for that day\n\n          currentDaysObj[dayObjName].unScheduledEvents.push(newEventObj);\n        } else {\n          console.log('inside else');\n          console.log(newEventObj.eventStartTimeDate.hour);\n        }\n\n        console.log(currentDaysObj[dayObjName]);\n        this.setState({\n          days: currentDaysObj\n        }, () => console.log('Inside of newevent() setState '));\n      }\n    };\n\n    this.newDayObj = (dayObjName, newTask, newEvent) => {\n      console.log('inside newDayObj '); //empty obj if dayObjName doesn't exist\n\n      let newDayObj = {\n        unScheduledTasks: newTask,\n        unScheduledEvents: newEvent,\n        repeats: ['hello', 'there'],\n        hours: {\n          '00:00': '',\n          '00:30': '',\n          '01:00': '',\n          '01:30': '',\n          '02:00': '',\n          '02:30': '',\n          '03:00': '',\n          '03:30': '',\n          '04:00': '',\n          '04:30': '',\n          '05:00': '',\n          '05:30': '',\n          '06:00': '',\n          '06:30': '',\n          '07:00': '',\n          '08:30': '',\n          '08:00': '',\n          '08:30': '',\n          '09:00': '',\n          '09:30': '',\n          '10:00': '',\n          '10:30': '',\n          '11:00': '',\n          '11:30': '',\n          '12:00': '',\n          '12:30': '',\n          '13:00': '',\n          '13:30': '',\n          '14:00': '',\n          '14:30': '',\n          '15:00': '',\n          '15:30': '',\n          '16:00': '',\n          '16:30': '',\n          '17:00': '',\n          '17:30': '',\n          '18:00': '',\n          '18.30': '',\n          '19:00': '',\n          '19.30': '',\n          '20:00': '',\n          '20.30': '',\n          '21:00': '',\n          '21.30': '',\n          '02:00': '',\n          '22.30': '',\n          '23:00': '',\n          '23.30': '',\n          '24:00': '',\n          '24.30': ''\n        }\n      };\n\n      let updatedDayObj = _objectSpread({}, this.state.days, {\n        [dayObjName]: newDayObj\n      });\n\n      this.setState({\n        days: updatedDayObj\n      });\n    };\n  }\n\n  render() {\n    console.dir(this.state);\n\n    if (this.context.dataRequestDetails && this.context.dataRequestDetails.typeOfData === 'CalendarData') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          //new Event unblocked hours\n          this.context.resetHandlerChoice(this.newEventHandler(this.context.dataRequestDetails.value));\n          break;\n      }\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    });\n  }\n\n}\n\nCalendarData.contextType = StoreContext;\nexport default CalendarData;\n/* function for datePicker for react & handler change()\nhandleStartTimeDateChange(date) {\nlet currentShowStartTimeDate = this.state.showStartTimeDate;\nlet day = format(date, 'E');\nlet dateDigit = format(date, 'dd');\nlet year = format(date, 'yy');\nlet month = format(date, 'MM');\nlet dayObjName = year + month + dateDigit + day;\n// console.log(`day: ${day} type: ${typeof day}`);\n// console.log(`date: ${dateDigit} type: ${typeof dateDigit}`);\n// console.log(`year: ${year} type: ${typeof year}`);\n// console.log(`month: ${month} type: ${typeof month}`);\n// console.log(`dayObjName: ${dayObjName} type: ${typeof dayObjName}`);\nlet currentDaysObj = this.state.days;\n//if there there is NO obj for that day\nif (typeof currentDaysObj[dayObjName] == 'undefined') {\nthis.newDayObj(dayObjName);\n} else {//if there is an obj for that day\nlet newTask = { id: 'task243', title: 'groceries' };\ncurrentDaysObj[dayObjName].unscheduledtasks.push(newTask);\nconsole.log(currentDaysObj[dayObjName]);\nthis.setState(\n{\ndays: currentDaysObj\n},\n() => console.log(this.state.days[dayObjName])\n);\n}\n}\n<div className=\"container\">\n<DatePicker\nplaceholderText=\"Choose Start Time\"\nselected={this.state.startDate}\nonChange={date => this.handleStartTimeDateChange(date)}\nshowTimeSelect\ntimeFormat=\"HH:mm\"\ntimeIntervals={30}\ntimeCaption=\"Start\"\ndateFormat=\"MMMM dd, yyyy\"\n/>\n</div> */","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/containers/Store/CalendarData.js"],"names":["React","Component","DatePicker","numToDay","StoreContext","format","compareAsc","CalendarData","constructor","props","state","showChooseDate","days","unScheduledTasks","id","title","unScheduledEvents","eventId","eventTitle","eventNote","eventCategory","eventStartTimeDate","date","dateObjectString","toISOString","toUTCString","toGMTString","dateString","timeString","year","yearShort","month","day","time","hour","minute","UTCDate","toLocalString","toLocalDateString","toLocaleTimeString","eventFinishTimeDate","eventDuration","blockOffTimeSlot","showStartTimeDate","showFinishTimeDate","eventDeadline","showMultidayNonContinousDate","newTaskHandler","value","newTask","context","dataRequestDetails","newTaskObj","taskId","objName","dayObjName","taskTitle","taskNote","taskDeadline","taskCategory","taskStartTimeDate","taskFinishTimeDate","taskDuration","dataLocation","currentDaysObj","newEventObj","newDayObj","push","console","log","setState","newEventHandler","newEvent","repeats","hours","updatedDayObj","render","dir","typeOfData","handlerChoice","resetHandlerChoice","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import classes from '../../components/Cockpit/Cockpit.module.css';\nimport DatePicker from 'react-datepicker';\nimport numToDay from '../../components/Calendar/numToDay';\nimport StoreContext from '../../context/StoreDataContext';\nimport { format, compareAsc } from 'date-fns';\nclass CalendarData extends Component {\n  constructor(props) {\n    super(props);\n    this.newDayObj = (dayObjName, newTask, newEvent) => {\n      console.log('inside newDayObj ');\n      //empty obj if dayObjName doesn't exist\n      let newDayObj = {\n        unScheduledTasks: newTask,\n        unScheduledEvents: newEvent,\n        repeats: ['hello', 'there'],\n        hours: {\n          '00:00': '',\n          '00:30': '',\n          '01:00': '',\n          '01:30': '',\n          '02:00': '',\n          '02:30': '',\n          '03:00': '',\n          '03:30': '',\n          '04:00': '',\n          '04:30': '',\n          '05:00': '',\n          '05:30': '',\n          '06:00': '',\n          '06:30': '',\n          '07:00': '',\n          '08:30': '',\n          '08:00': '',\n          '08:30': '',\n          '09:00': '',\n          '09:30': '',\n          '10:00': '',\n          '10:30': '',\n          '11:00': '',\n          '11:30': '',\n          '12:00': '',\n          '12:30': '',\n          '13:00': '',\n          '13:30': '',\n          '14:00': '',\n          '14:30': '',\n          '15:00': '',\n          '15:30': '',\n          '16:00': '',\n          '16:30': '',\n          '17:00': '',\n          '17:30': '',\n          '18:00': '',\n          '18.30': '',\n          '19:00': '',\n          '19.30': '',\n          '20:00': '',\n          '20.30': '',\n          '21:00': '',\n          '21.30': '',\n          '02:00': '',\n          '22.30': '',\n          '23:00': '',\n          '23.30': '',\n          '24:00': '',\n          '24.30': ''\n        }\n      };\n      let updatedDayObj = { ...this.state.days, [dayObjName]: newDayObj };\n      this.setState({ days: updatedDayObj });\n    };\n  }\n  state = {\n    showChooseDate: false,\n    days: {\n      //'200131Fri': {\n      '200303Tue': {\n        unScheduledTasks: [{ id: 'task8', title: 'homework;' }],\n        unScheduledEvents: [\n          {\n            eventId: 'event37',\n            eventTitle: 'homework festival;',\n            eventNote: '',\n            eventCategory: '',\n            eventStartTimeDate: {\n              date: 31,\n              dateObjectString:\n                'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n              toISOString: '2020-01-31T13:00:00.000Z',\n              toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n              toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n              dateString: 'Fri Jan 31 2020',\n              timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n              year: 2020,\n              yearShort: 120,\n              month: 0,\n              day: 5,\n              time: '8:00:00 AM',\n              hour: 8,\n              minute: 0,\n              UTCDate: 31,\n              toLocalString: '1/31/2020, 8:00:00 AM',\n              toLocalDateString: '1/31/2020',\n              toLocaleTimeString: '8:00:00 AM'\n            },\n            eventFinishTimeDate: '',\n            //later: If one-day event\n            eventDuration: '',\n            //later: T -> schedule it on calendarData\n            //F--> put into unScheduledEventsList for that day\n            blockOffTimeSlot: false,\n            showStartTimeDate: false,\n            showFinishTimeDate: false,\n            eventDeadline: '',\n            //later: show multiday non-continous event\n            showMultidayNonContinousDate: false\n          }\n        ]\n      }\n    }\n  };\n  static contextType = StoreContext;\n  newTaskHandler = value => {\n    let newTask = this.context.dataRequestDetails.value;\n    let newTaskObj = {\n      taskId: value.eventId, //.concat(newEvent.dayObjName),\n      // timeOfDay: startTimeDate.time,\n      objName: value.dayObjName,\n      taskTitle: value.taskTitle,\n      taskNote: value.taskNote,\n      taskDeadline: value.taskDeadline,\n      taskCategory: value.taskCategory,\n      taskStartTimeDate: value.taskStartTimeDate,\n      taskFinishTimeDate: value.taskFinishTimeDate,\n      taskDuration: value.taskDuration, //\n      blockOffTimeSlot: value.blockOffTimeSlot,\n      //required\n      showStartTimeDate: value.showStartTimeDate,\n      //later: show another datePicker to pick a multiday task\n      showFinishTimeDate: value.showFinishTimeDate,\n      //later: show multiday non-continous task\n      showMultidayNonContinousDate: value.showMultidayNonContinousDate,\n      taskDeadline: value.taskDeadline,\n      //later: If one-day task\n      taskDuration: value.taskDuration,\n      //later: T -> schedule it on calendarData\n      //F--> put into unScheduledTasksList for that day\n      blockOffTimeSlot: value.blockOffTimeSlot\n    };\n    let dayObjName = this.context.dataRequestDetails.value.dayObjName;\n    let dataLocation = newTaskObj.dayObjName;\n    let currentDaysObj = this.state.days;\n    //if there there is NO obj for that day\n    if (typeof currentDaysObj[dayObjName] == 'undefined') {\n      let newTaskObj = null;\n      let newEventObj = null;\n      //This way a day can store these new objs\n      this.newDayObj(dayObjName, newTaskObj, newEventObj);\n    } else {\n      //if there is an obj for that day -> add this newEvent\n      //adding the newEvent to the unScheduledEvents list for that day\n      currentDaysObj[dayObjName].unScheduledTasks.push(newTaskObj);\n      console.log(currentDaysObj[dayObjName]);\n      this.setState(\n        {\n          days: currentDaysObj\n        },\n        () => console.log('Inside of newevent() setState ')\n      );\n    }\n  };\n  newEventHandler = value => {\n    let newEvent = this.context.dataRequestDetails.value;\n    let newEventObj = {\n      eventId: value.eventId, //.concat(newEvent.dayObjName),\n      // timeOfDay: startTimeDate.time,\n      objName: value.dayObjName,\n      eventTitle: value.eventTitle,\n      eventNote: value.eventNote,\n      eventDeadline: value.eventDeadline,\n      eventCategory: value.eventCategory,\n      eventStartTimeDate: value.eventStartTimeDate,\n      eventFinishTimeDate: value.eventFinishTimeDate,\n      eventDuration: value.eventDuration, //\n      blockOffTimeSlot: value.blockOffTimeSlot,\n      //required\n      showStartTimeDate: value.showStartTimeDate,\n      //later: show another datePicker to pick a multiday event\n      showFinishTimeDate: value.showFinishTimeDate,\n      //later: show multiday non-continous event\n      showMultidayNonContinousDate: value.showMultidayNonContinousDate,\n      eventDeadline: value.eventDeadline,\n      //later: If one-day event\n      eventDuration: value.eventDuration,\n      //later: T -> schedule it on calendarData\n      //F--> put into unScheduledEventsList for that day\n      blockOffTimeSlot: value.blockOffTimeSlot\n    };\n\n    let dayObjName = this.context.dataRequestDetails.value.dayObjName;\n    let dataLocation = newEvent.dayObjName;\n    let currentDaysObj = this.state.days;\n\n    //if there there is NO obj for that day\n    if (typeof currentDaysObj[dayObjName] == 'undefined') {\n      let newTask = null;\n      //This way a day can store these new objs\n      this.newDayObj(dayObjName, newTask, newEventObj);\n    } else {\n      //if there is an obj for that day -> add this newEvent\n\n      if (!newEventObj.blockOffTimeSlot) {\n        console.log('inside if');\n        //adding the newEvent to the unScheduledEvents list for that day\n        currentDaysObj[dayObjName].unScheduledEvents.push(newEventObj);\n      } else {\n        console.log('inside else');\n        console.log(newEventObj.eventStartTimeDate.hour);\n      }\n      console.log(currentDaysObj[dayObjName]);\n      this.setState(\n        {\n          days: currentDaysObj\n        },\n        () => console.log('Inside of newevent() setState ')\n      );\n    }\n  };\n  render() {\n    console.dir(this.state);\n    if (\n      this.context.dataRequestDetails &&\n      this.context.dataRequestDetails.typeOfData === 'CalendarData'\n    ) {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1': //new Event unblocked hours\n          this.context.resetHandlerChoice(\n            this.newEventHandler(this.context.dataRequestDetails.value)\n          );\n          break;\n      }\n    }\n    return <React.Fragment></React.Fragment>;\n  }\n}\nexport default CalendarData;\n/* function for datePicker for react & handler change()\nhandleStartTimeDateChange(date) {\nlet currentShowStartTimeDate = this.state.showStartTimeDate;\nlet day = format(date, 'E');\nlet dateDigit = format(date, 'dd');\nlet year = format(date, 'yy');\nlet month = format(date, 'MM');\nlet dayObjName = year + month + dateDigit + day;\n// console.log(`day: ${day} type: ${typeof day}`);\n// console.log(`date: ${dateDigit} type: ${typeof dateDigit}`);\n// console.log(`year: ${year} type: ${typeof year}`);\n// console.log(`month: ${month} type: ${typeof month}`);\n// console.log(`dayObjName: ${dayObjName} type: ${typeof dayObjName}`);\nlet currentDaysObj = this.state.days;\n//if there there is NO obj for that day\nif (typeof currentDaysObj[dayObjName] == 'undefined') {\nthis.newDayObj(dayObjName);\n} else {//if there is an obj for that day\nlet newTask = { id: 'task243', title: 'groceries' };\ncurrentDaysObj[dayObjName].unscheduledtasks.push(newTask);\nconsole.log(currentDaysObj[dayObjName]);\nthis.setState(\n{\ndays: currentDaysObj\n},\n() => console.log(this.state.days[dayObjName])\n);\n}\n}\n<div className=\"container\">\n<DatePicker\nplaceholderText=\"Choose Start Time\"\nselected={this.state.startDate}\nonChange={date => this.handleStartTimeDateChange(date)}\nshowTimeSelect\ntimeFormat=\"HH:mm\"\ntimeIntervals={30}\ntimeCaption=\"Start\"\ndateFormat=\"MMMM dd, yyyy\"\n/>\n</div> */\n"]},"metadata":{},"sourceType":"module"}