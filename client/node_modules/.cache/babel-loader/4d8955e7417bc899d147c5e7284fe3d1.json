{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/components/Cockpit/displayContent.js\";\nimport React, { Component, useContext } from 'react';\nimport classes from '../../components/Cockpit/Cockpit.module.css';\nimport Cockpit from './Cockpit';\nimport Cockpit2 from './Cockpit2';\nimport Navbar2 from './Navbar/Navbar2';\nimport Tasks from '../ViewContent/Tasks/Tasks';\nimport TodayTasks from '../ViewContent/TodayTasks/TodayTasks';\nimport Lessons from '../ViewContent/Syllabus/MaxReact/Lessons';\nimport ViewContent from './ViewContentOptions';\nimport NewTask from '../Creation/newTask';\nimport NewEvent from '../Creation/NewEvent';\nimport NewSyllabus from '../Creation/newSyllabus';\nimport SyllabusContext from '../../context/syllabusContext';\n\nconst displayContent2 = props => {\n  const syllabusContext = useContext(SyllabusContext);\n  let displayContent = null;\n\n  switch (props.everything.contentChoice) {\n    case '0':\n      displayContent = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"Hello Thomas.... What would you like to see?\"), React.createElement(\"img\", {\n        className: classes.logoImage,\n        src: require('../../Assets/cockpitIcon.png'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }));\n      break;\n\n    case '1':\n      displayContent = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"tasks\\xA0has\\xA0#\\xA0\", props.everything.tasks.length), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", React.createElement(Tasks, {\n        reRenderTasks: props.everything.reRenderTasks,\n        tasks: props.everything.tasks,\n        clicked: props.deleteTaskhandler,\n        changed: props.taskChangeHandler,\n        lastHeader: props.everything.lastHeader,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\");\n      break;\n\n    case '2':\n      displayContent = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", React.createElement(TodayTasks, {\n        reRenderTodayTasks: props.everything.reRenderTodayTasks,\n        monday: props.everything.Monday,\n        clicked: props.deleteTodayTaskhandler,\n        clicked: props.deleteTaskhandler,\n        changed: props.todayTaskChangeHandler,\n        lastTodayTasksHeader: props.everything.lastTodayTasksHeader,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\");\n      break;\n\n    case '3':\n      displayContent = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, syllabusContext.everythingSyllabus.syllabusData ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"tasks has #\", ' ', syllabusContext.everythingSyllabus.syllabusData.maxReact.length), React.createElement(Lessons, {\n        everything: props.everything,\n        lessons: syllabusContext.everythingSyllabus.syllabusData.maxReact,\n        lessonsLength: syllabusContext.everythingSyllabus.syllabusData.maxReact.length,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })) : null);\n      /*\n        clicked={(event, index, handlerType) =>\n                    props.deleteLessonHandler(event, index, handlerType)\n                  }\n        */\n\n      break;\n\n    case '4':\n      displayContent = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(NewTask, {\n        newestTask: props.newestTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }));\n      break;\n\n    case '5':\n      displayContent = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(NewEvent, {\n        newestEvent: props.newestEvent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }));\n      break;\n    //showLeftOverLessonsFromSyllabus: for Table Header (add/delete this lesson message)\n\n    case '6':\n      if (syllabusContext.everythingSyllabus.syllabusData) {\n        displayContent = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, React.createElement(NewSyllabus, {\n          newestSyllabus: props.newestSyllabus,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }), syllabusContext.everythingSyllabus.syllabusData.showLeftOverLessonsFromSyllabus ? React.createElement(Lessons, {\n          everything: props.everything // showLeftOverLessonsFromOrigSyllabus={\n          //   this.props.everythingSyllabus.syllabusData\n          //     .showLeftOverLessonsFromSyllabus\n          // }\n          ,\n          lessons: syllabusContext.everythingSyllabus.syllabusData.maxReactWorkLeft // changed={(event, handlerType, id) =>\n          //   this.props.leftOverLessonChangeHandler(event, handlerType, id)\n          // }\n          ,\n          lastLessonHeader: syllabusContext.everythingSyllabus.syllabusData.lastLessonHeader,\n          lessonsLength: syllabusContext.everythingSyllabus.syllabusData.maxReactWorkLeft.length,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }) : null);\n      }\n\n      break;\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, displayContent);\n};\n/*\n  class DisplayContent extends Component {\n  //const syllabusContext = useContext(SyllabusContext);\n  static contextType = SyllabusContext;\n  render() {\n    let displayContent = null;\n\n    switch (this.props.everything.contentChoice) {\n      case '0':\n        displayContent = (\n          <React.Fragment>\n            <h3>Hello Thomas.... What would you like to see?</h3>\n            <img\n              className={classes.logoImage}\n              src={require('../../Assets/cockpitIcon.png')}\n            />\n          </React.Fragment>\n        );\n        break;\n\n      case '1':\n        displayContent = (\n          <React.Fragment>\n            <p>tasks has # {this.props.everything.tasks.length}</p>\n                        \n            <Tasks\n              reRenderTasks={this.props.everything.reRenderTasks}\n              tasks={this.props.everything.tasks}\n              clicked={this.props.deleteTaskhandler}\n              changed={this.props.taskChangeHandler}\n              lastHeader={this.props.everything.lastHeader}\n            />\n                      \n          </React.Fragment>\n        );\n        break;\n\n      case '2':\n        displayContent = (\n          <React.Fragment>\n                        \n            <TodayTasks\n              reRenderTodayTasks={this.props.everything.reRenderTodayTasks}\n              monday={this.props.everything.Monday}\n              clicked={this.props.deleteTodayTaskhandler}\n              clicked={this.props.deleteTaskhandler}\n              changed={this.props.todayTaskChangeHandler}\n              lastTodayTasksHeader={this.props.everything.lastTodayTasksHeader}\n            />\n                      \n          </React.Fragment>\n        );\n        break;\n\n      case '3':\n        displayContent = (\n          <React.Fragment>\n            {this.context.everythingSyllabus.syllabusData ? (\n              <div>\n                <p>\n                  tasks has #{' '}\n                  {this.context.everythingSyllabus.syllabusData.maxReact.length}\n                </p>\n\n                <Lessons\n                  everything={this.props.everything}\n                  lessons={\n                    this.context.everythingSyllabus.syllabusData.maxReact\n                  }\n                  lessonsLength={\n                    this.context.everythingSyllabus.syllabusData.maxReact.length\n                  }\n                />\n              </div>\n            ) : null}\n          </React.Fragment>\n        );\n      \n\n        break;\n      case '4':\n        displayContent = (\n          <React.Fragment>\n            <NewTask newestTask={this.props.newestTask} />\n          </React.Fragment>\n        );\n        break;\n      case '5':\n        displayContent = (\n          <React.Fragment>\n            <NewEvent newestEvent={this.props.newestEvent} />\n          </React.Fragment>\n        );\n        break;\n      //showLeftOverLessonsFromSyllabus: for Table Header (add/delete this lesson message)\n\n      case '6':\n        if (this.context.everythingSyllabus.syllabusData) {\n          displayContent = (\n            <React.Fragment>\n              <NewSyllabus newestSyllabus={this.props.newestSyllabus} />\n\n              {this.context.everythingSyllabus.syllabusData\n                .showLeftOverLessonsFromSyllabus ? (\n                <Lessons\n                  everything={this.props.everything}\n                  // showLeftOverLessonsFromOrigSyllabus={\n                  //   this.props.everythingSyllabus.syllabusData\n                  //     .showLeftOverLessonsFromSyllabus\n                  // }\n                  lessons={\n                    this.context.everythingSyllabus.syllabusData\n                      .maxReactWorkLeft\n                  }\n                  // changed={(event, handlerType, id) =>\n                  //   this.props.leftOverLessonChangeHandler(event, handlerType, id)\n                  // }\n                  lastLessonHeader={\n                    this.context.everythingSyllabus.syllabusData\n                      .lastLessonHeader\n                  }\n                  lessonsLength={\n                    this.context.everythingSyllabus.syllabusData\n                      .maxReactWorkLeft.length\n                  }\n                />\n              ) : null}\n            </React.Fragment>\n          );\n        }\n\n        break;\n    }\n\n    return <div>{displayContent}</div>;\n  }\n  \n}\n*/\n\n\nexport default displayContent2;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/components/Cockpit/displayContent.js"],"names":["React","Component","useContext","classes","Cockpit","Cockpit2","Navbar2","Tasks","TodayTasks","Lessons","ViewContent","NewTask","NewEvent","NewSyllabus","SyllabusContext","displayContent2","props","syllabusContext","displayContent","everything","contentChoice","logoImage","require","tasks","length","reRenderTasks","deleteTaskhandler","taskChangeHandler","lastHeader","reRenderTodayTasks","Monday","deleteTodayTaskhandler","todayTaskChangeHandler","lastTodayTasksHeader","everythingSyllabus","syllabusData","maxReact","newestTask","newestEvent","newestSyllabus","showLeftOverLessonsFromSyllabus","maxReactWorkLeft","lastLessonHeader"],"mappings":"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","sourcesContent":["import React, { Component, useContext } from 'react';\nimport classes from '../../components/Cockpit/Cockpit.module.css';\nimport Cockpit from './Cockpit';\nimport Cockpit2 from './Cockpit2';\nimport Navbar2 from './Navbar/Navbar2';\nimport Tasks from '../ViewContent/Tasks/Tasks';\nimport TodayTasks from '../ViewContent/TodayTasks/TodayTasks';\nimport Lessons from '../ViewContent/Syllabus/MaxReact/Lessons';\nimport ViewContent from './ViewContentOptions';\nimport NewTask from '../Creation/newTask';\nimport NewEvent from '../Creation/NewEvent';\nimport NewSyllabus from '../Creation/newSyllabus';\nimport SyllabusContext from '../../context/syllabusContext';\n\nconst displayContent2 = props => {\n  const syllabusContext = useContext(SyllabusContext);\n\n  let displayContent = null;\n\n  switch (props.everything.contentChoice) {\n    case '0':\n      displayContent = (\n        <React.Fragment>\n          <h3>Hello Thomas.... What would you like to see?</h3>\n          <img\n            className={classes.logoImage}\n            src={require('../../Assets/cockpitIcon.png')}\n          />\n        </React.Fragment>\n      );\n      break;\n\n    case '1':\n      displayContent = (\n        <React.Fragment>\n          <p>tasks has # {props.everything.tasks.length}</p>\n                      \n          <Tasks\n            reRenderTasks={props.everything.reRenderTasks}\n            tasks={props.everything.tasks}\n            clicked={props.deleteTaskhandler}\n            changed={props.taskChangeHandler}\n            lastHeader={props.everything.lastHeader}\n          />\n                    \n        </React.Fragment>\n      );\n      break;\n\n    case '2':\n      displayContent = (\n        <React.Fragment>\n                      \n          <TodayTasks\n            reRenderTodayTasks={props.everything.reRenderTodayTasks}\n            monday={props.everything.Monday}\n            clicked={props.deleteTodayTaskhandler}\n            clicked={props.deleteTaskhandler}\n            changed={props.todayTaskChangeHandler}\n            lastTodayTasksHeader={props.everything.lastTodayTasksHeader}\n          />\n                    \n        </React.Fragment>\n      );\n      break;\n\n    case '3':\n      displayContent = (\n        <React.Fragment>\n          {syllabusContext.everythingSyllabus.syllabusData ? (\n            <div>\n              <p>\n                tasks has #{' '}\n                {\n                  syllabusContext.everythingSyllabus.syllabusData.maxReact\n                    .length\n                }\n              </p>\n\n              <Lessons\n                everything={props.everything}\n                lessons={\n                  syllabusContext.everythingSyllabus.syllabusData.maxReact\n                }\n                lessonsLength={\n                  syllabusContext.everythingSyllabus.syllabusData.maxReact\n                    .length\n                }\n              />\n            </div>\n          ) : null}\n        </React.Fragment>\n      );\n      /*\n        clicked={(event, index, handlerType) =>\n                    props.deleteLessonHandler(event, index, handlerType)\n                  }\n        */\n\n      break;\n    case '4':\n      displayContent = (\n        <React.Fragment>\n          <NewTask newestTask={props.newestTask} />\n        </React.Fragment>\n      );\n      break;\n    case '5':\n      displayContent = (\n        <React.Fragment>\n          <NewEvent newestEvent={props.newestEvent} />\n        </React.Fragment>\n      );\n      break;\n    //showLeftOverLessonsFromSyllabus: for Table Header (add/delete this lesson message)\n\n    case '6':\n      if (syllabusContext.everythingSyllabus.syllabusData) {\n        displayContent = (\n          <React.Fragment>\n            <NewSyllabus newestSyllabus={props.newestSyllabus} />\n\n            {syllabusContext.everythingSyllabus.syllabusData\n              .showLeftOverLessonsFromSyllabus ? (\n              <Lessons\n                everything={props.everything}\n                // showLeftOverLessonsFromOrigSyllabus={\n                //   this.props.everythingSyllabus.syllabusData\n                //     .showLeftOverLessonsFromSyllabus\n                // }\n                lessons={\n                  syllabusContext.everythingSyllabus.syllabusData\n                    .maxReactWorkLeft\n                }\n                // changed={(event, handlerType, id) =>\n                //   this.props.leftOverLessonChangeHandler(event, handlerType, id)\n                // }\n                lastLessonHeader={\n                  syllabusContext.everythingSyllabus.syllabusData\n                    .lastLessonHeader\n                }\n                lessonsLength={\n                  syllabusContext.everythingSyllabus.syllabusData\n                    .maxReactWorkLeft.length\n                }\n              />\n            ) : null}\n          </React.Fragment>\n        );\n      }\n\n      break;\n  }\n\n  return <div>{displayContent}</div>;\n};\n\n/*\n  class DisplayContent extends Component {\n  //const syllabusContext = useContext(SyllabusContext);\n  static contextType = SyllabusContext;\n  render() {\n    let displayContent = null;\n\n    switch (this.props.everything.contentChoice) {\n      case '0':\n        displayContent = (\n          <React.Fragment>\n            <h3>Hello Thomas.... What would you like to see?</h3>\n            <img\n              className={classes.logoImage}\n              src={require('../../Assets/cockpitIcon.png')}\n            />\n          </React.Fragment>\n        );\n        break;\n\n      case '1':\n        displayContent = (\n          <React.Fragment>\n            <p>tasks has # {this.props.everything.tasks.length}</p>\n                        \n            <Tasks\n              reRenderTasks={this.props.everything.reRenderTasks}\n              tasks={this.props.everything.tasks}\n              clicked={this.props.deleteTaskhandler}\n              changed={this.props.taskChangeHandler}\n              lastHeader={this.props.everything.lastHeader}\n            />\n                      \n          </React.Fragment>\n        );\n        break;\n\n      case '2':\n        displayContent = (\n          <React.Fragment>\n                        \n            <TodayTasks\n              reRenderTodayTasks={this.props.everything.reRenderTodayTasks}\n              monday={this.props.everything.Monday}\n              clicked={this.props.deleteTodayTaskhandler}\n              clicked={this.props.deleteTaskhandler}\n              changed={this.props.todayTaskChangeHandler}\n              lastTodayTasksHeader={this.props.everything.lastTodayTasksHeader}\n            />\n                      \n          </React.Fragment>\n        );\n        break;\n\n      case '3':\n        displayContent = (\n          <React.Fragment>\n            {this.context.everythingSyllabus.syllabusData ? (\n              <div>\n                <p>\n                  tasks has #{' '}\n                  {this.context.everythingSyllabus.syllabusData.maxReact.length}\n                </p>\n\n                <Lessons\n                  everything={this.props.everything}\n                  lessons={\n                    this.context.everythingSyllabus.syllabusData.maxReact\n                  }\n                  lessonsLength={\n                    this.context.everythingSyllabus.syllabusData.maxReact.length\n                  }\n                />\n              </div>\n            ) : null}\n          </React.Fragment>\n        );\n      \n\n        break;\n      case '4':\n        displayContent = (\n          <React.Fragment>\n            <NewTask newestTask={this.props.newestTask} />\n          </React.Fragment>\n        );\n        break;\n      case '5':\n        displayContent = (\n          <React.Fragment>\n            <NewEvent newestEvent={this.props.newestEvent} />\n          </React.Fragment>\n        );\n        break;\n      //showLeftOverLessonsFromSyllabus: for Table Header (add/delete this lesson message)\n\n      case '6':\n        if (this.context.everythingSyllabus.syllabusData) {\n          displayContent = (\n            <React.Fragment>\n              <NewSyllabus newestSyllabus={this.props.newestSyllabus} />\n\n              {this.context.everythingSyllabus.syllabusData\n                .showLeftOverLessonsFromSyllabus ? (\n                <Lessons\n                  everything={this.props.everything}\n                  // showLeftOverLessonsFromOrigSyllabus={\n                  //   this.props.everythingSyllabus.syllabusData\n                  //     .showLeftOverLessonsFromSyllabus\n                  // }\n                  lessons={\n                    this.context.everythingSyllabus.syllabusData\n                      .maxReactWorkLeft\n                  }\n                  // changed={(event, handlerType, id) =>\n                  //   this.props.leftOverLessonChangeHandler(event, handlerType, id)\n                  // }\n                  lastLessonHeader={\n                    this.context.everythingSyllabus.syllabusData\n                      .lastLessonHeader\n                  }\n                  lessonsLength={\n                    this.context.everythingSyllabus.syllabusData\n                      .maxReactWorkLeft.length\n                  }\n                />\n              ) : null}\n            </React.Fragment>\n          );\n        }\n\n        break;\n    }\n\n    return <div>{displayContent}</div>;\n  }\n  \n}\n*/\n\nexport default displayContent2;\n"]},"metadata":{},"sourceType":"module"}