{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/containers/Store/EventsData.js\";\nimport React, { Component } from 'react';\nimport StoreContext from '../../context/StoreDataContext';\n\nclass EventsData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentMonthEvents: []\n    };\n\n    this.newEventHandler = () => {\n      let newEvent = this.context.dataRequestDetails.value;\n\n      if (newEvent.eventStartTimeDate.numDaysFromCurrentDay < 31) {\n        let updatedCurrentMonthEvents = this.state.currentMonth.push(newEvent);\n        this.setState({\n          currentMonthEvents: updatedCurrentMonthEvents\n        }, () => console.dir(this.state));\n      }\n    };\n  }\n\n  render() {\n    if (this.context.dataRequestDetails.typeOfData === 'EventsData') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          //newEvent\n          this.context.resetHandlerChoice(this.newEventHandler());\n          break;\n      }\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    });\n  }\n\n}\n\nEventsData.contextType = StoreContext;\nexport default EventsData; // eventId: '',\n// eventTitle: '',\n// eventNote: '',\n// eventCategory: '',\n// eventStartTimeDate: '',\n// eventFinishTimeDate: '',\n// //later: If one-day event\n// eventDuration: '',\n// //Later:\n// //T -> schedule it on calendarData\n// //F--> put into unScheduledEventsList for that day\n// blockOffTimeSlot: false,\n// showStartTimeDate: false,\n// showFinishTimeDate: false,\n// eventDeadline: '',\n// //later: show multiday non-continous event\n// showMultidayNonContinousDate: false","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/containers/Store/EventsData.js"],"names":["React","Component","StoreContext","EventsData","constructor","props","state","currentMonthEvents","newEventHandler","newEvent","context","dataRequestDetails","value","eventStartTimeDate","numDaysFromCurrentDay","updatedCurrentMonthEvents","currentMonth","push","setState","console","dir","render","typeOfData","handlerChoice","resetHandlerChoice","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,gCAAzB;;AAEA,MAAMC,UAAN,SAAyBF,SAAzB,CAAmC;AACjCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAInBC,KAJmB,GAIX;AACNC,MAAAA,kBAAkB,EAAE;AADd,KAJW;;AAAA,SASnBC,eATmB,GASD,MAAM;AACtB,UAAIC,QAAQ,GAAG,KAAKC,OAAL,CAAaC,kBAAb,CAAgCC,KAA/C;;AAEA,UAAIH,QAAQ,CAACI,kBAAT,CAA4BC,qBAA5B,GAAoD,EAAxD,EAA4D;AAC1D,YAAIC,yBAAyB,GAAG,KAAKT,KAAL,CAAWU,YAAX,CAAwBC,IAAxB,CAA6BR,QAA7B,CAAhC;AACA,aAAKS,QAAL,CACE;AACEX,UAAAA,kBAAkB,EAAEQ;AADtB,SADF,EAIE,MAAMI,OAAO,CAACC,GAAR,CAAY,KAAKd,KAAjB,CAJR;AAMD;AACF,KArBkB;AAElB;;AAoBDe,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKX,OAAL,CAAaC,kBAAb,CAAgCW,UAAhC,KAA+C,YAAnD,EAAiE;AAC/D,cAAQ,KAAKZ,OAAL,CAAaC,kBAAb,CAAgCY,aAAxC;AACE,aAAK,GAAL;AAAU;AACR,eAAKb,OAAL,CAAac,kBAAb,CAAgC,KAAKhB,eAAL,EAAhC;AACA;AAHJ;AAKD;;AACD,WAAO,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAhCgC;;AAA7BL,U,CASGsB,W,GAAcvB,Y;AA0BvB,eAAeC,UAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport StoreContext from '../../context/StoreDataContext';\n\nclass EventsData extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    currentMonthEvents: []\n  };\n\n  static contextType = StoreContext;\n  newEventHandler = () => {\n    let newEvent = this.context.dataRequestDetails.value;\n\n    if (newEvent.eventStartTimeDate.numDaysFromCurrentDay < 31) {\n      let updatedCurrentMonthEvents = this.state.currentMonth.push(newEvent);\n      this.setState(\n        {\n          currentMonthEvents: updatedCurrentMonthEvents\n        },\n        () => console.dir(this.state)\n      );\n    }\n  };\n  render() {\n    if (this.context.dataRequestDetails.typeOfData === 'EventsData') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1': //newEvent\n          this.context.resetHandlerChoice(this.newEventHandler());\n          break;\n      }\n    }\n    return <React.Fragment></React.Fragment>;\n  }\n}\n\nexport default EventsData;\n\n// eventId: '',\n// eventTitle: '',\n// eventNote: '',\n// eventCategory: '',\n// eventStartTimeDate: '',\n// eventFinishTimeDate: '',\n// //later: If one-day event\n// eventDuration: '',\n// //Later:\n// //T -> schedule it on calendarData\n// //F--> put into unScheduledEventsList for that day\n// blockOffTimeSlot: false,\n// showStartTimeDate: false,\n// showFinishTimeDate: false,\n// eventDeadline: '',\n// //later: show multiday non-continous event\n// showMultidayNonContinousDate: false\n"]},"metadata":{},"sourceType":"module"}