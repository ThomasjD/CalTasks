{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/containers/Store/Basic.js\";\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types'; //import moment from 'moment'\n//import 'moment/locale/zh-cn';\n// import 'antd/lib/style/index.less';     //Add this code for locally example\n\nimport Scheduler, { SchedulerData, ViewTypes, DATE_FORMAT, DemoData } from '../../Template/index';\nimport Nav from './Nav';\nimport Tips from './Tips';\nimport ViewSrcCode from './ViewSrcCode';\nimport withDragDropContext from './withDnDContext';\n\nclass Basic extends Component {\n  constructor(props) {\n    super(props); //let schedulerData = new SchedulerData(new moment(\"2017-12-18\").format(DATE_FORMAT), ViewTypes.Week);\n\n    this.prevClick = schedulerData => {\n      schedulerData.prev();\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.nextClick = schedulerData => {\n      schedulerData.next();\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.onViewChange = (schedulerData, view) => {\n      schedulerData.setViewType(view.viewType, view.showAgenda, view.isEventPerspective);\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.onSelectDate = (schedulerData, date) => {\n      schedulerData.setDate(date);\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.eventClicked = (schedulerData, event) => {\n      alert(`You just clicked an event: {id: ${event.id}, title: ${event.title}}`);\n    };\n\n    this.ops1 = (schedulerData, event) => {\n      alert(`You just executed ops1 to event: {id: ${event.id}, title: ${event.title}}`);\n    };\n\n    this.ops2 = (schedulerData, event) => {\n      alert(`You just executed ops2 to event: {id: ${event.id}, title: ${event.title}}`);\n    };\n\n    this.newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\n      if (window.confirm(`Do you want to create a new event? {slotId: ${slotId}, slotName: ${slotName}, start: ${start}, end: ${end}, type: ${type}, item: ${item}}`)) {\n        let newFreshId = 0;\n        schedulerData.events.forEach(item => {\n          if (item.id >= newFreshId) newFreshId = item.id + 1;\n        });\n        let newEvent = {\n          id: newFreshId,\n          title: 'New event you just created',\n          start: start,\n          end: end,\n          resourceId: slotId,\n          bgColor: 'purple'\n        };\n        schedulerData.addEvent(newEvent);\n        this.setState({\n          viewModel: schedulerData\n        });\n      }\n    };\n\n    this.updateEventStart = (schedulerData, event, newStart) => {\n      if (window.confirm(`Do you want to adjust the start of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newStart: ${newStart}}`)) {\n        schedulerData.updateEventStart(event, newStart);\n      }\n\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.updateEventEnd = (schedulerData, event, newEnd) => {\n      if (window.confirm(`Do you want to adjust the end of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newEnd: ${newEnd}}`)) {\n        schedulerData.updateEventEnd(event, newEnd);\n      }\n\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\n      if (window.confirm(`Do you want to move the event? {eventId: ${event.id}, eventTitle: ${event.title}, newSlotId: ${slotId}, newSlotName: ${slotName}, newStart: ${start}, newEnd: ${end}`)) {\n        schedulerData.moveEvent(event, slotId, slotName, start, end);\n        this.setState({\n          viewModel: schedulerData\n        });\n      }\n    };\n\n    this.onScrollRight = (schedulerData, schedulerContent, maxScrollLeft) => {\n      if (schedulerData.ViewTypes === ViewTypes.Day) {\n        schedulerData.next();\n        schedulerData.setEvents(DemoData.events);\n        this.setState({\n          viewModel: schedulerData\n        });\n        schedulerContent.scrollLeft = maxScrollLeft - 10;\n      }\n    };\n\n    this.onScrollLeft = (schedulerData, schedulerContent, maxScrollLeft) => {\n      if (schedulerData.ViewTypes === ViewTypes.Day) {\n        schedulerData.prev();\n        schedulerData.setEvents(DemoData.events);\n        this.setState({\n          viewModel: schedulerData\n        });\n        schedulerContent.scrollLeft = 10;\n      }\n    };\n\n    this.onScrollTop = (schedulerData, schedulerContent, maxScrollTop) => {\n      console.log('onScrollTop');\n    };\n\n    this.onScrollBottom = (schedulerData, schedulerContent, maxScrollTop) => {\n      console.log('onScrollBottom');\n    };\n\n    this.toggleExpandFunc = (schedulerData, slotId) => {\n      schedulerData.toggleExpandStatus(slotId);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    let _schedulerData = new SchedulerData('2017-12-18', ViewTypes.Week);\n\n    _schedulerData.localeMoment.locale('en');\n\n    _schedulerData.setResources(DemoData.resources);\n\n    _schedulerData.setEvents(DemoData.events);\n\n    this.state = {\n      viewModel: _schedulerData\n    };\n  }\n\n  render() {\n    const viewModel = this.state.viewModel;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Basic example\", React.createElement(ViewSrcCode, {\n      srcCodeUrl: \"https://github.com/StephenChou1017/react-big-scheduler/blob/master/example/Basic.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })), React.createElement(Scheduler, {\n      schedulerData: viewModel,\n      prevClick: this.prevClick,\n      nextClick: this.nextClick,\n      onSelectDate: this.onSelectDate,\n      onViewChange: this.onViewChange,\n      eventItemClick: this.eventClicked,\n      viewEventClick: this.ops1,\n      viewEventText: \"Ops 1\",\n      viewEvent2Text: \"Ops 2\",\n      viewEvent2Click: this.ops2,\n      updateEventStart: this.updateEventStart,\n      updateEventEnd: this.updateEventEnd,\n      moveEvent: this.moveEvent,\n      newEvent: this.newEvent,\n      onScrollLeft: this.onScrollLeft,\n      onScrollRight: this.onScrollRight,\n      onScrollTop: this.onScrollTop,\n      onScrollBottom: this.onScrollBottom,\n      toggleExpandFunc: this.toggleExpandFunc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    })), React.createElement(Tips, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withDragDropContext(Basic);","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/containers/Store/Basic.js"],"names":["React","Component","PropTypes","Scheduler","SchedulerData","ViewTypes","DATE_FORMAT","DemoData","Nav","Tips","ViewSrcCode","withDragDropContext","Basic","constructor","props","prevClick","schedulerData","prev","setEvents","events","setState","viewModel","nextClick","next","onViewChange","view","setViewType","viewType","showAgenda","isEventPerspective","onSelectDate","date","setDate","eventClicked","event","alert","id","title","ops1","ops2","newEvent","slotId","slotName","start","end","type","item","window","confirm","newFreshId","forEach","resourceId","bgColor","addEvent","updateEventStart","newStart","updateEventEnd","newEnd","moveEvent","onScrollRight","schedulerContent","maxScrollLeft","Day","scrollLeft","onScrollLeft","onScrollTop","maxScrollTop","console","log","onScrollBottom","toggleExpandFunc","toggleExpandStatus","Week","localeMoment","locale","setResources","resources","state","render","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\n//import moment from 'moment'\n//import 'moment/locale/zh-cn';\n// import 'antd/lib/style/index.less';     //Add this code for locally example\nimport Scheduler, {\n  SchedulerData,\n  ViewTypes,\n  DATE_FORMAT,\n  DemoData\n} from '../../Template/index';\nimport Nav from './Nav';\nimport Tips from './Tips';\nimport ViewSrcCode from './ViewSrcCode';\nimport withDragDropContext from './withDnDContext';\n\nclass Basic extends Component {\n  constructor(props) {\n    super(props);\n\n    //let schedulerData = new SchedulerData(new moment(\"2017-12-18\").format(DATE_FORMAT), ViewTypes.Week);\n    let schedulerData = new SchedulerData('2017-12-18', ViewTypes.Week);\n    schedulerData.localeMoment.locale('en');\n    schedulerData.setResources(DemoData.resources);\n    schedulerData.setEvents(DemoData.events);\n    this.state = {\n      viewModel: schedulerData\n    };\n  }\n\n  render() {\n    const { viewModel } = this.state;\n    return (\n      <div>\n        <Nav />\n        <div>\n          <h3 style={{ textAlign: 'center' }}>\n            Basic example\n            <ViewSrcCode srcCodeUrl=\"https://github.com/StephenChou1017/react-big-scheduler/blob/master/example/Basic.js\" />\n          </h3>\n          <Scheduler\n            schedulerData={viewModel}\n            prevClick={this.prevClick}\n            nextClick={this.nextClick}\n            onSelectDate={this.onSelectDate}\n            onViewChange={this.onViewChange}\n            eventItemClick={this.eventClicked}\n            viewEventClick={this.ops1}\n            viewEventText=\"Ops 1\"\n            viewEvent2Text=\"Ops 2\"\n            viewEvent2Click={this.ops2}\n            updateEventStart={this.updateEventStart}\n            updateEventEnd={this.updateEventEnd}\n            moveEvent={this.moveEvent}\n            newEvent={this.newEvent}\n            onScrollLeft={this.onScrollLeft}\n            onScrollRight={this.onScrollRight}\n            onScrollTop={this.onScrollTop}\n            onScrollBottom={this.onScrollBottom}\n            toggleExpandFunc={this.toggleExpandFunc}\n          />\n        </div>\n        <Tips />\n      </div>\n    );\n  }\n\n  prevClick = schedulerData => {\n    schedulerData.prev();\n    schedulerData.setEvents(DemoData.events);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  nextClick = schedulerData => {\n    schedulerData.next();\n    schedulerData.setEvents(DemoData.events);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  onViewChange = (schedulerData, view) => {\n    schedulerData.setViewType(\n      view.viewType,\n      view.showAgenda,\n      view.isEventPerspective\n    );\n    schedulerData.setEvents(DemoData.events);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  onSelectDate = (schedulerData, date) => {\n    schedulerData.setDate(date);\n    schedulerData.setEvents(DemoData.events);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  eventClicked = (schedulerData, event) => {\n    alert(\n      `You just clicked an event: {id: ${event.id}, title: ${event.title}}`\n    );\n  };\n\n  ops1 = (schedulerData, event) => {\n    alert(\n      `You just executed ops1 to event: {id: ${event.id}, title: ${event.title}}`\n    );\n  };\n\n  ops2 = (schedulerData, event) => {\n    alert(\n      `You just executed ops2 to event: {id: ${event.id}, title: ${event.title}}`\n    );\n  };\n\n  newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\n    if (\n      window.confirm(\n        `Do you want to create a new event? {slotId: ${slotId}, slotName: ${slotName}, start: ${start}, end: ${end}, type: ${type}, item: ${item}}`\n      )\n    ) {\n      let newFreshId = 0;\n      schedulerData.events.forEach(item => {\n        if (item.id >= newFreshId) newFreshId = item.id + 1;\n      });\n\n      let newEvent = {\n        id: newFreshId,\n        title: 'New event you just created',\n        start: start,\n        end: end,\n        resourceId: slotId,\n        bgColor: 'purple'\n      };\n      schedulerData.addEvent(newEvent);\n      this.setState({\n        viewModel: schedulerData\n      });\n    }\n  };\n\n  updateEventStart = (schedulerData, event, newStart) => {\n    if (\n      window.confirm(\n        `Do you want to adjust the start of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newStart: ${newStart}}`\n      )\n    ) {\n      schedulerData.updateEventStart(event, newStart);\n    }\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  updateEventEnd = (schedulerData, event, newEnd) => {\n    if (\n      window.confirm(\n        `Do you want to adjust the end of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newEnd: ${newEnd}}`\n      )\n    ) {\n      schedulerData.updateEventEnd(event, newEnd);\n    }\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\n    if (\n      window.confirm(\n        `Do you want to move the event? {eventId: ${event.id}, eventTitle: ${event.title}, newSlotId: ${slotId}, newSlotName: ${slotName}, newStart: ${start}, newEnd: ${end}`\n      )\n    ) {\n      schedulerData.moveEvent(event, slotId, slotName, start, end);\n      this.setState({\n        viewModel: schedulerData\n      });\n    }\n  };\n\n  onScrollRight = (schedulerData, schedulerContent, maxScrollLeft) => {\n    if (schedulerData.ViewTypes === ViewTypes.Day) {\n      schedulerData.next();\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n\n      schedulerContent.scrollLeft = maxScrollLeft - 10;\n    }\n  };\n\n  onScrollLeft = (schedulerData, schedulerContent, maxScrollLeft) => {\n    if (schedulerData.ViewTypes === ViewTypes.Day) {\n      schedulerData.prev();\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n\n      schedulerContent.scrollLeft = 10;\n    }\n  };\n\n  onScrollTop = (schedulerData, schedulerContent, maxScrollTop) => {\n    console.log('onScrollTop');\n  };\n\n  onScrollBottom = (schedulerData, schedulerContent, maxScrollTop) => {\n    console.log('onScrollBottom');\n  };\n\n  toggleExpandFunc = (schedulerData, slotId) => {\n    schedulerData.toggleExpandStatus(slotId);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n}\n\nexport default withDragDropContext(Basic);\n"]},"metadata":{},"sourceType":"module"}