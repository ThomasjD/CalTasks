{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/src/EventItem.js\";\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Popover from 'antd/lib/popover';\nimport 'antd/lib/popover/style/index.css';\nimport EventItemPopover from './EventItemPopover';\nimport { CellUnits, DATETIME_FORMAT } from './index';\nimport { DnDTypes } from './DnDTypes';\nconst supportTouch = 'ontouchstart' in window;\n\nclass EventItem extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.initStartDrag = ev => {\n      const _this$props = this.props,\n            schedulerData = _this$props.schedulerData,\n            eventItem = _this$props.eventItem;\n\n      let slotId = schedulerData._getEventSlotId(eventItem);\n\n      let slot = schedulerData.getSlotById(slotId);\n      if (!!slot && !!slot.groupOnly) return;\n      if (schedulerData._isResizing()) return;\n      ev.stopPropagation();\n      let clientX = 0;\n\n      if (supportTouch) {\n        if (ev.changedTouches.length == 0) return;\n        const touch = ev.changedTouches[0];\n        clientX = touch.pageX;\n      } else {\n        if (ev.buttons !== undefined && ev.buttons !== 1) return;\n        clientX = ev.clientX;\n      }\n\n      this.setState({\n        startX: clientX\n      });\n\n      schedulerData._startResizing();\n\n      if (supportTouch) {\n        this.startResizer.addEventListener('touchmove', this.doStartDrag, false);\n        this.startResizer.addEventListener('touchend', this.stopStartDrag, false);\n        this.startResizer.addEventListener('touchcancel', this.cancelStartDrag, false);\n      } else {\n        document.documentElement.addEventListener('mousemove', this.doStartDrag, false);\n        document.documentElement.addEventListener('mouseup', this.stopStartDrag, false);\n      }\n\n      document.onselectstart = function () {\n        return false;\n      };\n\n      document.ondragstart = function () {\n        return false;\n      };\n    };\n\n    this.doStartDrag = ev => {\n      ev.stopPropagation();\n      let clientX = 0;\n\n      if (supportTouch) {\n        if (ev.changedTouches.length == 0) return;\n        const touch = ev.changedTouches[0];\n        clientX = touch.pageX;\n      } else {\n        clientX = ev.clientX;\n      }\n\n      const _this$props2 = this.props,\n            left = _this$props2.left,\n            width = _this$props2.width,\n            leftIndex = _this$props2.leftIndex,\n            rightIndex = _this$props2.rightIndex,\n            schedulerData = _this$props2.schedulerData;\n      let cellWidth = schedulerData.getContentCellWidth();\n      let offset = leftIndex > 0 ? 5 : 6;\n      let minWidth = cellWidth - offset;\n      let maxWidth = rightIndex * cellWidth - offset;\n      const startX = this.state.startX;\n      let newLeft = left + clientX - startX;\n      let newWidth = width + startX - clientX;\n\n      if (newWidth < minWidth) {\n        newWidth = minWidth;\n        newLeft = (rightIndex - 1) * cellWidth + (rightIndex - 1 > 0 ? 2 : 3);\n      } else if (newWidth > maxWidth) {\n        newWidth = maxWidth;\n        newLeft = 3;\n      }\n\n      this.setState({\n        left: newLeft,\n        width: newWidth\n      });\n    };\n\n    this.stopStartDrag = ev => {\n      ev.stopPropagation();\n\n      if (supportTouch) {\n        this.startResizer.removeEventListener('touchmove', this.doStartDrag, false);\n        this.startResizer.removeEventListener('touchend', this.stopStartDrag, false);\n        this.startResizer.removeEventListener('touchcancel', this.cancelStartDrag, false);\n      } else {\n        document.documentElement.removeEventListener('mousemove', this.doStartDrag, false);\n        document.documentElement.removeEventListener('mouseup', this.stopStartDrag, false);\n      }\n\n      document.onselectstart = null;\n      document.ondragstart = null;\n      const _this$props3 = this.props,\n            width = _this$props3.width,\n            left = _this$props3.left,\n            top = _this$props3.top,\n            leftIndex = _this$props3.leftIndex,\n            rightIndex = _this$props3.rightIndex,\n            schedulerData = _this$props3.schedulerData,\n            eventItem = _this$props3.eventItem,\n            updateEventStart = _this$props3.updateEventStart,\n            conflictOccurred = _this$props3.conflictOccurred;\n\n      schedulerData._stopResizing();\n\n      if (this.state.width === width) return;\n      let clientX = 0;\n\n      if (supportTouch) {\n        if (ev.changedTouches.length == 0) {\n          this.setState({\n            left: left,\n            top: top,\n            width: width\n          });\n          return;\n        }\n\n        const touch = ev.changedTouches[0];\n        clientX = touch.pageX;\n      } else {\n        clientX = ev.clientX;\n      }\n\n      const cellUnit = schedulerData.cellUnit,\n            events = schedulerData.events,\n            config = schedulerData.config,\n            localeMoment = schedulerData.localeMoment;\n      let cellWidth = schedulerData.getContentCellWidth();\n      let offset = leftIndex > 0 ? 5 : 6;\n      let minWidth = cellWidth - offset;\n      let maxWidth = rightIndex * cellWidth - offset;\n      const startX = this.state.startX;\n      let newWidth = width + startX - clientX;\n      let deltaX = clientX - startX;\n      let sign = deltaX < 0 ? -1 : deltaX === 0 ? 0 : 1;\n      let count = (sign > 0 ? Math.floor(Math.abs(deltaX) / cellWidth) : Math.ceil(Math.abs(deltaX) / cellWidth)) * sign;\n      if (newWidth < minWidth) count = rightIndex - leftIndex - 1;else if (newWidth > maxWidth) count = -leftIndex;\n      let newStart = localeMoment(eventItem.start).add(cellUnit === CellUnits.Hour ? count * config.minuteStep : count, cellUnit === CellUnits.Hour ? 'minutes' : 'days').format(DATETIME_FORMAT);\n\n      if (count !== 0 && cellUnit !== CellUnits.Hour && config.displayWeekend === false) {\n        if (count > 0) {\n          let tempCount = 0,\n              i = 0;\n\n          while (true) {\n            i++;\n            let tempStart = localeMoment(eventItem.start).add(i, 'days');\n            let dayOfWeek = tempStart.weekday();\n\n            if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n              tempCount++;\n\n              if (tempCount === count) {\n                newStart = tempStart.format(DATETIME_FORMAT);\n                break;\n              }\n            }\n          }\n        } else {\n          let tempCount = 0,\n              i = 0;\n\n          while (true) {\n            i--;\n            let tempStart = localeMoment(eventItem.start).add(i, 'days');\n            let dayOfWeek = tempStart.weekday();\n\n            if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n              tempCount--;\n\n              if (tempCount === count) {\n                newStart = tempStart.format(DATETIME_FORMAT);\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      let hasConflict = false;\n\n      let slotId = schedulerData._getEventSlotId(eventItem);\n\n      let slotName = undefined;\n      let slot = schedulerData.getSlotById(slotId);\n      if (!!slot) slotName = slot.name;\n\n      if (config.checkConflict) {\n        let start = localeMoment(newStart),\n            end = localeMoment(eventItem.end);\n        events.forEach(e => {\n          if (schedulerData._getEventSlotId(e) === slotId && e.id !== eventItem.id) {\n            let eStart = localeMoment(e.start),\n                eEnd = localeMoment(e.end);\n            if (start >= eStart && start < eEnd || end > eStart && end <= eEnd || eStart >= start && eStart < end || eEnd > start && eEnd <= end) hasConflict = true;\n          }\n        });\n      }\n\n      if (hasConflict) {\n        this.setState({\n          left: left,\n          top: top,\n          width: width\n        });\n\n        if (conflictOccurred != undefined) {\n          conflictOccurred(schedulerData, 'StartResize', eventItem, DnDTypes.EVENT, slotId, slotName, newStart, eventItem.end);\n        } else {\n          console.log('Conflict occurred, set conflictOccurred func in Scheduler to handle it');\n        }\n\n        this.subscribeResizeEvent(this.props);\n      } else {\n        if (updateEventStart != undefined) updateEventStart(schedulerData, eventItem, newStart);\n      }\n    };\n\n    this.cancelStartDrag = ev => {\n      ev.stopPropagation();\n      this.startResizer.removeEventListener('touchmove', this.doStartDrag, false);\n      this.startResizer.removeEventListener('touchend', this.stopStartDrag, false);\n      this.startResizer.removeEventListener('touchcancel', this.cancelStartDrag, false);\n      document.onselectstart = null;\n      document.ondragstart = null;\n      const _this$props4 = this.props,\n            schedulerData = _this$props4.schedulerData,\n            left = _this$props4.left,\n            top = _this$props4.top,\n            width = _this$props4.width;\n\n      schedulerData._stopResizing();\n\n      this.setState({\n        left: left,\n        top: top,\n        width: width\n      });\n    };\n\n    this.initEndDrag = ev => {\n      const _this$props5 = this.props,\n            schedulerData = _this$props5.schedulerData,\n            eventItem = _this$props5.eventItem;\n\n      let slotId = schedulerData._getEventSlotId(eventItem);\n\n      let slot = schedulerData.getSlotById(slotId);\n      if (!!slot && !!slot.groupOnly) return;\n      if (schedulerData._isResizing()) return;\n      ev.stopPropagation();\n      let clientX = 0;\n\n      if (supportTouch) {\n        if (ev.changedTouches.length == 0) return;\n        const touch = ev.changedTouches[0];\n        clientX = touch.pageX;\n      } else {\n        if (ev.buttons !== undefined && ev.buttons !== 1) return;\n        clientX = ev.clientX;\n      }\n\n      this.setState({\n        endX: clientX\n      });\n\n      schedulerData._startResizing();\n\n      if (supportTouch) {\n        this.endResizer.addEventListener('touchmove', this.doEndDrag, false);\n        this.endResizer.addEventListener('touchend', this.stopEndDrag, false);\n        this.endResizer.addEventListener('touchcancel', this.cancelEndDrag, false);\n      } else {\n        document.documentElement.addEventListener('mousemove', this.doEndDrag, false);\n        document.documentElement.addEventListener('mouseup', this.stopEndDrag, false);\n      }\n\n      document.onselectstart = function () {\n        return false;\n      };\n\n      document.ondragstart = function () {\n        return false;\n      };\n    };\n\n    this.doEndDrag = ev => {\n      ev.stopPropagation();\n      let clientX = 0;\n\n      if (supportTouch) {\n        if (ev.changedTouches.length == 0) return;\n        const touch = ev.changedTouches[0];\n        clientX = touch.pageX;\n      } else {\n        clientX = ev.clientX;\n      }\n\n      const _this$props6 = this.props,\n            width = _this$props6.width,\n            leftIndex = _this$props6.leftIndex,\n            schedulerData = _this$props6.schedulerData;\n      const headers = schedulerData.headers;\n      let cellWidth = schedulerData.getContentCellWidth();\n      let offset = leftIndex > 0 ? 5 : 6;\n      let minWidth = cellWidth - offset;\n      let maxWidth = (headers.length - leftIndex) * cellWidth - offset;\n      const endX = this.state.endX;\n      let newWidth = width + clientX - endX;\n      if (newWidth < minWidth) newWidth = minWidth;else if (newWidth > maxWidth) newWidth = maxWidth;\n      this.setState({\n        width: newWidth\n      });\n    };\n\n    this.stopEndDrag = ev => {\n      ev.stopPropagation();\n\n      if (supportTouch) {\n        this.endResizer.removeEventListener('touchmove', this.doEndDrag, false);\n        this.endResizer.removeEventListener('touchend', this.stopEndDrag, false);\n        this.endResizer.removeEventListener('touchcancel', this.cancelEndDrag, false);\n      } else {\n        document.documentElement.removeEventListener('mousemove', this.doEndDrag, false);\n        document.documentElement.removeEventListener('mouseup', this.stopEndDrag, false);\n      }\n\n      document.onselectstart = null;\n      document.ondragstart = null;\n      const _this$props7 = this.props,\n            width = _this$props7.width,\n            left = _this$props7.left,\n            top = _this$props7.top,\n            leftIndex = _this$props7.leftIndex,\n            rightIndex = _this$props7.rightIndex,\n            schedulerData = _this$props7.schedulerData,\n            eventItem = _this$props7.eventItem,\n            updateEventEnd = _this$props7.updateEventEnd,\n            conflictOccurred = _this$props7.conflictOccurred;\n\n      schedulerData._stopResizing();\n\n      if (this.state.width === width) return;\n      let clientX = 0;\n\n      if (supportTouch) {\n        if (ev.changedTouches.length == 0) {\n          this.setState({\n            left: left,\n            top: top,\n            width: width\n          });\n          return;\n        }\n\n        const touch = ev.changedTouches[0];\n        clientX = touch.pageX;\n      } else {\n        clientX = ev.clientX;\n      }\n\n      const headers = schedulerData.headers,\n            cellUnit = schedulerData.cellUnit,\n            events = schedulerData.events,\n            config = schedulerData.config,\n            localeMoment = schedulerData.localeMoment;\n      let cellWidth = schedulerData.getContentCellWidth();\n      let offset = leftIndex > 0 ? 5 : 6;\n      let minWidth = cellWidth - offset;\n      let maxWidth = (headers.length - leftIndex) * cellWidth - offset;\n      const endX = this.state.endX;\n      let newWidth = width + clientX - endX;\n      let deltaX = newWidth - width;\n      let sign = deltaX < 0 ? -1 : deltaX === 0 ? 0 : 1;\n      let count = (sign < 0 ? Math.floor(Math.abs(deltaX) / cellWidth) : Math.ceil(Math.abs(deltaX) / cellWidth)) * sign;\n      if (newWidth < minWidth) count = leftIndex - rightIndex + 1;else if (newWidth > maxWidth) count = headers.length - rightIndex;\n      let newEnd = localeMoment(eventItem.end).add(cellUnit === CellUnits.Hour ? count * config.minuteStep : count, cellUnit === CellUnits.Hour ? 'minutes' : 'days').format(DATETIME_FORMAT);\n\n      if (count !== 0 && cellUnit !== CellUnits.Hour && config.displayWeekend === false) {\n        if (count > 0) {\n          let tempCount = 0,\n              i = 0;\n\n          while (true) {\n            i++;\n            let tempEnd = localeMoment(eventItem.end).add(i, 'days');\n            let dayOfWeek = tempEnd.weekday();\n\n            if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n              tempCount++;\n\n              if (tempCount === count) {\n                newEnd = tempEnd.format(DATETIME_FORMAT);\n                break;\n              }\n            }\n          }\n        } else {\n          let tempCount = 0,\n              i = 0;\n\n          while (true) {\n            i--;\n            let tempEnd = localeMoment(eventItem.end).add(i, 'days');\n            let dayOfWeek = tempEnd.weekday();\n\n            if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n              tempCount--;\n\n              if (tempCount === count) {\n                newEnd = tempEnd.format(DATETIME_FORMAT);\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      let hasConflict = false;\n\n      let slotId = schedulerData._getEventSlotId(eventItem);\n\n      let slotName = undefined;\n      let slot = schedulerData.getSlotById(slotId);\n      if (!!slot) slotName = slot.name;\n\n      if (config.checkConflict) {\n        let start = localeMoment(eventItem.start),\n            end = localeMoment(newEnd);\n        events.forEach(e => {\n          if (schedulerData._getEventSlotId(e) === slotId && e.id !== eventItem.id) {\n            let eStart = localeMoment(e.start),\n                eEnd = localeMoment(e.end);\n            if (start >= eStart && start < eEnd || end > eStart && end <= eEnd || eStart >= start && eStart < end || eEnd > start && eEnd <= end) hasConflict = true;\n          }\n        });\n      }\n\n      if (hasConflict) {\n        this.setState({\n          left: left,\n          top: top,\n          width: width\n        });\n\n        if (conflictOccurred != undefined) {\n          conflictOccurred(schedulerData, 'EndResize', eventItem, DnDTypes.EVENT, slotId, slotName, eventItem.start, newEnd);\n        } else {\n          console.log('Conflict occurred, set conflictOccurred func in Scheduler to handle it');\n        }\n\n        this.subscribeResizeEvent(this.props);\n      } else {\n        if (updateEventEnd != undefined) updateEventEnd(schedulerData, eventItem, newEnd);\n      }\n    };\n\n    this.cancelEndDrag = ev => {\n      ev.stopPropagation();\n      this.endResizer.removeEventListener('touchmove', this.doEndDrag, false);\n      this.endResizer.removeEventListener('touchend', this.stopEndDrag, false);\n      this.endResizer.removeEventListener('touchcancel', this.cancelEndDrag, false);\n      document.onselectstart = null;\n      document.ondragstart = null;\n      const _this$props8 = this.props,\n            schedulerData = _this$props8.schedulerData,\n            left = _this$props8.left,\n            top = _this$props8.top,\n            width = _this$props8.width;\n\n      schedulerData._stopResizing();\n\n      this.setState({\n        left: left,\n        top: top,\n        width: width\n      });\n    };\n\n    this.startResizable = props => {\n      const eventItem = props.eventItem,\n            isInPopover = props.isInPopover,\n            schedulerData = props.schedulerData;\n      const config = schedulerData.config;\n      return config.startResizable === true && isInPopover === false && (eventItem.resizable == undefined || eventItem.resizable !== false) && (eventItem.startResizable == undefined || eventItem.startResizable !== false);\n    };\n\n    this.endResizable = props => {\n      const eventItem = props.eventItem,\n            isInPopover = props.isInPopover,\n            schedulerData = props.schedulerData;\n      const config = schedulerData.config;\n      return config.endResizable === true && isInPopover === false && (eventItem.resizable == undefined || eventItem.resizable !== false) && (eventItem.endResizable == undefined || eventItem.endResizable !== false);\n    };\n\n    this.subscribeResizeEvent = props => {\n      if (this.startResizer != undefined) {\n        if (supportTouch) {// this.startResizer.removeEventListener('touchstart', this.initStartDrag, false);\n          // if (this.startResizable(props))\n          //     this.startResizer.addEventListener('touchstart', this.initStartDrag, false);\n        } else {\n          this.startResizer.removeEventListener('mousedown', this.initStartDrag, false);\n          if (this.startResizable(props)) this.startResizer.addEventListener('mousedown', this.initStartDrag, false);\n        }\n      }\n\n      if (this.endResizer != undefined) {\n        if (supportTouch) {// this.endResizer.removeEventListener('touchstart', this.initEndDrag, false);\n          // if (this.endResizable(props))\n          //     this.endResizer.addEventListener('touchstart', this.initEndDrag, false);\n        } else {\n          this.endResizer.removeEventListener('mousedown', this.initEndDrag, false);\n          if (this.endResizable(props)) this.endResizer.addEventListener('mousedown', this.initEndDrag, false);\n        }\n      }\n    };\n\n    const _left = _props.left,\n          _top = _props.top,\n          _width = _props.width;\n    this.state = {\n      left: _left,\n      top: _top,\n      width: _width\n    };\n    this.startResizer = null;\n    this.endResizer = null;\n  }\n\n  componentWillReceiveProps(np) {\n    const left = np.left,\n          top = np.top,\n          width = np.width;\n    this.setState({\n      left: left,\n      top: top,\n      width: width\n    });\n    this.subscribeResizeEvent(np);\n  }\n\n  componentDidMount() {\n    this.subscribeResizeEvent(this.props);\n  }\n\n  render() {\n    const _this$props9 = this.props,\n          eventItem = _this$props9.eventItem,\n          isStart = _this$props9.isStart,\n          isEnd = _this$props9.isEnd,\n          isInPopover = _this$props9.isInPopover,\n          eventItemClick = _this$props9.eventItemClick,\n          schedulerData = _this$props9.schedulerData,\n          isDragging = _this$props9.isDragging,\n          connectDragSource = _this$props9.connectDragSource,\n          connectDragPreview = _this$props9.connectDragPreview,\n          eventItemTemplateResolver = _this$props9.eventItemTemplateResolver;\n    const config = schedulerData.config,\n          localeMoment = schedulerData.localeMoment;\n    const _this$state = this.state,\n          left = _this$state.left,\n          width = _this$state.width,\n          top = _this$state.top;\n    let roundCls = isStart ? isEnd ? 'round-all' : 'round-head' : isEnd ? 'round-tail' : 'round-none';\n    let bgColor = config.defaultEventBgColor;\n    if (!!eventItem.bgColor) bgColor = eventItem.bgColor;\n    let titleText = schedulerData.behaviors.getEventTextFunc(schedulerData, eventItem);\n    let content = React.createElement(EventItemPopover, Object.assign({}, this.props, {\n      eventItem: eventItem,\n      title: eventItem.title,\n      startTime: eventItem.start,\n      endTime: eventItem.end,\n      statusColor: bgColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }));\n    let start = localeMoment(eventItem.start);\n    let eventTitle = isInPopover ? \"\".concat(start.format('HH:mm'), \" \").concat(titleText) : titleText;\n    let startResizeDiv = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    });\n    if (this.startResizable(this.props)) startResizeDiv = React.createElement(\"div\", {\n      className: \"event-resizer event-start-resizer\",\n      ref: ref => this.startResizer = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    });\n    let endResizeDiv = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    });\n    if (this.endResizable(this.props)) endResizeDiv = React.createElement(\"div\", {\n      className: \"event-resizer event-end-resizer\",\n      ref: ref => this.endResizer = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    });\n    let eventItemTemplate = React.createElement(\"div\", {\n      className: roundCls + ' event-item',\n      key: eventItem.id,\n      style: {\n        height: config.eventItemHeight,\n        backgroundColor: bgColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        marginLeft: '10px',\n        lineHeight: \"\".concat(config.eventItemHeight, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, eventTitle));\n    if (eventItemTemplateResolver != undefined) eventItemTemplate = eventItemTemplateResolver(schedulerData, eventItem, bgColor, isStart, isEnd, 'event-item', config.eventItemHeight, undefined);\n    let a = React.createElement(\"a\", {\n      className: \"timeline-event\",\n      style: {\n        left: left,\n        width: width,\n        top: top\n      },\n      onClick: () => {\n        if (!!eventItemClick) eventItemClick(schedulerData, eventItem);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }, eventItemTemplate, startResizeDiv, endResizeDiv);\n    return isDragging ? null : schedulerData._isResizing() || config.eventItemPopoverEnabled == false || eventItem.showPopover == false ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, connectDragPreview(connectDragSource(a))) : React.createElement(Popover, {\n      placement: \"bottomLeft\",\n      content: content,\n      trigger: \"hover\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, connectDragPreview(connectDragSource(a)));\n  }\n\n}\n\nEventItem.propTypes = {\n  schedulerData: PropTypes.object.isRequired,\n  eventItem: PropTypes.object.isRequired,\n  isStart: PropTypes.bool.isRequired,\n  isEnd: PropTypes.bool.isRequired,\n  left: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  top: PropTypes.number.isRequired,\n  isInPopover: PropTypes.bool.isRequired,\n  leftIndex: PropTypes.number.isRequired,\n  rightIndex: PropTypes.number.isRequired,\n  isDragging: PropTypes.bool.isRequired,\n  connectDragSource: PropTypes.func.isRequired,\n  connectDragPreview: PropTypes.func.isRequired,\n  updateEventStart: PropTypes.func,\n  updateEventEnd: PropTypes.func,\n  moveEvent: PropTypes.func,\n  subtitleGetter: PropTypes.func,\n  eventItemClick: PropTypes.func,\n  viewEventClick: PropTypes.func,\n  viewEventText: PropTypes.string,\n  viewEvent2Click: PropTypes.func,\n  viewEvent2Text: PropTypes.string,\n  conflictOccurred: PropTypes.func,\n  eventItemTemplateResolver: PropTypes.func\n};\nexport default EventItem;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/src/EventItem.js"],"names":["React","Component","PropTypes","Popover","EventItemPopover","CellUnits","DATETIME_FORMAT","DnDTypes","supportTouch","window","EventItem","constructor","props","initStartDrag","ev","schedulerData","eventItem","slotId","_getEventSlotId","slot","getSlotById","groupOnly","_isResizing","stopPropagation","clientX","changedTouches","length","touch","pageX","buttons","undefined","setState","startX","_startResizing","startResizer","addEventListener","doStartDrag","stopStartDrag","cancelStartDrag","document","documentElement","onselectstart","ondragstart","left","width","leftIndex","rightIndex","cellWidth","getContentCellWidth","offset","minWidth","maxWidth","state","newLeft","newWidth","removeEventListener","top","updateEventStart","conflictOccurred","_stopResizing","cellUnit","events","config","localeMoment","deltaX","sign","count","Math","floor","abs","ceil","newStart","start","add","Hour","minuteStep","format","displayWeekend","tempCount","i","tempStart","dayOfWeek","weekday","hasConflict","slotName","name","checkConflict","end","forEach","e","id","eStart","eEnd","EVENT","console","log","subscribeResizeEvent","initEndDrag","endX","endResizer","doEndDrag","stopEndDrag","cancelEndDrag","headers","updateEventEnd","newEnd","tempEnd","startResizable","isInPopover","resizable","endResizable","componentWillReceiveProps","np","componentDidMount","render","isStart","isEnd","eventItemClick","isDragging","connectDragSource","connectDragPreview","eventItemTemplateResolver","roundCls","bgColor","defaultEventBgColor","titleText","behaviors","getEventTextFunc","content","title","eventTitle","startResizeDiv","ref","endResizeDiv","eventItemTemplate","height","eventItemHeight","backgroundColor","marginLeft","lineHeight","a","eventItemPopoverEnabled","showPopover","propTypes","object","isRequired","bool","number","func","moveEvent","subtitleGetter","viewEventClick","viewEventText","string","viewEvent2Click","viewEvent2Text"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {PropTypes} from 'prop-types'\r\nimport Popover from 'antd/lib/popover'\r\nimport 'antd/lib/popover/style/index.css'\r\nimport EventItemPopover from './EventItemPopover'\r\nimport {CellUnits, DATETIME_FORMAT} from './index'\r\nimport {DnDTypes} from './DnDTypes'\r\nconst supportTouch = 'ontouchstart' in window;\r\n\r\nclass EventItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const {left, top, width} = props;\r\n        this.state = {\r\n            left: left,\r\n            top: top,\r\n            width: width,\r\n        };\r\n        this.startResizer = null;\r\n        this.endResizer = null;\r\n    }\r\n\r\n    static propTypes = {\r\n        schedulerData: PropTypes.object.isRequired,\r\n        eventItem: PropTypes.object.isRequired,\r\n        isStart: PropTypes.bool.isRequired,\r\n        isEnd: PropTypes.bool.isRequired,\r\n        left: PropTypes.number.isRequired,\r\n        width: PropTypes.number.isRequired,\r\n        top: PropTypes.number.isRequired,\r\n        isInPopover: PropTypes.bool.isRequired,\r\n        leftIndex: PropTypes.number.isRequired,\r\n        rightIndex: PropTypes.number.isRequired,\r\n        isDragging: PropTypes.bool.isRequired,\r\n        connectDragSource: PropTypes.func.isRequired,\r\n        connectDragPreview: PropTypes.func.isRequired,\r\n        updateEventStart: PropTypes.func,\r\n        updateEventEnd: PropTypes.func,\r\n        moveEvent: PropTypes.func,\r\n        subtitleGetter: PropTypes.func,\r\n        eventItemClick: PropTypes.func,\r\n        viewEventClick: PropTypes.func,\r\n        viewEventText: PropTypes.string,\r\n        viewEvent2Click: PropTypes.func,\r\n        viewEvent2Text: PropTypes.string,\r\n        conflictOccurred: PropTypes.func,\r\n        eventItemTemplateResolver: PropTypes.func,\r\n    }\r\n\r\n    componentWillReceiveProps(np) {\r\n        const {left, top, width} = np;\r\n        this.setState({\r\n            left: left,\r\n            top: top,\r\n            width: width,\r\n        });\r\n\r\n        this.subscribeResizeEvent(np);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.subscribeResizeEvent(this.props);\r\n    }\r\n\r\n    initStartDrag = (ev) => {\r\n        const {schedulerData, eventItem} = this.props;\r\n        let slotId = schedulerData._getEventSlotId(eventItem);\r\n        let slot = schedulerData.getSlotById(slotId);\r\n        if(!!slot && !!slot.groupOnly) return;\r\n        if(schedulerData._isResizing()) return;\r\n\r\n        ev.stopPropagation();\r\n        let clientX = 0;\r\n        if(supportTouch) {\r\n            if(ev.changedTouches.length == 0) return;\r\n            const touch = ev.changedTouches[0];\r\n            clientX = touch.pageX;\r\n        } else {\r\n            if (ev.buttons !== undefined && ev.buttons !== 1) return;\r\n            clientX = ev.clientX;\r\n        }\r\n        this.setState({\r\n            startX: clientX\r\n        });\r\n        schedulerData._startResizing();\r\n        if(supportTouch) {\r\n            this.startResizer.addEventListener('touchmove', this.doStartDrag, false);\r\n            this.startResizer.addEventListener('touchend', this.stopStartDrag, false);\r\n            this.startResizer.addEventListener('touchcancel', this.cancelStartDrag, false);\r\n        } else {\r\n            document.documentElement.addEventListener('mousemove', this.doStartDrag, false);\r\n            document.documentElement.addEventListener('mouseup', this.stopStartDrag, false);\r\n        }\r\n        document.onselectstart = function () {\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\tdocument.ondragstart = function () {\r\n\t\t\treturn false;\r\n\t\t};\r\n    }\r\n\r\n    doStartDrag = (ev) => {\r\n        ev.stopPropagation();\r\n\r\n        let clientX = 0;\r\n        if(supportTouch) {\r\n            if(ev.changedTouches.length == 0) return;\r\n            const touch = ev.changedTouches[0];\r\n            clientX = touch.pageX;\r\n        } else {\r\n            clientX = ev.clientX;\r\n        }\r\n        const {left, width, leftIndex, rightIndex, schedulerData} = this.props;\r\n        let cellWidth = schedulerData.getContentCellWidth();\r\n        let offset = leftIndex > 0 ? 5 : 6;\r\n        let minWidth = cellWidth - offset;\r\n        let maxWidth = rightIndex * cellWidth - offset;\r\n        const {startX} = this.state;\r\n        let newLeft = left + clientX - startX;\r\n        let newWidth = width + startX - clientX;\r\n        if (newWidth < minWidth) {\r\n            newWidth = minWidth;\r\n            newLeft = (rightIndex - 1) * cellWidth + (rightIndex - 1 > 0 ? 2 : 3);\r\n        }\r\n        else if (newWidth > maxWidth) {\r\n            newWidth = maxWidth;\r\n            newLeft = 3;\r\n        }\r\n\r\n        this.setState({left: newLeft, width: newWidth});\r\n    }\r\n\r\n    stopStartDrag = (ev) => {\r\n        ev.stopPropagation();\r\n        if(supportTouch) {\r\n            this.startResizer.removeEventListener('touchmove', this.doStartDrag, false);\r\n            this.startResizer.removeEventListener('touchend', this.stopStartDrag, false);\r\n            this.startResizer.removeEventListener('touchcancel', this.cancelStartDrag, false);\r\n        } else {\r\n            document.documentElement.removeEventListener('mousemove', this.doStartDrag, false);\r\n            document.documentElement.removeEventListener('mouseup', this.stopStartDrag, false);\r\n        }\r\n        document.onselectstart = null;\r\n        document.ondragstart = null;\r\n        const {width, left, top, leftIndex, rightIndex, schedulerData, eventItem, updateEventStart, conflictOccurred} = this.props;\r\n        schedulerData._stopResizing();\r\n        if(this.state.width === width) return;\r\n\r\n        let clientX = 0;\r\n        if(supportTouch) {\r\n            if(ev.changedTouches.length == 0) {\r\n                this.setState({\r\n                    left: left,\r\n                    top: top,\r\n                    width: width,\r\n                });\r\n                return;\r\n            }\r\n            const touch = ev.changedTouches[0];\r\n            clientX = touch.pageX;\r\n        } else {\r\n            clientX = ev.clientX;\r\n        }\r\n        const {cellUnit, events, config, localeMoment} = schedulerData;\r\n        let cellWidth = schedulerData.getContentCellWidth();\r\n        let offset = leftIndex > 0 ? 5 : 6;\r\n        let minWidth = cellWidth - offset;\r\n        let maxWidth = rightIndex * cellWidth - offset;\r\n        const {startX} = this.state;\r\n        let newWidth = width + startX - clientX;\r\n        let deltaX = clientX - startX;\r\n        let sign = deltaX < 0 ? -1 : (deltaX === 0 ? 0 : 1);\r\n        let count = (sign > 0 ? Math.floor(Math.abs(deltaX) / cellWidth) : Math.ceil(Math.abs(deltaX) / cellWidth)) * sign;\r\n        if (newWidth < minWidth)\r\n            count = rightIndex - leftIndex - 1;\r\n        else if (newWidth > maxWidth)\r\n            count = -leftIndex;\r\n        let newStart = localeMoment(eventItem.start).add(cellUnit === CellUnits.Hour ? count * config.minuteStep : count, cellUnit === CellUnits.Hour ? 'minutes' : 'days').format(DATETIME_FORMAT);\r\n        if(count !== 0 && cellUnit !== CellUnits.Hour && config.displayWeekend === false) {\r\n            if(count > 0) {\r\n                let tempCount = 0, i = 0;\r\n                while (true) {\r\n                    i++;\r\n                    let tempStart = localeMoment(eventItem.start).add(i, 'days');\r\n                    let dayOfWeek = tempStart.weekday();\r\n                    if(dayOfWeek !== 0 && dayOfWeek !== 6) {\r\n                        tempCount ++;\r\n                        if(tempCount === count) {\r\n                            newStart = tempStart.format(DATETIME_FORMAT);\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                }\r\n            } else {\r\n                let tempCount = 0, i = 0;\r\n                while (true) {\r\n                    i--;\r\n                    let tempStart = localeMoment(eventItem.start).add(i, 'days');\r\n                    let dayOfWeek = tempStart.weekday();\r\n                    if(dayOfWeek !== 0 && dayOfWeek !== 6) {\r\n                        tempCount --;\r\n                        if(tempCount === count) {\r\n                            newStart = tempStart.format(DATETIME_FORMAT);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let hasConflict = false;\r\n        let slotId = schedulerData._getEventSlotId(eventItem);\r\n        let slotName = undefined;\r\n        let slot = schedulerData.getSlotById(slotId);\r\n        if(!!slot)\r\n            slotName = slot.name;\r\n        if (config.checkConflict) {\r\n            let start = localeMoment(newStart),\r\n                end = localeMoment(eventItem.end);\r\n\r\n            events.forEach((e) => {\r\n                if (schedulerData._getEventSlotId(e) === slotId && e.id !== eventItem.id) {\r\n                    let eStart = localeMoment(e.start),\r\n                        eEnd = localeMoment(e.end);\r\n                    if ((start >= eStart && start < eEnd) || (end > eStart && end <= eEnd) || (eStart >= start && eStart < end) || (eEnd > start && eEnd <= end))\r\n                        hasConflict = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (hasConflict) {\r\n            this.setState({\r\n                left: left,\r\n                top: top,\r\n                width: width,\r\n            });\r\n\r\n            if (conflictOccurred != undefined) {\r\n                conflictOccurred(schedulerData, 'StartResize', eventItem, DnDTypes.EVENT, slotId, slotName, newStart, eventItem.end);\r\n            }\r\n            else {\r\n                console.log('Conflict occurred, set conflictOccurred func in Scheduler to handle it');\r\n            }\r\n            this.subscribeResizeEvent(this.props);\r\n        }\r\n        else {\r\n            if (updateEventStart != undefined)\r\n                updateEventStart(schedulerData, eventItem, newStart);\r\n        }\r\n    }\r\n\r\n    cancelStartDrag = (ev) => {\r\n        ev.stopPropagation();\r\n\r\n        this.startResizer.removeEventListener('touchmove', this.doStartDrag, false);\r\n        this.startResizer.removeEventListener('touchend', this.stopStartDrag, false);\r\n        this.startResizer.removeEventListener('touchcancel', this.cancelStartDrag, false);\r\n        document.onselectstart = null;\r\n        document.ondragstart = null;\r\n        const {schedulerData, left, top, width} = this.props;\r\n        schedulerData._stopResizing();\r\n        this.setState({\r\n            left: left,\r\n            top: top,\r\n            width: width,\r\n        });\r\n    }\r\n\r\n    initEndDrag = (ev) => {\r\n        const {schedulerData, eventItem} = this.props;\r\n        let slotId = schedulerData._getEventSlotId(eventItem);\r\n        let slot = schedulerData.getSlotById(slotId);\r\n        if(!!slot && !!slot.groupOnly) return;\r\n        if(schedulerData._isResizing()) return;\r\n\r\n        ev.stopPropagation();\r\n        let clientX = 0;\r\n        if(supportTouch) {\r\n            if(ev.changedTouches.length == 0) return;\r\n            const touch = ev.changedTouches[0];\r\n            clientX = touch.pageX;\r\n        } else {\r\n            if (ev.buttons !== undefined && ev.buttons !== 1) return;\r\n            clientX = ev.clientX;\r\n        }\r\n        this.setState({\r\n            endX: clientX\r\n        });\r\n\r\n        schedulerData._startResizing();\r\n        if(supportTouch) {\r\n            this.endResizer.addEventListener('touchmove', this.doEndDrag, false);\r\n            this.endResizer.addEventListener('touchend', this.stopEndDrag, false);\r\n            this.endResizer.addEventListener('touchcancel', this.cancelEndDrag, false);\r\n        } else {\r\n            document.documentElement.addEventListener('mousemove', this.doEndDrag, false);\r\n            document.documentElement.addEventListener('mouseup', this.stopEndDrag, false);\r\n        }\r\n        document.onselectstart = function () {\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\tdocument.ondragstart = function () {\r\n\t\t\treturn false;\r\n\t\t};\r\n    }\r\n\r\n    doEndDrag = (ev) => {\r\n        ev.stopPropagation();\r\n        let clientX = 0;\r\n        if(supportTouch) {\r\n            if(ev.changedTouches.length == 0) return;\r\n            const touch = ev.changedTouches[0];\r\n            clientX = touch.pageX;\r\n        } else {\r\n            clientX = ev.clientX;\r\n        }\r\n        const {width, leftIndex, schedulerData} = this.props;\r\n        const {headers} = schedulerData;\r\n        let cellWidth = schedulerData.getContentCellWidth();\r\n        let offset = leftIndex > 0 ? 5 : 6;\r\n        let minWidth = cellWidth - offset;\r\n        let maxWidth = (headers.length - leftIndex) * cellWidth - offset;\r\n        const {endX} = this.state;\r\n\r\n        let newWidth = (width + clientX - endX);\r\n        if (newWidth < minWidth)\r\n            newWidth = minWidth;\r\n        else if (newWidth > maxWidth)\r\n            newWidth = maxWidth;\r\n\r\n        this.setState({width: newWidth});\r\n    }\r\n\r\n    stopEndDrag = (ev) => {\r\n        ev.stopPropagation();\r\n\r\n        if(supportTouch) {\r\n            this.endResizer.removeEventListener('touchmove', this.doEndDrag, false);\r\n            this.endResizer.removeEventListener('touchend', this.stopEndDrag, false);\r\n            this.endResizer.removeEventListener('touchcancel', this.cancelEndDrag, false);\r\n        } else {\r\n            document.documentElement.removeEventListener('mousemove', this.doEndDrag, false);\r\n            document.documentElement.removeEventListener('mouseup', this.stopEndDrag, false);\r\n        }\r\n        document.onselectstart = null;\r\n        document.ondragstart = null;\r\n        const {width, left, top, leftIndex, rightIndex, schedulerData, eventItem, updateEventEnd, conflictOccurred} = this.props;\r\n        schedulerData._stopResizing();\r\n        if(this.state.width === width) return;\r\n\r\n        let clientX = 0;\r\n        if(supportTouch) {\r\n            if(ev.changedTouches.length == 0) {\r\n                this.setState({\r\n                    left: left,\r\n                    top: top,\r\n                    width: width,\r\n                });\r\n                return;\r\n            }\r\n            const touch = ev.changedTouches[0];\r\n            clientX = touch.pageX;\r\n        } else {\r\n            clientX = ev.clientX;\r\n        }\r\n        const {headers, cellUnit, events, config, localeMoment} = schedulerData;\r\n        let cellWidth = schedulerData.getContentCellWidth();\r\n        let offset = leftIndex > 0 ? 5 : 6;\r\n        let minWidth = cellWidth - offset;\r\n        let maxWidth = (headers.length - leftIndex) * cellWidth - offset;\r\n        const {endX} = this.state;\r\n\r\n        let newWidth = (width + clientX - endX);\r\n        let deltaX = newWidth - width;\r\n        let sign = deltaX < 0 ? -1 : (deltaX === 0 ? 0 : 1);\r\n        let count = (sign < 0 ? Math.floor(Math.abs(deltaX) / cellWidth) : Math.ceil(Math.abs(deltaX) / cellWidth)) * sign;\r\n        if (newWidth < minWidth)\r\n            count = leftIndex - rightIndex + 1;\r\n        else if (newWidth > maxWidth)\r\n            count = headers.length - rightIndex;\r\n        let newEnd = localeMoment(eventItem.end).add(cellUnit === CellUnits.Hour ? count * config.minuteStep : count, cellUnit === CellUnits.Hour ? 'minutes' : 'days').format(DATETIME_FORMAT);\r\n        if(count !== 0 && cellUnit !== CellUnits.Hour && config.displayWeekend === false) {\r\n            if(count > 0) {\r\n                let tempCount = 0, i = 0;\r\n                while (true) {\r\n                    i++;\r\n                    let tempEnd = localeMoment(eventItem.end).add(i, 'days');\r\n                    let dayOfWeek = tempEnd.weekday();\r\n                    if(dayOfWeek !== 0 && dayOfWeek !== 6) {\r\n                        tempCount ++;\r\n                        if(tempCount === count) {\r\n                            newEnd = tempEnd.format(DATETIME_FORMAT);\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                }\r\n            } else {\r\n                let tempCount = 0, i = 0;\r\n                while (true) {\r\n                    i--;\r\n                    let tempEnd = localeMoment(eventItem.end).add(i, 'days');\r\n                    let dayOfWeek = tempEnd.weekday();\r\n                    if(dayOfWeek !== 0 && dayOfWeek !== 6) {\r\n                        tempCount --;\r\n                        if(tempCount === count) {\r\n                            newEnd = tempEnd.format(DATETIME_FORMAT);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let hasConflict = false;\r\n        let slotId = schedulerData._getEventSlotId(eventItem);\r\n        let slotName = undefined;\r\n        let slot = schedulerData.getSlotById(slotId);\r\n        if(!!slot)\r\n            slotName = slot.name;\r\n        if (config.checkConflict) {\r\n            let start = localeMoment(eventItem.start),\r\n                end = localeMoment(newEnd);\r\n\r\n            events.forEach((e) => {\r\n                if (schedulerData._getEventSlotId(e) === slotId && e.id !== eventItem.id) {\r\n                    let eStart = localeMoment(e.start),\r\n                        eEnd = localeMoment(e.end);\r\n                    if ((start >= eStart && start < eEnd) || (end > eStart && end <= eEnd) || (eStart >= start && eStart < end) || (eEnd > start && eEnd <= end))\r\n                        hasConflict = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (hasConflict) {\r\n            this.setState({\r\n                left: left,\r\n                top: top,\r\n                width: width,\r\n            });\r\n\r\n            if (conflictOccurred != undefined) {\r\n                conflictOccurred(schedulerData, 'EndResize', eventItem, DnDTypes.EVENT, slotId, slotName, eventItem.start, newEnd);\r\n            }\r\n            else {\r\n                console.log('Conflict occurred, set conflictOccurred func in Scheduler to handle it');\r\n            }\r\n            this.subscribeResizeEvent(this.props);\r\n        }\r\n        else {\r\n            if (updateEventEnd != undefined)\r\n                updateEventEnd(schedulerData, eventItem, newEnd);\r\n        }\r\n    }\r\n\r\n    cancelEndDrag = (ev) => {\r\n        ev.stopPropagation();\r\n\r\n        this.endResizer.removeEventListener('touchmove', this.doEndDrag, false);\r\n        this.endResizer.removeEventListener('touchend', this.stopEndDrag, false);\r\n        this.endResizer.removeEventListener('touchcancel', this.cancelEndDrag, false);\r\n        document.onselectstart = null;\r\n        document.ondragstart = null;\r\n        const {schedulerData, left, top, width} = this.props;\r\n        schedulerData._stopResizing();\r\n        this.setState({\r\n            left: left,\r\n            top: top,\r\n            width: width,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {eventItem, isStart, isEnd, isInPopover, eventItemClick, schedulerData, isDragging, connectDragSource, connectDragPreview, eventItemTemplateResolver} = this.props;\r\n        const {config, localeMoment} = schedulerData;\r\n        const {left, width, top} = this.state;\r\n        let roundCls = isStart ? (isEnd ? 'round-all' : 'round-head') : (isEnd ? 'round-tail' : 'round-none');\r\n        let bgColor = config.defaultEventBgColor;\r\n        if (!!eventItem.bgColor)\r\n            bgColor = eventItem.bgColor;\r\n\r\n        let titleText = schedulerData.behaviors.getEventTextFunc(schedulerData, eventItem);\r\n        let content = (\r\n            <EventItemPopover\r\n                {...this.props}\r\n                eventItem={eventItem}\r\n                title={eventItem.title}\r\n                startTime={eventItem.start}\r\n                endTime={eventItem.end}\r\n                statusColor={bgColor}/>\r\n        );\r\n\r\n        let start = localeMoment(eventItem.start);\r\n        let eventTitle = isInPopover ? `${start.format('HH:mm')} ${titleText}` : titleText;\r\n        let startResizeDiv = <div />;\r\n        if (this.startResizable(this.props))\r\n            startResizeDiv = <div className=\"event-resizer event-start-resizer\" ref={(ref) => this.startResizer = ref}></div>;\r\n        let endResizeDiv = <div />;\r\n        if (this.endResizable(this.props))\r\n            endResizeDiv = <div className=\"event-resizer event-end-resizer\" ref={(ref) => this.endResizer = ref}></div>;\r\n\r\n        let eventItemTemplate = (\r\n            <div className={roundCls + ' event-item'} key={eventItem.id}\r\n                 style={{height: config.eventItemHeight, backgroundColor: bgColor}}>\r\n                <span style={{marginLeft: '10px', lineHeight: `${config.eventItemHeight}px` }}>{eventTitle}</span>\r\n            </div>\r\n        );\r\n        if(eventItemTemplateResolver != undefined)\r\n            eventItemTemplate = eventItemTemplateResolver(schedulerData, eventItem, bgColor, isStart, isEnd, 'event-item', config.eventItemHeight, undefined);\r\n\r\n        let a = <a className=\"timeline-event\" style={{left: left, width: width, top: top}} onClick={() => { if(!!eventItemClick) eventItemClick(schedulerData, eventItem);}}>\r\n            {eventItemTemplate}\r\n            {startResizeDiv}\r\n            {endResizeDiv}\r\n        </a>;\r\n\r\n        return (\r\n            isDragging ? null : ( schedulerData._isResizing() || config.eventItemPopoverEnabled == false || eventItem.showPopover == false ?\r\n                    <div>\r\n                        {\r\n                            connectDragPreview(\r\n                                connectDragSource(a)\r\n                            )\r\n                        }\r\n                    </div> :\r\n                    <Popover placement=\"bottomLeft\" content={content} trigger=\"hover\">\r\n                        {\r\n                            connectDragPreview(\r\n                                connectDragSource(a)\r\n                            )\r\n                        }\r\n                    </Popover>\r\n            )\r\n        );\r\n    }\r\n\r\n    startResizable = (props) => {\r\n        const {eventItem, isInPopover, schedulerData} = props;\r\n        const {config} = schedulerData;\r\n        return config.startResizable === true && isInPopover === false\r\n            && (eventItem.resizable == undefined || eventItem.resizable !== false)\r\n            && (eventItem.startResizable == undefined || eventItem.startResizable !== false);\r\n    }\r\n\r\n    endResizable = (props) => {\r\n        const {eventItem, isInPopover, schedulerData} = props;\r\n        const {config} = schedulerData;\r\n        return config.endResizable === true && isInPopover === false\r\n            && (eventItem.resizable == undefined || eventItem.resizable !== false)\r\n            && (eventItem.endResizable == undefined || eventItem.endResizable !== false);\r\n    }\r\n\r\n    subscribeResizeEvent = (props) => {\r\n        if (this.startResizer != undefined) {\r\n            if(supportTouch) {\r\n                // this.startResizer.removeEventListener('touchstart', this.initStartDrag, false);\r\n                // if (this.startResizable(props))\r\n                //     this.startResizer.addEventListener('touchstart', this.initStartDrag, false);\r\n            } else {\r\n                this.startResizer.removeEventListener('mousedown', this.initStartDrag, false);\r\n                if (this.startResizable(props))\r\n                    this.startResizer.addEventListener('mousedown', this.initStartDrag, false);\r\n            }\r\n        }\r\n        if (this.endResizer != undefined) {\r\n            if(supportTouch) {\r\n                // this.endResizer.removeEventListener('touchstart', this.initEndDrag, false);\r\n                // if (this.endResizable(props))\r\n                //     this.endResizer.addEventListener('touchstart', this.initEndDrag, false);\r\n            } else {\r\n                this.endResizer.removeEventListener('mousedown', this.initEndDrag, false);\r\n                if (this.endResizable(props))\r\n                    this.endResizer.addEventListener('mousedown', this.initEndDrag, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventItem"]},"metadata":{},"sourceType":"module"}