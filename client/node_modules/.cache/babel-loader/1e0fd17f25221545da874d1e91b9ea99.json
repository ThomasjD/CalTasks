{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react'; //import classes from '../../components/Cockpit/Cockpit.module.css';\n\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport Store from './Store';\nimport EventsData from './EventsData';\nimport SyllabusContext from '../../context/syllabusContext';\n\nclass Syllabus extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataBaseName: 'syllabus',\n      maxReact: [{\n        id: 'xvlwil',\n        lesson: '90. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbskk',\n        lesson: '91. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      maxReactWorkLeft: [{\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      }, {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      }, {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }],\n      lastLessonHeader: [],\n      crunk: 'Hootie',\n      showLeftOverLessonsFromSyllabus: false,\n      TasksData: 'd'\n    };\n\n    this.assignLessonFromSyllabus = () => {\n      this.setState({\n        showLeftOverLessonsFromSyllabus: true\n      });\n\n      if (this.state.maxReact.length != 0) {\n        this.setState({\n          lastLessonHeader: this.state.maxReact[0]\n        });\n      } else {\n        this.setState({\n          lastLessonHeader: this.state.lastLessonHeader\n        });\n      }\n    };\n\n    this.deleteLessonFromOriginalSyllabusHandler = taskIndex => {\n      alert('Are you sure you want to add this lesson?');\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      currentOriginalLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReactWorkLeft: currentOriginalLessons\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n\n    this.addLessonFromOriginalSyllabusHandler = taskIndex => {\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      let lessonToAdd = currentOriginalLessons[taskIndex]; //add to maxReact the picked lesson\n\n      console.log('I am inside addNewLesonHandler');\n      let currentMaxReactSyllabus = [...this.state.maxReact];\n      currentMaxReactSyllabus.push(lessonToAdd); //currentMaxReactSyllabus.push(newLesson);\n\n      console.log(currentMaxReactSyllabus);\n      let currentShowLeftOverLessonsFromSyllabus = this.state.showLeftOverLessonsFromSyllabus; //showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus,\n      //Showing current left over Lessons from Syllabus (after addition/deletion)\n\n      this.setState({\n        maxReact: currentMaxReactSyllabus\n      }, this.deleteLessonFromOriginalSyllabusHandler(taskIndex));\n    };\n\n    this.lastLessonHeaderHandler = () => {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          if (this.state.maxReact.length != 0) {\n            this.setState({\n              lastLessonHeader: this.state.maxReact[0]\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          } else {\n            this.setState({\n              lastLessonHeader: this.state.lastLessonHeader\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          }\n\n          break;\n\n        case '2':\n          alert('In case 2 of lastHeader()');\n\n          if (this.state.Monday.length != 0) {\n            this.setState({\n              lastLessonHeader: this.state.Monday[0]\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          } else {\n            this.setState({\n              lastLessonHeader: this.state.lastLessonHeader\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          }\n\n          break;\n\n        case '6':\n          if (this.state.maxReactWorkLeft.length != 0) {\n            this.setState({\n              lastLessonHeader: this.state.maxReactWorkLeft[0]\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          } else {\n            this.setState({\n              lastLessonHeader: this.state.lastLessonHeader\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          }\n\n          break;\n      }\n    };\n\n    this.deleteLessonFromAssignedSyllabusHandler = taskIndex => {\n      let currentScheduledLessons = [...this.state.maxReact];\n      currentScheduledLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReact: currentScheduledLessons\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n\n    this.leftOverLessonChangeHandler = (lessonValue, taskChangeId) => {\n      const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReactWorkLeft[foundTaskId]); //using updated values to define the lesson of the particular pulled out lesson\n\n\n      updatedLessons.lesson = lessonValue; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReactWorkLeft]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskId] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReactWorkLeft: lessons,\n        showLeftOverLessonsFromSyllabus: true\n      }, () => this.lastLessonHeaderHandler(this.context.dataReceiverHandler(this.state)));\n    };\n\n    this.lessonChangeHandler = (lessonValue, taskChangeId) => {\n      //Find the index of the lessons that matches the id sent in\n      const foundTaskIndex = this.state.maxReact.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReact[foundTaskIndex]); //using updated values to define the lesson of the particular pulled out lesson\n      //updatedLessons.lesson = event.target.value;\n\n\n      updatedLessons.lesson = lessonValue; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReact]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskIndex] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReact: lessons\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n  }\n\n  render() {\n    //syllabusHandlerChoice\n    if (this.context.dataRequestDetails.typeOfData === 'syllabus') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          this.lastLessonHeaderHandler();\n          break;\n\n        case '2':\n          this.lastLessonHeaderHandler();\n          break;\n\n        case '3':\n          // alert(\n          //   `case 3 syllabusData for delete index:  ${this.context.dataRequestDetails['index']}`\n          // );\n          this.context.resetHandlerChoice(this.deleteLessonFromAssignedSyllabusHandler(this.context.dataRequestDetails.index));\n          break;\n\n        case '4':\n          //this.props.resetSyllabusHandlerChoice(\n          this.context.resetHandlerChoice(this.lessonChangeHandler(this.context.dataRequestDetails['value'], this.context.dataRequestDetails.id));\n          break;\n\n        case '5':\n          this.context.resetHandlerChoice(this.addLessonFromOriginalSyllabusHandler(this.context.dataRequestDetails.index));\n          break;\n\n        case '6':\n          // leftOverLessonChangeHandler;\n          //this.context.resetSyllabusHandlerChoice();\n          this.leftOverLessonChangeHandler(this.context.dataRequestDetails.value, this.context.dataRequestDetails.id);\n          break;\n\n        case '7':\n          //let index = this.props.index;\n          //this.addLessonFromOriginalSyllabusHandler(index);\n          this.props.resetSyllabusHandlerChoice(this.addLessonFromOriginalSyllabusHandler(this.props.index));\n          break;\n\n        case '8':\n      }\n    }\n\n    return null;\n  }\n\n}\n\nSyllabus.contextType = SyllabusContext;\nexport default Syllabus;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/Store/SyllabusData.js"],"names":["React","Component","RightCockpit","TasksData","Store","EventsData","SyllabusContext","Syllabus","state","dataBaseName","maxReact","id","lesson","completion","maxReactWorkLeft","lastLessonHeader","crunk","showLeftOverLessonsFromSyllabus","assignLessonFromSyllabus","setState","length","deleteLessonFromOriginalSyllabusHandler","taskIndex","alert","currentOriginalLessons","splice","context","dataReceiverHandler","addLessonFromOriginalSyllabusHandler","lessonToAdd","console","log","currentMaxReactSyllabus","push","currentShowLeftOverLessonsFromSyllabus","lastLessonHeaderHandler","dataRequestDetails","handlerChoice","resetHandlerChoice","Monday","deleteLessonFromAssignedSyllabusHandler","currentScheduledLessons","leftOverLessonChangeHandler","lessonValue","taskChangeId","foundTaskId","findIndex","currentId","updatedLessons","lessons","lessonChangeHandler","foundTaskIndex","render","typeOfData","index","value","props","resetSyllabusHandlerChoice","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import classes from '../../components/Cockpit/Cockpit.module.css';\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport Store from './Store';\nimport EventsData from './EventsData';\nimport SyllabusContext from '../../context/syllabusContext';\n\nclass Syllabus extends Component {\n  state = {\n    dataBaseName: 'syllabus',\n    maxReact: [\n      { id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n      { id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n      {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    maxReactWorkLeft: [\n      {\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      },\n      {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      },\n      {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }\n    ],\n\n    lastLessonHeader: [],\n\n    crunk: 'Hootie',\n    showLeftOverLessonsFromSyllabus: false,\n    TasksData: 'd'\n  };\n\n  static contextType = SyllabusContext;\n  assignLessonFromSyllabus = () => {\n    this.setState({ showLeftOverLessonsFromSyllabus: true });\n\n    if (this.state.maxReact.length != 0) {\n      this.setState({ lastLessonHeader: this.state.maxReact[0] });\n    } else {\n      this.setState({ lastLessonHeader: this.state.lastLessonHeader });\n    }\n  };\n\n  deleteLessonFromOriginalSyllabusHandler = taskIndex => {\n    alert('Are you sure you want to add this lesson?');\n\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n\n    currentOriginalLessons.splice(taskIndex, 1);\n\n    this.setState({ maxReactWorkLeft: currentOriginalLessons }, () =>\n      this.context.dataReceiverHandler(this.state)\n    );\n  };\n\n  addLessonFromOriginalSyllabusHandler = taskIndex => {\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n    let lessonToAdd = currentOriginalLessons[taskIndex];\n\n    //add to maxReact the picked lesson\n    console.log('I am inside addNewLesonHandler');\n    let currentMaxReactSyllabus = [...this.state.maxReact];\n    currentMaxReactSyllabus.push(lessonToAdd);\n\n    //currentMaxReactSyllabus.push(newLesson);\n    console.log(currentMaxReactSyllabus);\n    let currentShowLeftOverLessonsFromSyllabus = this.state\n      .showLeftOverLessonsFromSyllabus;\n    //showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus,\n    //Showing current left over Lessons from Syllabus (after addition/deletion)\n    this.setState(\n      {\n        maxReact: currentMaxReactSyllabus\n      },\n      this.deleteLessonFromOriginalSyllabusHandler(taskIndex)\n    );\n  };\n\n  lastLessonHeaderHandler = () => {\n    switch (this.context.dataRequestDetails.handlerChoice) {\n      case '1':\n        if (this.state.maxReact.length != 0) {\n          this.setState(\n            { lastLessonHeader: this.state.maxReact[0] },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        } else {\n          this.setState(\n            { lastLessonHeader: this.state.lastLessonHeader },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        }\n\n        break;\n\n      case '2':\n        alert('In case 2 of lastHeader()');\n        if (this.state.Monday.length != 0) {\n          this.setState(\n            { lastLessonHeader: this.state.Monday[0] },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        } else {\n          this.setState(\n            { lastLessonHeader: this.state.lastLessonHeader },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        }\n        break;\n\n      case '6':\n        if (this.state.maxReactWorkLeft.length != 0) {\n          this.setState(\n            {\n              lastLessonHeader: this.state.maxReactWorkLeft[0]\n            },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        } else {\n          this.setState(\n            { lastLessonHeader: this.state.lastLessonHeader },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        }\n        break;\n    }\n  };\n\n  deleteLessonFromAssignedSyllabusHandler = taskIndex => {\n    let currentScheduledLessons = [...this.state.maxReact];\n    currentScheduledLessons.splice(taskIndex, 1);\n    this.setState({ maxReact: currentScheduledLessons }, () =>\n      this.context.dataReceiverHandler(this.state)\n    );\n  };\n\n  leftOverLessonChangeHandler = (lessonValue, taskChangeId) => {\n    const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReactWorkLeft[foundTaskId] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    updatedLessons.lesson = lessonValue;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReactWorkLeft];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskId] = updatedLessons;\n\n    //final update of lessons\n    this.setState(\n      { maxReactWorkLeft: lessons, showLeftOverLessonsFromSyllabus: true },\n      () =>\n        this.lastLessonHeaderHandler(\n          this.context.dataReceiverHandler(this.state)\n        )\n    );\n  };\n\n  lessonChangeHandler = (lessonValue, taskChangeId) => {\n    //Find the index of the lessons that matches the id sent in\n    const foundTaskIndex = this.state.maxReact.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReact[foundTaskIndex] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    //updatedLessons.lesson = event.target.value;\n    updatedLessons.lesson = lessonValue;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReact];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskIndex] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReact: lessons }, () =>\n      this.context.dataReceiverHandler(this.state)\n    );\n  };\n  render() {\n    //syllabusHandlerChoice\n    if (this.context.dataRequestDetails.typeOfData === 'syllabus') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          this.lastLessonHeaderHandler();\n\n          break;\n\n        case '2':\n          this.lastLessonHeaderHandler();\n          break;\n\n        case '3':\n          // alert(\n          //   `case 3 syllabusData for delete index:  ${this.context.dataRequestDetails['index']}`\n          // );\n          this.context.resetHandlerChoice(\n            this.deleteLessonFromAssignedSyllabusHandler(\n              this.context.dataRequestDetails.index\n            )\n          );\n          break;\n\n        case '4':\n          //this.props.resetSyllabusHandlerChoice(\n\n          this.context.resetHandlerChoice(\n            this.lessonChangeHandler(\n              this.context.dataRequestDetails['value'],\n              this.context.dataRequestDetails.id\n            )\n          );\n          break;\n\n        case '5':\n          this.context.resetHandlerChoice(\n            this.addLessonFromOriginalSyllabusHandler(\n              this.context.dataRequestDetails.index\n            )\n          );\n\n          break;\n\n        case '6':\n          // leftOverLessonChangeHandler;\n          //this.context.resetSyllabusHandlerChoice();\n\n          this.leftOverLessonChangeHandler(\n            this.context.dataRequestDetails.value,\n            this.context.dataRequestDetails.id\n          );\n\n          break;\n\n        case '7':\n          //let index = this.props.index;\n          //this.addLessonFromOriginalSyllabusHandler(index);\n          this.props.resetSyllabusHandlerChoice(\n            this.addLessonFromOriginalSyllabusHandler(this.props.index)\n          );\n\n          break;\n        case '8':\n      }\n    }\n\n    return null;\n  }\n}\n\nexport default Syllabus;\n"]},"metadata":{},"sourceType":"module"}