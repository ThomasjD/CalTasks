{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/ViewContent/Syllabus/MaxReact/Lessons.js\";\nimport React, { Component } from 'react'; //import Task from './Task/Task';\n\nimport ErrorBoundary from '../../../ErrorBoundary/ErrorBoundary';\nimport student from '../../../../containers/Student.css';\nimport Lesson from './Lesson/Lesson';\nimport SyllabusContext from '../../../../context/syllabusContext';\nimport calendarObj from '../../../Calendar/calendarObj';\n\nclass Lessons extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clickToAddDelete: null\n    };\n\n    this.lessonChangeHandler = (event, info) => {\n      //let contentchoice = event.target.value;\n      let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n      let handlerChoice = ''; //string: '#' handler inside of database\n\n      let dataLocation = ''; // string: where obj found inside database\n\n      let infoType = ''; //string: index/id/\n      //let info = ''; //string: actual info\n\n      let today = calendarObj(); // let value = '';\n\n      let dataRequestMessage = {};\n\n      switch (this.props.contentChoice) {\n        case '3':\n          typeOfData = 'syllabus';\n          handlerChoice = '4';\n          dataLocation = this.context.dataRequestDetails.dataLocation;\n          infoType = 'id'; //info = '';\n\n          break;\n\n        case '4':\n          break;\n\n        case '5':\n          break;\n\n        case '6':\n          typeOfData = 'syllabus';\n          handlerChoice = '6';\n          dataLocation = this.context.dataRequestDetails.dataLocation; // 'maxReactWorkLeft';\n\n          infoType = 'id'; //info = null;\n\n          break;\n      }\n\n      dataRequestMessage = {\n        typeOfData: typeOfData,\n        handlerChoice: handlerChoice,\n        dataLocation: dataLocation,\n        infoType: infoType,\n        info: info\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage);\n    };\n\n    this.lessonDeleteHandler = (event, info) => {\n      let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n      let handlerChoice = ''; //string: '#' handler inside of database\n\n      let dataLocation = ''; // string: where obj found inside database\n\n      let infoType = ''; //string: index/id/\n      //let info = ''; //string: actual info\n\n      let today = calendarObj(); // let value = '';\n\n      let dataRequestMessage = {};\n\n      switch (this.props.contentChoice) {\n        case '3':\n          typeOfData = 'syllabus';\n          handlerChoice = '3';\n          dataLocation = this.context.dataRequestDetails.dataLocation;\n          infoType = 'index'; //info = '';\n\n          break;\n\n        case '4':\n          break;\n\n        case '5':\n          break;\n\n        case '6':\n          typeOfData = 'syllabus';\n          handlerChoice = '5';\n          dataLocation = this.context.dataRequestDetails.dataLocation; // 'maxReactWorkLeft';\n\n          infoType = 'index'; //info = null;\n\n          break;\n      }\n\n      dataRequestMessage = {\n        typeOfData: typeOfData,\n        handlerChoice: handlerChoice,\n        dataLocation: dataLocation,\n        infoType: infoType,\n        info: info\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage);\n    };\n\n    this.requestDataHandler = event => {\n      let contentchoice = event.target.value;\n      let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n      let handlerChoice = ''; //string: '#' handler inside of database\n\n      let dataLocation = ''; // string: where obj found inside database\n\n      let infoType = ''; //string: index/id/\n\n      let info = ''; //string: actual info\n\n      let today = calendarObj(); // let value = '';\n\n      let dataRequestMessage = {};\n\n      switch (contentchoice) {\n        case '1':\n          break;\n\n        case '2':\n          break;\n\n        case '3':\n          // change\n          //   event,\n          //   'syllabus',\n          //   functionChoiceChange,\n          //   'id',\n          //   lesson.id\n          // )\n          break;\n\n        case '4':\n          break;\n\n        case '5':\n          break;\n\n        case '6':\n          typeOfData = 'syllabus';\n          handlerChoice = '6';\n          dataLocation = 'maxReactWorkLeft';\n          infoType = null;\n          info = null;\n          break;\n      }\n\n      dataRequestMessage = {\n        typeOfData: typeOfData,\n        handlerChoice: handlerChoice,\n        dataLocation: dataLocation,\n        infoType: infoType,\n        info: info\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage); // let contentViewObject = {\n      //   target: {\n      //     value: contentchoice\n      //   }\n      // };\n      // this.props.contentViewHandler(contentViewObject);\n    };\n  }\n\n  renderAllLessonsTableHeaderHandler() {\n    //this is part of First row of table\n    let clickToAddDelete = null;\n\n    if (this.props.showLeftOverLessonsFromOrigSyllabus) {\n      clickToAddDelete = 'Click to schedule this lesson';\n    } else {\n      clickToAddDelete = 'Click to Delete Lesson';\n    }\n\n    let header = Object.keys(this.context.everythingSyllabus.syllabusData.lastLessonHeader); //lastLessonHeader;\n\n    return header.map((key, index) => {\n      //console.log(`this is the key: (${key}) and the index: (${index})`);\n      if (key === 'id') {\n        return React.createElement(\"th\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, clickToAddDelete);\n      } else {\n        return React.createElement(\"th\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, key.toUpperCase());\n      }\n    });\n  } //rendering current lessons\n\n\n  allLessonssHandler() {\n    //let contentchoice = event.target.value;\n    let typeOfData = 'syllabus'; //string: syllabus,tasks,events,objectives\n\n    let handlerChoice = ''; //string: '#' handler inside of database\n\n    let dataLocation = ''; // string: where obj found inside database\n\n    let infoType = ''; //string: index/id/\n\n    let info = ''; //string: actual info\n\n    let handlerType = null;\n\n    switch (this.props.everything.contentChoice) {\n      case '3':\n        //show syllbus choice, then pick one to view\n        break;\n\n      case '6':\n        //from newSyllabus Component\n        this.props.showLeftOverLessonsFromOrigSyllabus ? handlerType = 'add' : handlerType = 'delete'; // this.props.showLeftOverLessonsFromOrigSyllabus\n        // ? handlerChoice =\n\n        break;\n    }\n\n    return this.props.lessons.map((lesson, index) => {\n      return React.createElement(ErrorBoundary, {\n        key: lesson.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(Lesson, {\n        lesson: lesson.lesson,\n        completion: lesson.completion,\n        particularKey: lesson.id,\n        click: event => this.lessonDeleteHandler(event, index),\n        changed: event => this.lessonChangeHandler(event, lesson.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }));\n    });\n  } // getSnapshotBeforeUpdate(prevProps, prevState) {\n  //   console.log('[Tasks] getSnapshotBeforeUpdate');\n  //   return { message: 'Snapshot' };\n  // }\n  // // componentWillUpdate() {\n  // //     return\n  // // }\n  // componentDidUpdate(prevProps, prevState, message) {\n  //   console.log('[Tasks] componentDidUpdate');\n  //   console.log(message);\n  // }\n  // componentWillUnmount() {\n  //   console.log('[Tasks.js] componentWillUnmount');\n  // }\n\n\n  render() {\n    console.log('[Lessons] rendering...'); //<p> contentChoice: {this.props.everything.contentChoice}</p>;\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      id: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \" Syllabus\"), React.createElement(\"table\", {\n      id: \"students\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, this.renderAllLessonsTableHeaderHandler()), this.allLessonssHandler())));\n  }\n\n}\n\nLessons.contextType = SyllabusContext;\nexport default Lessons;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/ViewContent/Syllabus/MaxReact/Lessons.js"],"names":["React","Component","ErrorBoundary","student","Lesson","SyllabusContext","calendarObj","Lessons","constructor","props","state","clickToAddDelete","lessonChangeHandler","event","info","typeOfData","handlerChoice","dataLocation","infoType","today","dataRequestMessage","contentChoice","context","dataRequestDetails","dataRequestHandler","lessonDeleteHandler","requestDataHandler","contentchoice","target","value","renderAllLessonsTableHeaderHandler","showLeftOverLessonsFromOrigSyllabus","header","Object","keys","everythingSyllabus","syllabusData","lastLessonHeader","map","key","index","toUpperCase","allLessonssHandler","handlerType","everything","lessons","lesson","id","completion","render","console","log","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import Task from './Task/Task';\nimport ErrorBoundary from '../../../ErrorBoundary/ErrorBoundary';\nimport student from '../../../../containers/Student.css';\nimport Lesson from './Lesson/Lesson';\nimport SyllabusContext from '../../../../context/syllabusContext';\nimport calendarObj from '../../../Calendar/calendarObj';\nclass Lessons extends Component {\n  constructor(props) {\n    super(props);\n  }\n  state = {\n    clickToAddDelete: null\n  };\n  static contextType = SyllabusContext;\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   console.log('[maxReact Lessons.js] shouldComponentUpdate');\n  //   if (nextProps.lessonsLength !== this.props.lessonsLength) {\n  //     return true;\n  //   } else {\n  //     return false;\n  //   }\n  // }\n\n  //rendering current lessons headers\n  lessonChangeHandler = (event, info) => {\n    //let contentchoice = event.target.value;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    //let info = ''; //string: actual info\n    let today = calendarObj();\n    // let value = '';\n    let dataRequestMessage = {};\n    switch (this.props.contentChoice) {\n      case '3':\n        typeOfData = 'syllabus';\n        handlerChoice = '4';\n        dataLocation = this.context.dataRequestDetails.dataLocation;\n        infoType = 'id';\n        //info = '';\n        break;\n      case '4':\n        break;\n      case '5':\n        break;\n      case '6':\n        typeOfData = 'syllabus';\n        handlerChoice = '6';\n        dataLocation = this.context.dataRequestDetails.dataLocation; // 'maxReactWorkLeft';\n        infoType = 'id';\n        //info = null;\n        break;\n    }\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    this.context.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  lessonDeleteHandler = (event, info) => {\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    //let info = ''; //string: actual info\n    let today = calendarObj();\n    // let value = '';\n    let dataRequestMessage = {};\n    switch (this.props.contentChoice) {\n      case '3':\n        typeOfData = 'syllabus';\n        handlerChoice = '3';\n        dataLocation = this.context.dataRequestDetails.dataLocation;\n        infoType = 'index';\n        //info = '';\n        break;\n      case '4':\n        break;\n      case '5':\n        break;\n      case '6':\n        typeOfData = 'syllabus';\n        handlerChoice = '5';\n        dataLocation = this.context.dataRequestDetails.dataLocation; // 'maxReactWorkLeft';\n        infoType = 'index';\n        //info = null;\n        break;\n    }\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    this.context.dataRequestHandler(event, dataRequestMessage);\n  };\n  requestDataHandler = event => {\n    let contentchoice = event.target.value;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    let info = ''; //string: actual info\n    let today = calendarObj();\n    // let value = '';\n    let dataRequestMessage = {};\n    switch (contentchoice) {\n      case '1':\n        break;\n      case '2':\n        break;\n      case '3':\n        // change\n        //   event,\n        //   'syllabus',\n        //   functionChoiceChange,\n        //   'id',\n        //   lesson.id\n        // )\n        break;\n      case '4':\n        break;\n      case '5':\n        break;\n      case '6':\n        typeOfData = 'syllabus';\n        handlerChoice = '6';\n        dataLocation = 'maxReactWorkLeft';\n        infoType = null;\n        info = null;\n        break;\n    }\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    this.context.dataRequestHandler(event, dataRequestMessage);\n\n    // let contentViewObject = {\n    //   target: {\n    //     value: contentchoice\n    //   }\n    // };\n\n    // this.props.contentViewHandler(contentViewObject);\n  };\n\n  renderAllLessonsTableHeaderHandler() {\n    //this is part of First row of table\n    let clickToAddDelete = null;\n\n    if (this.props.showLeftOverLessonsFromOrigSyllabus) {\n      clickToAddDelete = 'Click to schedule this lesson';\n    } else {\n      clickToAddDelete = 'Click to Delete Lesson';\n    }\n\n    let header = Object.keys(\n      this.context.everythingSyllabus.syllabusData.lastLessonHeader\n    );\n    //lastLessonHeader;\n    return header.map((key, index) => {\n      //console.log(`this is the key: (${key}) and the index: (${index})`);\n\n      if (key === 'id') {\n        return <th key={index}>{clickToAddDelete}</th>;\n      } else {\n        return <th key={index}>{key.toUpperCase()}</th>;\n      }\n    });\n  }\n\n  //rendering current lessons\n  allLessonssHandler() {\n    //let contentchoice = event.target.value;\n    let typeOfData = 'syllabus'; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    let info = ''; //string: actual info\n\n    let handlerType = null;\n\n    switch (this.props.everything.contentChoice) {\n      case '3': //show syllbus choice, then pick one to view\n        break;\n      case '6': //from newSyllabus Component\n        this.props.showLeftOverLessonsFromOrigSyllabus\n          ? (handlerType = 'add')\n          : (handlerType = 'delete');\n        // this.props.showLeftOverLessonsFromOrigSyllabus\n        // ? handlerChoice =\n\n        break;\n    }\n\n    return this.props.lessons.map((lesson, index) => {\n      return (\n        <ErrorBoundary key={lesson.id}>\n          <Lesson\n            lesson={lesson.lesson}\n            completion={lesson.completion}\n            particularKey={lesson.id}\n            click={event => this.lessonDeleteHandler(event, index)}\n            changed={event => this.lessonChangeHandler(event, lesson.id)}\n          ></Lesson>\n        </ErrorBoundary>\n      );\n    });\n  }\n\n  // getSnapshotBeforeUpdate(prevProps, prevState) {\n  //   console.log('[Tasks] getSnapshotBeforeUpdate');\n  //   return { message: 'Snapshot' };\n  // }\n\n  // // componentWillUpdate() {\n  // //     return\n  // // }\n\n  // componentDidUpdate(prevProps, prevState, message) {\n  //   console.log('[Tasks] componentDidUpdate');\n  //   console.log(message);\n  // }\n\n  // componentWillUnmount() {\n  //   console.log('[Tasks.js] componentWillUnmount');\n  // }\n\n  render() {\n    console.log('[Lessons] rendering...');\n    //<p> contentChoice: {this.props.everything.contentChoice}</p>;\n    return (\n      <div>\n        <h3 id=\"title\"> Syllabus</h3>\n\n        <table id=\"students\">\n          <tbody>\n            <tr>{this.renderAllLessonsTableHeaderHandler()}</tr>\n            {this.allLessonssHandler()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Lessons;\n"]},"metadata":{},"sourceType":"module"}