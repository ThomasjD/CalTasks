{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/Store/SyllabusData.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react'; //import classes from '../../components/Cockpit/Cockpit.module.css';\n\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport Store from './Store';\nimport EventsData from './EventsData';\nimport SyllabusContext from '../../context/syllabusContext';\n\nclass Syllabus extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataBaseName: 'syllabus',\n      maxReact: [{\n        id: 'xvlwil',\n        lesson: '90. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbskk',\n        lesson: '91. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      maxReactWorkLeft: [{\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      }, {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      }, {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }],\n      minReact: [{\n        id: 'xvldddwil',\n        lesson: '936670. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbnnskk',\n        lesson: '93531. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhsdhck2',\n        lesson: '9100. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      lastLessonHeader: [],\n      realNum: 9,\n      crunk: 'Hootie',\n      showLeftOverLessonsFromSyllabus: false,\n      TasksData: 'd',\n      nothing: 'nothing',\n      showData2: false\n    };\n\n    this.assignLessonFromSyllabus = () => {\n      this.setState({\n        showLeftOverLessonsFromSyllabus: true\n      });\n\n      if (this.state.maxReact.length != 0) {\n        this.setState({\n          lastLessonHeader: this.state.maxReact[0]\n        });\n      } else {\n        this.setState({\n          lastLessonHeader: this.state.lastLessonHeader\n        });\n      }\n    };\n\n    this.deleteLessonFromOriginalSyllabusHandler = taskIndex => {\n      alert('Are you sure you want to add this lesson?');\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      currentOriginalLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReactWorkLeft: currentOriginalLessons\n      }, () => this.props.receiveSyllabusDataHandler(this.state));\n    };\n\n    this.addLessonFromOriginalSyllabusHandler = taskIndex => {\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      let lessonToAdd = currentOriginalLessons[taskIndex]; //add to maxReact the picked lesson\n\n      console.log('I am inside addNewLesonHandler');\n      let currentMaxReactSyllabus = [...this.state.maxReact];\n      currentMaxReactSyllabus.push(lessonToAdd); //currentMaxReactSyllabus.push(newLesson);\n\n      console.log(currentMaxReactSyllabus);\n      let currentShowLeftOverLessonsFromSyllabus = this.state.showLeftOverLessonsFromSyllabus; //showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus,\n      //Showing current left over Lessons from Syllabus (after addition/deletion)\n\n      this.setState({\n        maxReact: currentMaxReactSyllabus\n      }, this.deleteLessonFromOriginalSyllabusHandler(taskIndex));\n    };\n\n    this.lastLessonHeaderHandler = () => {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          if (this.state.maxReact.length != 0) {\n            this.setState({\n              lastLessonHeader: this.state.maxReact[0]\n            }, () => {\n              this.context.dataReceiverHandler(this.state);\n            });\n          } else {\n            this.setState({\n              lastLessonHeader: this.state.lastLessonHeader\n            }, () => {\n              this.context.dataReceiverHandler(this.state);\n            });\n          }\n\n          break;\n\n        case '6':\n          if (this.state.maxReactWorkLeft.length != 0) {\n            this.setState({\n              lastLessonHeader: this.state.maxReactWorkLeft[0]\n            }, () => {\n              this.context.dataReceiverHandler(this.state);\n            });\n          } else {\n            this.setState({\n              lastLessonHeader: this.state.lastLessonHeader\n            }, () => {\n              this.context.dataReceiverHandler(this.state);\n            });\n          }\n\n          break;\n      }\n    };\n\n    this.showLeftOverLessonsFromSyllabusHandler = () => {// this.setState(\n      //   { showLeftOverLessonsFromSyllabus: true },\n      //   () => this.lastLessonHeaderHandler(),\n      //   () => {\n      //     this.props.receiveSyllabusDataHandler(this.state);\n      //   }\n      // );\n      // this.lastLessonHeaderHandler();\n      // if(this.state.)\n      // this.props.receiveSyllabusDataHandler(this.state);\n    };\n\n    this.deleteLessonFromAssignedSyllabusHandler = taskIndex => {\n      let currentScheduledLessons = [...this.state.maxReact];\n      currentScheduledLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReact: currentScheduledLessons\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n\n    this.leftOverLessonChangeHandler = (lessonValue, taskChangeId) => {\n      const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReactWorkLeft[foundTaskId]); //using updated values to define the lesson of the particular pulled out lesson\n\n\n      updatedLessons.lesson = lessonValue; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReactWorkLeft]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskId] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReactWorkLeft: lessons\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n\n    this.lessonChangeHandler = (lessonValue, taskChangeId) => {\n      //Find the index of the lessons that matches the id sent in\n      const foundTaskIndex = this.state.maxReact.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReact[foundTaskIndex]); //using updated values to define the lesson of the particular pulled out lesson\n      //updatedLessons.lesson = event.target.value;\n\n\n      updatedLessons.lesson = lessonValue; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReact]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskIndex] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReact: lessons\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n  }\n\n  render() {\n    //syllabusHandlerChoice\n    if (this.context.dataRequestDetails.typeOfData === 'syllabus') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          this.context.resetHandlerChoice(this.lastLessonHeaderHandler());\n          break;\n\n        case '2':\n          break;\n\n        case '3':\n          // alert(\n          //   `case 3 syllabusData for delete index:  ${this.context.dataRequestDetails['index']}`\n          // );\n          this.context.resetHandlerChoice(this.deleteLessonFromAssignedSyllabusHandler(this.context.dataRequestDetails.index));\n          break;\n\n        case '4':\n          //this.props.resetSyllabusHandlerChoice(\n          this.context.resetHandlerChoice(this.lessonChangeHandler(this.context.dataRequestDetails['value'], this.context.dataRequestDetails.id));\n          break;\n\n        case '5':\n          this.context.resetSyllabusHandlerChoice = () => {\n            this.addLessonFromOriginalSyllabusHandler(this.context.dataRequestDetails.index);\n          }; // this.setState(\n          //   {\n          //     showLeftOverLessonsFromSyllabus: true\n          //   },\n          //   this.props.resetSyllabusHandlerChoice(() =>\n          //     this.addLessonFromOriginalSyllabusHandler(index)\n          //   )\n          // );\n          //let deleteIndex = this.props.index;\n          //() => this.lastLessonHeaderHandler()\n\n\n          break;\n\n        case '6':\n          // leftOverLessonChangeHandler;\n          this.lastLessonHeaderHandler();\n          this.setState({\n            showLeftOverLessonsFromSyllabus: true\n          }, this.props.resetSyllabusHandlerChoice(this.leftOverLessonChangeHandler(this.context.dataRequestDetails.value, this.context.dataRequestDetails.id)));\n          break;\n\n        case '7':\n          //let index = this.props.index;\n          //this.addLessonFromOriginalSyllabusHandler(index);\n          this.props.resetSyllabusHandlerChoice(this.addLessonFromOriginalSyllabusHandler(this.props.index));\n          break;\n\n        case '8':\n      }\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"I'm inside of SyllabusData \");\n  }\n\n}\n\nSyllabus.contextType = SyllabusContext;\nexport default Syllabus;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/Store/SyllabusData.js"],"names":["React","Component","RightCockpit","TasksData","Store","EventsData","SyllabusContext","Syllabus","state","dataBaseName","maxReact","id","lesson","completion","maxReactWorkLeft","minReact","lastLessonHeader","realNum","crunk","showLeftOverLessonsFromSyllabus","nothing","showData2","assignLessonFromSyllabus","setState","length","deleteLessonFromOriginalSyllabusHandler","taskIndex","alert","currentOriginalLessons","splice","props","receiveSyllabusDataHandler","addLessonFromOriginalSyllabusHandler","lessonToAdd","console","log","currentMaxReactSyllabus","push","currentShowLeftOverLessonsFromSyllabus","lastLessonHeaderHandler","context","dataRequestDetails","handlerChoice","dataReceiverHandler","showLeftOverLessonsFromSyllabusHandler","deleteLessonFromAssignedSyllabusHandler","currentScheduledLessons","leftOverLessonChangeHandler","lessonValue","taskChangeId","foundTaskId","findIndex","currentId","updatedLessons","lessons","lessonChangeHandler","foundTaskIndex","render","typeOfData","resetHandlerChoice","index","resetSyllabusHandlerChoice","value","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import classes from '../../components/Cockpit/Cockpit.module.css';\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport Store from './Store';\nimport EventsData from './EventsData';\nimport SyllabusContext from '../../context/syllabusContext';\n\nclass Syllabus extends Component {\n  state = {\n    dataBaseName: 'syllabus',\n    maxReact: [\n      { id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n      { id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n      {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    maxReactWorkLeft: [\n      {\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      },\n      {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      },\n      {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }\n    ],\n    minReact: [\n      {\n        id: 'xvldddwil',\n        lesson: '936670. (for props Changes)',\n        completion: false\n      },\n      {\n        id: 'bbbnnskk',\n        lesson: '93531. (for state Changes)',\n        completion: false\n      },\n      {\n        id: 'kjhsdhck2',\n        lesson: '9100. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    lastLessonHeader: [],\n    realNum: 9,\n    crunk: 'Hootie',\n    showLeftOverLessonsFromSyllabus: false,\n    TasksData: 'd',\n    nothing: 'nothing',\n    showData2: false\n  };\n\n  static contextType = SyllabusContext;\n  assignLessonFromSyllabus = () => {\n    this.setState({ showLeftOverLessonsFromSyllabus: true });\n\n    if (this.state.maxReact.length != 0) {\n      this.setState({ lastLessonHeader: this.state.maxReact[0] });\n    } else {\n      this.setState({ lastLessonHeader: this.state.lastLessonHeader });\n    }\n  };\n\n  deleteLessonFromOriginalSyllabusHandler = taskIndex => {\n    alert('Are you sure you want to add this lesson?');\n\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n\n    currentOriginalLessons.splice(taskIndex, 1);\n\n    this.setState({ maxReactWorkLeft: currentOriginalLessons }, () =>\n      this.props.receiveSyllabusDataHandler(this.state)\n    );\n  };\n\n  addLessonFromOriginalSyllabusHandler = taskIndex => {\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n    let lessonToAdd = currentOriginalLessons[taskIndex];\n\n    //add to maxReact the picked lesson\n    console.log('I am inside addNewLesonHandler');\n    let currentMaxReactSyllabus = [...this.state.maxReact];\n    currentMaxReactSyllabus.push(lessonToAdd);\n\n    //currentMaxReactSyllabus.push(newLesson);\n    console.log(currentMaxReactSyllabus);\n    let currentShowLeftOverLessonsFromSyllabus = this.state\n      .showLeftOverLessonsFromSyllabus;\n    //showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus,\n    //Showing current left over Lessons from Syllabus (after addition/deletion)\n    this.setState(\n      {\n        maxReact: currentMaxReactSyllabus\n      },\n      this.deleteLessonFromOriginalSyllabusHandler(taskIndex)\n    );\n  };\n\n  lastLessonHeaderHandler = () => {\n    switch (this.context.dataRequestDetails.handlerChoice) {\n      case '1':\n        if (this.state.maxReact.length != 0) {\n          this.setState(\n            { lastLessonHeader: this.state.maxReact[0] },\n\n            () => {\n              this.context.dataReceiverHandler(this.state);\n            }\n          );\n        } else {\n          this.setState(\n            { lastLessonHeader: this.state.lastLessonHeader },\n\n            () => {\n              this.context.dataReceiverHandler(this.state);\n            }\n          );\n        }\n\n        break;\n      case '6':\n        if (this.state.maxReactWorkLeft.length != 0) {\n          this.setState(\n            {\n              lastLessonHeader: this.state.maxReactWorkLeft[0]\n            },\n\n            () => {\n              this.context.dataReceiverHandler(this.state);\n            }\n          );\n        } else {\n          this.setState(\n            { lastLessonHeader: this.state.lastLessonHeader },\n\n            () => {\n              this.context.dataReceiverHandler(this.state);\n            }\n          );\n        }\n        break;\n    }\n  };\n\n  showLeftOverLessonsFromSyllabusHandler = () => {\n    // this.setState(\n    //   { showLeftOverLessonsFromSyllabus: true },\n    //   () => this.lastLessonHeaderHandler(),\n    //   () => {\n    //     this.props.receiveSyllabusDataHandler(this.state);\n    //   }\n    // );\n    // this.lastLessonHeaderHandler();\n    // if(this.state.)\n    // this.props.receiveSyllabusDataHandler(this.state);\n  };\n\n  deleteLessonFromAssignedSyllabusHandler = taskIndex => {\n    let currentScheduledLessons = [...this.state.maxReact];\n    currentScheduledLessons.splice(taskIndex, 1);\n    this.setState({ maxReact: currentScheduledLessons }, () =>\n      this.context.dataReceiverHandler(this.state)\n    );\n  };\n\n  leftOverLessonChangeHandler = (lessonValue, taskChangeId) => {\n    const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReactWorkLeft[foundTaskId] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    updatedLessons.lesson = lessonValue;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReactWorkLeft];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskId] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReactWorkLeft: lessons }, () =>\n      this.context.dataReceiverHandler(this.state)\n    );\n  };\n\n  lessonChangeHandler = (lessonValue, taskChangeId) => {\n    //Find the index of the lessons that matches the id sent in\n    const foundTaskIndex = this.state.maxReact.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReact[foundTaskIndex] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    //updatedLessons.lesson = event.target.value;\n    updatedLessons.lesson = lessonValue;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReact];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskIndex] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReact: lessons }, () =>\n      this.context.dataReceiverHandler(this.state)\n    );\n  };\n  render() {\n    //syllabusHandlerChoice\n    if (this.context.dataRequestDetails.typeOfData === 'syllabus') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          this.context.resetHandlerChoice(this.lastLessonHeaderHandler());\n\n          break;\n\n        case '2':\n          break;\n\n        case '3':\n          // alert(\n          //   `case 3 syllabusData for delete index:  ${this.context.dataRequestDetails['index']}`\n          // );\n          this.context.resetHandlerChoice(\n            this.deleteLessonFromAssignedSyllabusHandler(\n              this.context.dataRequestDetails.index\n            )\n          );\n          break;\n\n        case '4':\n          //this.props.resetSyllabusHandlerChoice(\n\n          this.context.resetHandlerChoice(\n            this.lessonChangeHandler(\n              this.context.dataRequestDetails['value'],\n              this.context.dataRequestDetails.id\n            )\n          );\n          break;\n\n        case '5':\n          this.context.resetSyllabusHandlerChoice = () => {\n            this.addLessonFromOriginalSyllabusHandler(\n              this.context.dataRequestDetails.index\n            );\n          };\n          // this.setState(\n          //   {\n          //     showLeftOverLessonsFromSyllabus: true\n          //   },\n          //   this.props.resetSyllabusHandlerChoice(() =>\n          //     this.addLessonFromOriginalSyllabusHandler(index)\n          //   )\n          // );\n          //let deleteIndex = this.props.index;\n\n          //() => this.lastLessonHeaderHandler()\n          break;\n\n        case '6':\n          // leftOverLessonChangeHandler;\n          this.lastLessonHeaderHandler();\n          this.setState(\n            {\n              showLeftOverLessonsFromSyllabus: true\n            },\n            this.props.resetSyllabusHandlerChoice(\n              this.leftOverLessonChangeHandler(\n                this.context.dataRequestDetails.value,\n                this.context.dataRequestDetails.id\n              )\n            )\n          );\n\n          break;\n\n        case '7':\n          //let index = this.props.index;\n          //this.addLessonFromOriginalSyllabusHandler(index);\n          this.props.resetSyllabusHandlerChoice(\n            this.addLessonFromOriginalSyllabusHandler(this.props.index)\n          );\n\n          break;\n        case '8':\n      }\n    }\n\n    return <div>I'm inside of SyllabusData </div>;\n  }\n}\n\nexport default Syllabus;\n"]},"metadata":{},"sourceType":"module"}