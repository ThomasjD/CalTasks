{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/Creation/NewEvent.js\";\nimport React, { Component } from 'react';\nimport numToDay from '../Calendar/numToDay';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport ReactDatePicker from '../Calendar/ReactDatePicker'; //import RightCockpitContext from '../../context/RightCockpitContext';\n\nimport TasksDataContext from '../../context/tasksContext';\nimport Icon from '../Calendar/Icon';\nimport { Form, Input, FormGroup, Container, Label } from 'reactstrap';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\nimport { fi } from 'date-fns/locale';\n\nclass NewEvent extends Component {\n  // state = {\n  //   eventId: '', //task + date + start time\n  //   eventTitle: '',\n  //   eventNote: '',\n  //   eventCategory: '', //errand,multiday event, single day event, (radial choices)\n  //   //required\n  //   startTimeDate: '',\n  //   finishTimeDate: '',\n  //   eventDuration: '', //\n  //   blockOffTimeSlot: false,\n  //   showStartTimeDate: false,\n  //   showFinishTimeDate: false,\n  //   deadline: ''\n  // };\n  constructor(props) {\n    super(props);\n    this.state = {\n      eventId: '',\n      eventTitle: '',\n      eventNote: '',\n      eventCategory: '',\n      startTimeDate: '',\n      finishTimeDate: '',\n      eventDuration: '',\n      //\n      blockOffTimeSlot: false,\n      showStartTimeDate: false,\n      showFinishTimeDate: false,\n      deadline: ''\n    };\n\n    this.newEventHandler = (event, info) => {\n      //let contentchoice = event.target.value;\n      let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n      let handlerChoice = ''; //string: '#' handler inside of database\n\n      let dataLocation = ''; // string: where obj found inside database\n\n      let infoType = ''; //string: index/id/\n      //let info = ''; //string: actual info\n      // let value = '';\n\n      let dataRequestMessage = {}; //alert(`dataRequestMessage: ${dataRequestMessage}`);\n\n      switch (this.props.contentChoice) {\n        case '5':\n          typeOfData = 'events';\n          handlerChoice = '1';\n          dataLocation = '';\n          infoType = 'id'; //info = '';\n\n          break;\n\n        case '4':\n          break;\n\n        case '5':\n          break;\n\n        case '6':\n          break;\n      }\n\n      dataRequestMessage = {\n        typeOfData: typeOfData,\n        handlerChoice: handlerChoice,\n        dataLocation: dataLocation,\n        infoType: infoType,\n        info: info\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage);\n    };\n\n    this.onSubmit = event => {\n      event.preventDefault(); //if forgot to fill out the title it will focus on it\n\n      if (!this.state.eventTitle) {\n        this.emptyTitle.current.focus();\n        return alert('Give the event a name!');\n      }\n\n      let start = this.state.startTimeDate;\n      let findDay = numToDay(start.day);\n      let dataRequestMessage = {\n        typeOfData: 'events',\n        handlerChoice: '1',\n        dataLocation: findDay,\n        infoType: 'pickedDayTasks',\n        info: this.state\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage);\n      this.resetState();\n    };\n\n    this.resetState = () => {\n      let contentChoiceObj = {\n        target: {\n          value: '9'\n        }\n      };\n      this.setState({\n        eventId: '',\n        //task + date + start time\n        eventTitle: '',\n        eventNote: '',\n        eventCategory: '',\n        //required\n        startTimeDate: '',\n        finishTimeDate: '',\n        showStartTimeDate: false,\n        showFinishTimeDate: false,\n        deadline: '',\n        eventDuration: '',\n        //\n        blockOffTimeSlot: ''\n      }, () => this.props.contentViewHandler(contentChoiceObj));\n    };\n\n    this.handleDateChange = date => {\n      this.setState({\n        startTimeDate: date,\n        showStartTimeDate: true\n      });\n    };\n\n    this.startDateTimeHandler = date => {\n      let eventStartTimeDate = {\n        dateObjectString: date.dateObjectString,\n        dateString: date.dateString,\n        day: date.day,\n        date: date.date,\n        month: date.month,\n        year: date.year,\n        timeString: date.time,\n        hour: date.hour,\n        minute: date.minute\n      };\n      this.setState({\n        startTimeDate: eventStartTimeDate,\n        showFinishTimeDate: true\n      });\n    };\n\n    this.finishTimeDateHandler = date => {\n      let eventFinishTimeDate = {\n        dateObjectString: date.dateObjectString,\n        dateString: date.dateString,\n        day: date.day,\n        date: date.date,\n        month: date.month,\n        year: date.year,\n        timeString: date.time,\n        hour: date.hour,\n        minute: date.minute\n      }; // let currentShowFinishTimeDate = this.state.showFinishTimeDate\n      // showFinishTimeDate: !currentShowFinishTimeDate\n\n      this.setState({\n        finishTimeDate: eventFinishTimeDate\n      });\n    };\n\n    this.eventTitleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.eventNoteChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.eventTypeChange = e => {\n      this.setState({\n        eventType: e.target.value\n      });\n    };\n\n    this.emptyTitle = React.createRef();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Event Title\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"eventTitle\",\n      className: \"form-control\",\n      ref: this.emptyTitle //defaultValue=\"NBA AllStar Game\"\n      ,\n      value: this.state.eventTitle,\n      onChange: e => this.eventTitleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Event Type\"), React.createElement(\"select\", {\n      name: \"assignedTimeStart\",\n      className: \"form-control\",\n      placeholder: \"Enter Start Time.\",\n      onChange: e => this.eventTypeChange(e),\n      id: \"assignedTimeStart\",\n      defaultValue: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"Appointment\"), React.createElement(\"option\", {\n      value: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"Meeting\"), React.createElement(\"option\", {\n      value: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"One Time - Scheduled\"), React.createElement(\"option\", {\n      value: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"One Time - Unschedule\"), React.createElement(\"option\", {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"Multi Day Event\"))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"Note\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"eventNote\",\n      className: \"form-control\",\n      defaultValue: \"Watch on Chanel 13\" //value={this.state.eventNote}\n      ,\n      onChange: e => this.eventNoteChange(e) //ref={eventNoteRef => eventNoteRef.focus()}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), React.createElement(DatePickerPicker, {\n      startDateTimeHandler: date => this.startDateTimeHandler(date),\n      finishTimeDateHandler: date => this.finishTimeHandler(date),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nNewEvent.contextType = TasksDataContext;\nexport default NewEvent; // let date2 = {\n//   date: 31,\n//   dateObjectString:\n//     'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n//   toISOString: '2020-01-31T13:00:00.000Z',\n//   toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   dateString: 'Fri Jan 31 2020',\n//   timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n//   year: 2020,\n//   yearShort: 120,\n//   month: 0,\n//   day: 5,\n//   time: '8:00:00 AM',\n//   hour: 8,\n//   minute: 0,\n//   UTCDate: 31,\n//   toLocalString: '1/31/2020, 8:00:00 AM',\n//   toLocalDateString: '1/31/2020',\n//   toLocaleTimeString: '8:00:00 AM'\n// };","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/Creation/NewEvent.js"],"names":["React","Component","numToDay","DatePickerPicker","ReactDatePicker","TasksDataContext","Icon","Form","Input","FormGroup","Container","Label","DateRangePicker","SingleDatePicker","DayPickerRangeController","fi","NewEvent","constructor","props","state","eventId","eventTitle","eventNote","eventCategory","startTimeDate","finishTimeDate","eventDuration","blockOffTimeSlot","showStartTimeDate","showFinishTimeDate","deadline","newEventHandler","event","info","typeOfData","handlerChoice","dataLocation","infoType","dataRequestMessage","contentChoice","context","dataRequestHandler","onSubmit","preventDefault","emptyTitle","current","focus","alert","start","findDay","day","resetState","contentChoiceObj","target","value","setState","contentViewHandler","handleDateChange","date","startDateTimeHandler","eventStartTimeDate","dateObjectString","dateString","month","year","timeString","time","hour","minute","finishTimeDateHandler","eventFinishTimeDate","eventTitleChange","e","name","eventNoteChange","eventTypeChange","eventType","createRef","render","finishTimeHandler","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport numToDay from '../Calendar/numToDay';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport ReactDatePicker from '../Calendar/ReactDatePicker';\n//import RightCockpitContext from '../../context/RightCockpitContext';\nimport TasksDataContext from '../../context/tasksContext';\nimport Icon from '../Calendar/Icon';\nimport { Form, Input, FormGroup, Container, Label } from 'reactstrap';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport {\n  DateRangePicker,\n  SingleDatePicker,\n  DayPickerRangeController\n} from 'react-dates';\nimport { fi } from 'date-fns/locale';\n\nclass NewEvent extends Component {\n  // state = {\n  //   eventId: '', //task + date + start time\n  //   eventTitle: '',\n  //   eventNote: '',\n  //   eventCategory: '', //errand,multiday event, single day event, (radial choices)\n  //   //required\n  //   startTimeDate: '',\n  //   finishTimeDate: '',\n  //   eventDuration: '', //\n  //   blockOffTimeSlot: false,\n  //   showStartTimeDate: false,\n  //   showFinishTimeDate: false,\n  //   deadline: ''\n  // };\n  constructor(props) {\n    super(props);\n    this.emptyTitle = React.createRef();\n  }\n\n  state = {\n    eventId: '',\n    eventTitle: '',\n    eventNote: '',\n    eventCategory: '',\n    startTimeDate: '',\n    finishTimeDate: '',\n    eventDuration: '', //\n    blockOffTimeSlot: false,\n    showStartTimeDate: false,\n    showFinishTimeDate: false,\n    deadline: ''\n  };\n\n  newEventHandler = (event, info) => {\n    //let contentchoice = event.target.value;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    //let info = ''; //string: actual info\n\n    // let value = '';\n    let dataRequestMessage = {};\n    //alert(`dataRequestMessage: ${dataRequestMessage}`);\n    switch (this.props.contentChoice) {\n      case '5':\n        typeOfData = 'events';\n        handlerChoice = '1';\n        dataLocation = '';\n        infoType = 'id';\n        //info = '';\n        break;\n      case '4':\n        break;\n      case '5':\n        break;\n      case '6':\n        break;\n    }\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    this.context.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  onSubmit = event => {\n    event.preventDefault();\n    //if forgot to fill out the title it will focus on it\n    if (!this.state.eventTitle) {\n      this.emptyTitle.current.focus();\n      return alert('Give the event a name!');\n    }\n    let start = this.state.startTimeDate;\n\n    let findDay = numToDay(start.day);\n\n    let dataRequestMessage = {\n      typeOfData: 'events',\n      handlerChoice: '1',\n      dataLocation: findDay,\n      infoType: 'pickedDayTasks',\n      info: this.state\n    };\n    this.context.dataRequestHandler(event, dataRequestMessage);\n\n    this.resetState();\n  };\n\n  resetState = () => {\n    let contentChoiceObj = {\n      target: {\n        value: '9'\n      }\n    };\n\n    this.setState(\n      {\n        eventId: '', //task + date + start time\n        eventTitle: '',\n        eventNote: '',\n        eventCategory: '',\n        //required\n        startTimeDate: '',\n        finishTimeDate: '',\n        showStartTimeDate: false,\n        showFinishTimeDate: false,\n        deadline: '',\n        eventDuration: '', //\n        blockOffTimeSlot: ''\n      },\n      () => this.props.contentViewHandler(contentChoiceObj)\n    );\n  };\n\n  handleDateChange = date => {\n    this.setState({\n      startTimeDate: date,\n      showStartTimeDate: true\n    });\n  };\n\n  startDateTimeHandler = date => {\n    let eventStartTimeDate = {\n      dateObjectString: date.dateObjectString,\n      dateString: date.dateString,\n      day: date.day,\n      date: date.date,\n      month: date.month,\n      year: date.year,\n      timeString: date.time,\n      hour: date.hour,\n      minute: date.minute\n    };\n    this.setState({\n      startTimeDate: eventStartTimeDate,\n      showFinishTimeDate: true\n    });\n  };\n\n  finishTimeDateHandler = date => {\n    let eventFinishTimeDate = {\n      dateObjectString: date.dateObjectString,\n      dateString: date.dateString,\n      day: date.day,\n      date: date.date,\n      month: date.month,\n      year: date.year,\n      timeString: date.time,\n      hour: date.hour,\n      minute: date.minute\n    };\n\n    // let currentShowFinishTimeDate = this.state.showFinishTimeDate\n    // showFinishTimeDate: !currentShowFinishTimeDate\n    this.setState({ finishTimeDate: eventFinishTimeDate });\n  };\n\n  eventTitleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n  eventNoteChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  eventTypeChange = e => {\n    this.setState({\n      eventType: e.target.value\n    });\n  };\n  //static contextType = TasksDataContext;\n  static contextType = TasksDataContext;\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <form>\n            <div className=\"form-group\">\n              <label>Event Title</label>\n              <input\n                type=\"text\"\n                name=\"eventTitle\"\n                className=\"form-control\"\n                ref={this.emptyTitle}\n                //defaultValue=\"NBA AllStar Game\"\n                value={this.state.eventTitle}\n                onChange={e => this.eventTitleChange(e)}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>Event Type</label>\n              <select\n                name=\"assignedTimeStart\"\n                className=\"form-control\"\n                placeholder=\"Enter Start Time.\"\n                onChange={e => this.eventTypeChange(e)}\n                id=\"assignedTimeStart\"\n                defaultValue=\"1\"\n              >\n                <option value=\"1\">Appointment</option>\n                <option value=\"2\">Meeting</option>\n                <option value=\"3\">One Time - Scheduled</option>\n                <option value=\"4\">One Time - Unschedule</option>\n                <option value=\"5\">Multi Day Event</option>\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label>Note</label>\n              <input\n                type=\"text\"\n                name=\"eventNote\"\n                className=\"form-control\"\n                defaultValue=\"Watch on Chanel 13\"\n                //value={this.state.eventNote}\n                onChange={e => this.eventNoteChange(e)}\n                //ref={eventNoteRef => eventNoteRef.focus()}\n              />\n\n              <DatePickerPicker\n                startDateTimeHandler={date => this.startDateTimeHandler(date)}\n                finishTimeDateHandler={date => this.finishTimeHandler(date)}\n              />\n            </div>\n\n            <button onClick={e => this.onSubmit(e)}>Submit</button>\n          </form>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NewEvent;\n\n// let date2 = {\n//   date: 31,\n//   dateObjectString:\n//     'Fri Jan 31 2020 08:00:00 GMT-0500 (Colombia Standard Time)',\n//   toISOString: '2020-01-31T13:00:00.000Z',\n//   toUTCString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   toGMTString: 'Fri, 31 Jan 2020 13:00:00 GMT',\n//   dateString: 'Fri Jan 31 2020',\n//   timeString: '08:00:00 GMT-0500 (Colombia Standard Time)',\n//   year: 2020,\n//   yearShort: 120,\n//   month: 0,\n//   day: 5,\n//   time: '8:00:00 AM',\n//   hour: 8,\n//   minute: 0,\n//   UTCDate: 31,\n//   toLocalString: '1/31/2020, 8:00:00 AM',\n//   toLocalDateString: '1/31/2020',\n//   toLocaleTimeString: '8:00:00 AM'\n// };\n"]},"metadata":{},"sourceType":"module"}