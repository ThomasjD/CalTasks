{"ast":null,"code":"import _slicedToArray from \"/Users/thomasjd/Desktop/caltask/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/Cockpit/Cockpit.js\";\nimport React, { useEffect, useState, useContext } from 'react'; //import rocky from '../../containers/App.module.css'\n\nimport classNames from 'classnames';\nimport classes from './Cockpit.module.css';\nimport Navbar from './navBar';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport Template from '../../Template/Template';\nimport TasksContext from '../../context/tasksContext';\nimport HowBusyThisWeek from './HowBusyThisWeek/HowBusyThisWeek';\n\nconst Cockpit = props => {\n  //can do anything that componentDidUpdate can do\n  //can send http request here\n  const tasksContext = useContext(TasksContext);\n  useEffect(() => {\n    console.log('I am inside of [Cockpit.js] useffect'); //getting rid of timer\n    // const timer = setTimeout(() => {\n    //   alert('Cockpit timer alert');\n    // }, 1000);\n\n    return () => {\n      //clearTimeout(timer);\n      console.log('[Cockpit.js] cleanup work in useEffect');\n    };\n  }, []);\n  /*\n    setTimeout(() => {\n      alert('Saved data to cloud')\n    }, 1000);\n    return () => { //don't have to have a return statement\n      console.log('[Cockpit.js] cleanup work in useEffect')\n    }\n  }, []); \n  */\n  //if 2nd argument [props.tasks] it doesn't involve tasks -> it won't run this again\n  //[props.tasks]\n\n  useEffect(() => {\n    console.log('[Cockpit.js] 2nd useEffect');\n    return () => {\n      console.log('[Cockpit.js] cleanup work in 2nd UseEffect');\n    };\n  }); //styling the 'Things to Do' using strings for classnames\n\n  const assignedClasses = [];\n  let btnClass = '';\n\n  switch (props.tasksLength) {\n    case 3:\n      assignedClasses.push('bold', 'red');\n      break;\n\n    case 2:\n      assignedClasses.push('red');\n      break;\n\n    case 1:\n      assignedClasses.push('orange');\n      break;\n\n    default:\n      assignedClasses.push('green');\n      break;\n  } //console.log(assignedClasses[0])\n  //add multiple classes for <p> w/ strings\n  //const classesFinal = classes.join(' ')\n\n\n  const classesFinal = 'rocky.' + assignedClasses;\n\n  const _useState = useState({\n    showTasksNumEachDay: true\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        howBusyToggle = _useState2[0],\n        setHowBusyToggle = _useState2[1]; //tasksContext.dataRequestHandler(event, 'tasks', '7', null, null)\n\n\n  const setHowBusyToggleHandler = () => {\n    let currentToggleStatus = howBusyToggle.showTasksNumEachDay;\n    setHowBusyToggle({\n      showTasksNumEachDay: !currentToggleStatus\n    }); // if (howBusyToggle.showTasksNumEachDay) {\n    // } else {\n    //   let currentToggleStatus = howBusyToggle.showTasksNumEachDay;\n    //   setHowBusyToggle(\n    //     () => tasksContext.dataRequestHandler(event, 'tasks', '7', null, null),\n    //     {\n    //       showTasksNumEachDay: !currentToggleStatus\n    //     }\n    //   );\n    // }\n  }; //tasksContext = useContext(TasksContext);\n  //.numTasksThisWeek['Monday']showHowBusyWeeek\n  // if (tasksContext.tasksData.tasksData['showHowBusyWeeek'] == !null) {\n  //   alert('inside of cockpit');\n  // }\n\n\n  let displayHowBusyThisWeek = null;\n\n  if (tasksContext.tasksData.tasksData) {\n    //console.log('inside if (!howBusyToggle.showTasksNumEachDay) statement');\n    //console.log(tasksContext.tasksData.tasksData.numTasksThisWeek.Monday);\n    if (tasksContext.tasksData.tasksData && tasksContext.tasksData.tasksData.showHowBusyWeek) displayHowBusyThisWeek = React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(HowBusyThisWeek, {\n      showHowBusyThisWeek: howBusyToggle.showTasksNumEachDay,\n      deadline: tasksContext.tasksData.numTasksThisWeek,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }));\n  }\n\n  const requestDataHandler = event => {\n    let viewOptionChoice = event.target.value; //'' number used in displayContent component\n\n    let contentChoice = null;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n    let handlerChoice = ''; //string: '#' handler inside of database\n\n    let dataLocation = ''; // string: where obj found inside database\n\n    let infoType = ''; //string: index/id/\n\n    let info = ''; //string: actual info\n\n    let today = calendarObj();\n\n    switch (viewOptionChoice) {\n      case '0':\n        //Unscheduled Tasks for Week\n        typeOfData = 'tasks';\n        handlerChoice = '7';\n        dataLocation = '';\n        infoType = null;\n        info = null;\n        contentchoice = '7';\n        break;\n\n      case '1':\n        //Today's Tasks\n        typeOfData = 'timeBudget';\n        handlerChoice = '2';\n        dataLocation = today;\n        infoType = null;\n        info = null;\n        break; // case '3': //Pick Syllabus to View\n        //   typeOfData = 'syllabus';\n        //   handlerChoice = '';\n        //   dataLocation = '';\n        //   infoType = '';\n        //   info = 'showSyllabiList';\n        //   break;\n\n        let dataRequestMessage = {\n          typeOfData: typeOfData,\n          handlerChoice: handlerChoice,\n          dataLocation: dataLocation,\n          infoType: infoType,\n          info: info\n        };\n        let contentViewObject = {\n          target: {\n            value: contentChoice\n          }\n        }; // alert(`typeOfData: ${typeOfData}`);\n        // alert(`handlerChoice ${handlerChoice}`);\n        // alert(`dataLocation ${dataLocation}`);\n        // alert(`infoType ${infoType}`);\n        // alert(`info ${info}`);\n\n        syllabusContext.dataRequestHandler(event, dataRequestMessage);\n        props.contentViewHandler(contentViewObject);\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, displayHowBusyThisWeek, React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: classes.leftCockpitIcon,\n      src: require('../../Assets/aptIcon.png'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Pick Content View!\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"btn-group-toggle d-flex-between\",\n      \"data-toggle\": \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"btn btn-danger m-2 active\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"radio\",\n      name: \"options\",\n      id: \"option1\",\n      autoComplete: \"off\" // onClick={props.viewContent}\n      ,\n      onClick: setHowBusyToggleHandler(event => requestDataHandler(event)),\n      value: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), ' ', \"Click to see # of Tasks/Day\"), React.createElement(\"label\", {\n      className: \"btn btn-danger m-2 active\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"radio\",\n      name: \"options\",\n      id: \"option1\",\n      autoComplete: \"off\",\n      onClick: event => requestDataHandler(event),\n      value: \"1\" // onClick={event =>\n      //   setHowBusyToggleHandler(\n      //     tasksContext.dataRequestHandler(event, 'tasks', '7', null, null)\n      //   )\n      // }\n      // value=\"0\"\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), ' ', \"Click to see # of Tasks/Day\")), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"Click to see # of Tasks/Day\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), howBusyToggle.showTasksNumEachDay ? React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(Template, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: classNames({\n        [classes[assignedClasses[0]]]: true,\n        [classes[assignedClasses[1]]]: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    })) : null, React.createElement(DatePickerPicker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    })));\n  };\n};\n\nexport default React.memo(Cockpit);","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/Cockpit/Cockpit.js"],"names":["React","useEffect","useState","useContext","classNames","classes","Navbar","DatePickerPicker","Template","TasksContext","HowBusyThisWeek","Cockpit","props","tasksContext","console","log","assignedClasses","btnClass","tasksLength","push","classesFinal","showTasksNumEachDay","howBusyToggle","setHowBusyToggle","setHowBusyToggleHandler","currentToggleStatus","displayHowBusyThisWeek","tasksData","showHowBusyWeek","numTasksThisWeek","requestDataHandler","event","viewOptionChoice","target","value","contentChoice","typeOfData","handlerChoice","dataLocation","infoType","info","today","calendarObj","contentchoice","dataRequestMessage","contentViewObject","syllabusContext","dataRequestHandler","contentViewHandler","leftCockpitIcon","require","memo"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD,C,CACA;;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;;AACA,MAAMC,OAAO,GAAGC,KAAK,IAAI;AACvB;AACA;AACA,QAAMC,YAAY,GAAGV,UAAU,CAACM,YAAD,CAA/B;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EADc,CAGd;AACA;AACA;AACA;;AAEA,WAAO,MAAM;AACX;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACD,KAHD;AAID,GAZQ,EAYN,EAZM,CAAT;AAcA;;;;;;;;;AASA;AACA;;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,WAAO,MAAM;AACXD,MAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACD,KAFD;AAGD,GALQ,CAAT,CA/BuB,CAsCvB;;AACA,QAAMC,eAAe,GAAG,EAAxB;AACA,MAAIC,QAAQ,GAAG,EAAf;;AAEA,UAAQL,KAAK,CAACM,WAAd;AACE,SAAK,CAAL;AACEF,MAAAA,eAAe,CAACG,IAAhB,CAAqB,MAArB,EAA6B,KAA7B;AACA;;AACF,SAAK,CAAL;AACEH,MAAAA,eAAe,CAACG,IAAhB,CAAqB,KAArB;AACA;;AACF,SAAK,CAAL;AACEH,MAAAA,eAAe,CAACG,IAAhB,CAAqB,QAArB;AACA;;AACF;AACEH,MAAAA,eAAe,CAACG,IAAhB,CAAqB,OAArB;AACA;AAZJ,GA1CuB,CAyDvB;AACA;AACA;;;AACA,QAAMC,YAAY,GAAG,WAAWJ,eAAhC;;AA5DuB,oBA6DmBd,QAAQ,CAAC;AACjDmB,IAAAA,mBAAmB,EAAE;AAD4B,GAAD,CA7D3B;AAAA;AAAA,QA6DhBC,aA7DgB;AAAA,QA6DDC,gBA7DC,kBAgEvB;;;AACA,QAAMC,uBAAuB,GAAG,MAAM;AACpC,QAAIC,mBAAmB,GAAGH,aAAa,CAACD,mBAAxC;AACAE,IAAAA,gBAAgB,CAAC;AACfF,MAAAA,mBAAmB,EAAE,CAACI;AADP,KAAD,CAAhB,CAFoC,CAMpC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAjBD,CAjEuB,CAoFvB;AACA;AACA;AACA;AACA;;;AACA,MAAIC,sBAAsB,GAAG,IAA7B;;AAEA,MAAIb,YAAY,CAACc,SAAb,CAAuBA,SAA3B,EAAsC;AACpC;AAEA;AACA,QACEd,YAAY,CAACc,SAAb,CAAuBA,SAAvB,IACAd,YAAY,CAACc,SAAb,CAAuBA,SAAvB,CAAiCC,eAFnC,EAIEF,sBAAsB,GACpB,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,eAAD;AACE,MAAA,mBAAmB,EAAEJ,aAAa,CAACD,mBADrC;AAEE,MAAA,QAAQ,EAAER,YAAY,CAACc,SAAb,CAAuBE,gBAFnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAQH;;AAED,QAAMC,kBAAkB,GAAGC,KAAK,IAAI;AAClC,QAAIC,gBAAgB,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAApC,CADkC,CACS;;AAC3C,QAAIC,aAAa,GAAG,IAApB;AACA,QAAIC,UAAU,GAAG,EAAjB,CAHkC,CAGb;;AACrB,QAAIC,aAAa,GAAG,EAApB,CAJkC,CAIV;;AACxB,QAAIC,YAAY,GAAG,EAAnB,CALkC,CAKX;;AACvB,QAAIC,QAAQ,GAAG,EAAf,CANkC,CAMf;;AACnB,QAAIC,IAAI,GAAG,EAAX,CAPkC,CAOnB;;AACf,QAAIC,KAAK,GAAGC,WAAW,EAAvB;;AACA,YAAQV,gBAAR;AACE,WAAK,GAAL;AAAU;AACRI,QAAAA,UAAU,GAAG,OAAb;AACAC,QAAAA,aAAa,GAAG,GAAhB;AACAC,QAAAA,YAAY,GAAG,EAAf;AACAC,QAAAA,QAAQ,GAAG,IAAX;AACAC,QAAAA,IAAI,GAAG,IAAP;AACAG,QAAAA,aAAa,GAAG,GAAhB;AAEA;;AAEF,WAAK,GAAL;AAAU;AACRP,QAAAA,UAAU,GAAG,YAAb;AACAC,QAAAA,aAAa,GAAG,GAAhB;AACAC,QAAAA,YAAY,GAAGG,KAAf;AACAF,QAAAA,QAAQ,GAAG,IAAX;AACAC,QAAAA,IAAI,GAAG,IAAP;AACA,cANF,CAQE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAII,kBAAkB,GAAG;AACvBR,UAAAA,UAAU,EAAEA,UADW;AAEvBC,UAAAA,aAAa,EAAEA,aAFQ;AAGvBC,UAAAA,YAAY,EAAEA,YAHS;AAIvBC,UAAAA,QAAQ,EAAEA,QAJa;AAKvBC,UAAAA,IAAI,EAAEA;AALiB,SAAzB;AAQA,YAAIK,iBAAiB,GAAG;AACtBZ,UAAAA,MAAM,EAAE;AACNC,YAAAA,KAAK,EAAEC;AADD;AADc,SAAxB,CAxBF,CA6BE;AACA;AACA;AACA;AACA;;AACAW,QAAAA,eAAe,CAACC,kBAAhB,CAAmChB,KAAnC,EAA0Ca,kBAA1C;AAEAhC,QAAAA,KAAK,CAACoC,kBAAN,CAAyBH,iBAAzB;AA/CJ;;AAkDA,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGnB,sBADH,EAEE;AAAK,MAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAErB,OAAO,CAAC4C,eADrB;AAEE,MAAA,GAAG,EAAEC,OAAO,CAAC,0BAAD,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,EASE;AACE,MAAA,SAAS,EAAC,iCADZ;AAEE,qBAAY,SAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAO,MAAA,SAAS,EAAC,2BAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,YAAY,EAAC,KAJf,CAKE;AALF;AAME,MAAA,OAAO,EAAE1B,uBAAuB,CAACO,KAAK,IACpCD,kBAAkB,CAACC,KAAD,CADY,CANlC;AASE,MAAA,KAAK,EAAC,GATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAWK,GAXL,gCAJF,EAmBE;AAAO,MAAA,SAAS,EAAC,2BAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,YAAY,EAAC,KAJf;AAKE,MAAA,OAAO,EAAEA,KAAK,IAAID,kBAAkB,CAACC,KAAD,CALtC;AAME,MAAA,KAAK,EAAC,GANR,CAOE;AACA;AACA;AACA;AACA;AACA;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAcK,GAdL,gCAnBF,CATF,EA8CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCA9CF,EA+CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/CF,EAgDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhDF,EAkDGT,aAAa,CAACD,mBAAd,GACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAGE;AACE,MAAA,SAAS,EAAEjB,UAAU,CAAC;AACpB,SAACC,OAAO,CAACW,eAAe,CAAC,CAAD,CAAhB,CAAR,GAA+B,IADX;AAEpB,SAACX,OAAO,CAACW,eAAe,CAAC,CAAD,CAAhB,CAAR,GAA+B;AAFX,OAAD,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADD,GAWG,IA7DN,EA8DE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9DF,CAFF,CADF;AAqED,GAhID;AAiID,CA9OD;;AAgPA,eAAehB,KAAK,CAACmD,IAAN,CAAWxC,OAAX,CAAf","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\n//import rocky from '../../containers/App.module.css'\nimport classNames from 'classnames';\nimport classes from './Cockpit.module.css';\nimport Navbar from './navBar';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport Template from '../../Template/Template';\nimport TasksContext from '../../context/tasksContext';\nimport HowBusyThisWeek from './HowBusyThisWeek/HowBusyThisWeek';\nconst Cockpit = props => {\n  //can do anything that componentDidUpdate can do\n  //can send http request here\n  const tasksContext = useContext(TasksContext);\n\n  useEffect(() => {\n    console.log('I am inside of [Cockpit.js] useffect');\n\n    //getting rid of timer\n    // const timer = setTimeout(() => {\n    //   alert('Cockpit timer alert');\n    // }, 1000);\n\n    return () => {\n      //clearTimeout(timer);\n      console.log('[Cockpit.js] cleanup work in useEffect');\n    };\n  }, []);\n\n  /*\n    setTimeout(() => {\n      alert('Saved data to cloud')\n    }, 1000);\n    return () => { //don't have to have a return statement\n      console.log('[Cockpit.js] cleanup work in useEffect')\n    }\n  }, []); \n  */\n  //if 2nd argument [props.tasks] it doesn't involve tasks -> it won't run this again\n  //[props.tasks]\n\n  useEffect(() => {\n    console.log('[Cockpit.js] 2nd useEffect');\n    return () => {\n      console.log('[Cockpit.js] cleanup work in 2nd UseEffect');\n    };\n  });\n\n  //styling the 'Things to Do' using strings for classnames\n  const assignedClasses = [];\n  let btnClass = '';\n\n  switch (props.tasksLength) {\n    case 3:\n      assignedClasses.push('bold', 'red');\n      break;\n    case 2:\n      assignedClasses.push('red');\n      break;\n    case 1:\n      assignedClasses.push('orange');\n      break;\n    default:\n      assignedClasses.push('green');\n      break;\n  }\n\n  //console.log(assignedClasses[0])\n  //add multiple classes for <p> w/ strings\n  //const classesFinal = classes.join(' ')\n  const classesFinal = 'rocky.' + assignedClasses;\n  const [howBusyToggle, setHowBusyToggle] = useState({\n    showTasksNumEachDay: true\n  });\n  //tasksContext.dataRequestHandler(event, 'tasks', '7', null, null)\n  const setHowBusyToggleHandler = () => {\n    let currentToggleStatus = howBusyToggle.showTasksNumEachDay;\n    setHowBusyToggle({\n      showTasksNumEachDay: !currentToggleStatus\n    });\n\n    // if (howBusyToggle.showTasksNumEachDay) {\n\n    // } else {\n    //   let currentToggleStatus = howBusyToggle.showTasksNumEachDay;\n    //   setHowBusyToggle(\n    //     () => tasksContext.dataRequestHandler(event, 'tasks', '7', null, null),\n    //     {\n    //       showTasksNumEachDay: !currentToggleStatus\n    //     }\n    //   );\n    // }\n  };\n\n  //tasksContext = useContext(TasksContext);\n  //.numTasksThisWeek['Monday']showHowBusyWeeek\n  // if (tasksContext.tasksData.tasksData['showHowBusyWeeek'] == !null) {\n  //   alert('inside of cockpit');\n  // }\n  let displayHowBusyThisWeek = null;\n\n  if (tasksContext.tasksData.tasksData) {\n    //console.log('inside if (!howBusyToggle.showTasksNumEachDay) statement');\n\n    //console.log(tasksContext.tasksData.tasksData.numTasksThisWeek.Monday);\n    if (\n      tasksContext.tasksData.tasksData &&\n      tasksContext.tasksData.tasksData.showHowBusyWeek\n    )\n      displayHowBusyThisWeek = (\n        <React.Fragment>\n          <HowBusyThisWeek\n            showHowBusyThisWeek={howBusyToggle.showTasksNumEachDay}\n            deadline={tasksContext.tasksData.numTasksThisWeek}\n          />\n        </React.Fragment>\n      );\n  }\n\n  const requestDataHandler = event => {\n    let viewOptionChoice = event.target.value; //'' number used in displayContent component\n    let contentChoice = null;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    let info = ''; //string: actual info\n    let today = calendarObj();\n    switch (viewOptionChoice) {\n      case '0': //Unscheduled Tasks for Week\n        typeOfData = 'tasks';\n        handlerChoice = '7';\n        dataLocation = '';\n        infoType = null;\n        info = null;\n        contentchoice = '7';\n\n        break;\n\n      case '1': //Today's Tasks\n        typeOfData = 'timeBudget';\n        handlerChoice = '2';\n        dataLocation = today;\n        infoType = null;\n        info = null;\n        break;\n\n        // case '3': //Pick Syllabus to View\n        //   typeOfData = 'syllabus';\n        //   handlerChoice = '';\n        //   dataLocation = '';\n        //   infoType = '';\n        //   info = 'showSyllabiList';\n        //   break;\n\n        let dataRequestMessage = {\n          typeOfData: typeOfData,\n          handlerChoice: handlerChoice,\n          dataLocation: dataLocation,\n          infoType: infoType,\n          info: info\n        };\n\n        let contentViewObject = {\n          target: {\n            value: contentChoice\n          }\n        };\n        // alert(`typeOfData: ${typeOfData}`);\n        // alert(`handlerChoice ${handlerChoice}`);\n        // alert(`dataLocation ${dataLocation}`);\n        // alert(`infoType ${infoType}`);\n        // alert(`info ${info}`);\n        syllabusContext.dataRequestHandler(event, dataRequestMessage);\n\n        props.contentViewHandler(contentViewObject);\n    }\n\n    return (\n      <React.Fragment>\n        {displayHowBusyThisWeek}\n        <div className=\"\">\n          <img\n            className={classes.leftCockpitIcon}\n            src={require('../../Assets/aptIcon.png')}\n          />\n\n          <h5>Pick Content View!</h5>\n          <br></br>\n          <br></br>\n          <div\n            className=\"btn-group-toggle d-flex-between\"\n            data-toggle=\"buttons\"\n          >\n            <label className=\"btn btn-danger m-2 active\">\n              <button\n                type=\"radio\"\n                name=\"options\"\n                id=\"option1\"\n                autoComplete=\"off\"\n                // onClick={props.viewContent}\n                onClick={setHowBusyToggleHandler(event =>\n                  requestDataHandler(event)\n                )}\n                value=\"0\"\n              />{' '}\n              Click to see # of Tasks/Day\n            </label>\n\n            <label className=\"btn btn-danger m-2 active\">\n              <button\n                type=\"radio\"\n                name=\"options\"\n                id=\"option1\"\n                autoComplete=\"off\"\n                onClick={event => requestDataHandler(event)}\n                value=\"1\"\n                // onClick={event =>\n                //   setHowBusyToggleHandler(\n                //     tasksContext.dataRequestHandler(event, 'tasks', '7', null, null)\n                //   )\n                // }\n                // value=\"0\"\n              />{' '}\n              Click to see # of Tasks/Day\n            </label>\n          </div>\n          <button>Click to see # of Tasks/Day</button>\n          <br></br>\n          <br></br>\n\n          {howBusyToggle.showTasksNumEachDay ? (\n            <React.Fragment>\n              <Template />\n\n              <p\n                className={classNames({\n                  [classes[assignedClasses[0]]]: true,\n                  [classes[assignedClasses[1]]]: true\n                })}\n              ></p>\n            </React.Fragment>\n          ) : null}\n          <DatePickerPicker />\n        </div>\n      </React.Fragment>\n    );\n  };\n};\n\nexport default React.memo(Cockpit);\n"]},"metadata":{},"sourceType":"module"}