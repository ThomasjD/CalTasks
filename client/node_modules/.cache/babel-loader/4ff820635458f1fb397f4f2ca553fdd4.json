{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/example/DragAndDrop.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Col from 'antd/lib/col';\nimport Row from 'antd/lib/row';\nimport 'antd/lib/grid/style/index.css';\nimport Scheduler, { SchedulerData, ViewTypes, DnDSource, DemoData } from '../src/index';\nimport { DnDTypes } from './DnDTypes';\nimport TaskItem from './TaskItem';\nimport TaskList from './TaskList';\nimport ResourceItem from './ResourceItem';\nimport ResourceList from './ResourceList';\nimport Nav from './Nav';\nimport ViewSrcCode from './ViewSrcCode';\nimport withDragDropContext from './withDnDContext';\n\nclass DragAndDrop extends Component {\n  constructor(props) {\n    super(props);\n\n    this.prevClick = schedulerData => {\n      schedulerData.prev();\n      schedulerData.setEvents(DemoData.eventsForTaskView);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.nextClick = schedulerData => {\n      schedulerData.next();\n      schedulerData.setEvents(DemoData.eventsForTaskView);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.onViewChange = (schedulerData, view) => {\n      schedulerData.setViewType(view.viewType, view.showAgenda, view.isEventPerspective);\n      schedulerData.config.creatable = !view.isEventPerspective;\n      schedulerData.setEvents(DemoData.eventsForTaskView);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.onSelectDate = (schedulerData, date) => {\n      schedulerData.setDate(date);\n      schedulerData.setEvents(DemoData.eventsForTaskView);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.eventClicked = (schedulerData, event) => {\n      alert(\"You just clicked an event: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.ops1 = (schedulerData, event) => {\n      alert(\"You just executed ops1 to event: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.ops2 = (schedulerData, event) => {\n      alert(\"You just executed ops2 to event: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\n      if (window.confirm(\"Do you want to create a new event? {slotId: \".concat(slotId, \", slotName: \").concat(slotName, \", start: \").concat(start, \", end: \").concat(end, \", type: \").concat(type, \", item: \").concat(item, \"}\"))) {\n        let newFreshId = 0;\n        schedulerData.events.forEach(item => {\n          if (item.id >= newFreshId) newFreshId = item.id + 1;\n        });\n        let newEvent = {\n          id: newFreshId,\n          title: 'New event you just created',\n          start: start,\n          end: end,\n          resourceId: slotId,\n          bgColor: 'purple'\n        };\n\n        if (type === DnDTypes.RESOURCE) {\n          newEvent = _objectSpread({}, newEvent, {\n            groupId: slotId,\n            groupName: slotName,\n            resourceId: item.id\n          });\n        } else if (type === DnDTypes.TASK) {\n          newEvent = _objectSpread({}, newEvent, {\n            groupId: item.id,\n            groupName: item.name\n          });\n        }\n\n        schedulerData.addEvent(newEvent);\n        this.setState({\n          viewModel: schedulerData\n        });\n      }\n    };\n\n    this.updateEventStart = (schedulerData, event, newStart) => {\n      if (window.confirm(\"Do you want to adjust the start of the event? {eventId: \".concat(event.id, \", eventTitle: \").concat(event.title, \", newStart: \").concat(newStart, \"}\"))) {\n        schedulerData.updateEventStart(event, newStart);\n      }\n\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.updateEventEnd = (schedulerData, event, newEnd) => {\n      if (window.confirm(\"Do you want to adjust the end of the event? {eventId: \".concat(event.id, \", eventTitle: \").concat(event.title, \", newEnd: \").concat(newEnd, \"}\"))) {\n        schedulerData.updateEventEnd(event, newEnd);\n      }\n\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\n      if (window.confirm(\"Do you want to move the event? {eventId: \".concat(event.id, \", eventTitle: \").concat(event.title, \", newSlotId: \").concat(slotId, \", newSlotName: \").concat(slotName, \", newStart: \").concat(start, \", newEnd: \").concat(end))) {\n        schedulerData.moveEvent(event, slotId, slotName, start, end);\n        this.setState({\n          viewModel: schedulerData\n        });\n      }\n    };\n\n    this.movingEvent = (schedulerData, slotId, slotName, newStart, newEnd, action, type, item) => {\n      console.log('moving event', schedulerData, slotId, slotName, newStart, newEnd, action, type, item);\n    };\n\n    this.subtitleGetter = (schedulerData, event) => {\n      return schedulerData.isEventPerspective ? schedulerData.getResourceById(event.resourceId).name : event.groupName;\n    };\n\n    this.toggleExpandFunc = (schedulerData, slotId) => {\n      schedulerData.toggleExpandStatus(slotId);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    let _schedulerData = new SchedulerData('2017-12-18', ViewTypes.Month, false, false, {\n      schedulerWidth: '80%',\n      schedulerMaxHeight: 500,\n      views: [{\n        viewName: 'Agenda View',\n        viewType: ViewTypes.Month,\n        showAgenda: true,\n        isEventPerspective: false\n      }, {\n        viewName: 'Resource View',\n        viewType: ViewTypes.Month,\n        showAgenda: false,\n        isEventPerspective: false\n      }, {\n        viewName: 'Task View',\n        viewType: ViewTypes.Month,\n        showAgenda: false,\n        isEventPerspective: true\n      }]\n    });\n\n    _schedulerData.localeMoment.locale('en');\n\n    _schedulerData.setResources(DemoData.resources);\n\n    _schedulerData.setEvents(DemoData.eventsForTaskView);\n\n    this.state = {\n      viewModel: _schedulerData,\n      taskDndSource: new DnDSource(props => {\n        return props.task;\n      }, TaskItem, DnDTypes.TASK),\n      resourceDndSource: new DnDSource(props => {\n        return props.resource;\n      }, ResourceItem, DnDTypes.RESOURCE)\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          viewModel = _this$state.viewModel,\n          taskDndSource = _this$state.taskDndSource,\n          resourceDndSource = _this$state.resourceDndSource;\n    let h3 = viewModel.isEventPerspective ? 'Drag and drop from outside: Drag a resource and drop to the task view' : 'Drag and drop from outside: Drag a task and drop to the resource view';\n    let dndList = viewModel.isEventPerspective ? React.createElement(ResourceList, {\n      schedulerData: viewModel,\n      newEvent: this.newEvent,\n      resourceDndSource: resourceDndSource,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }) : React.createElement(TaskList, {\n      schedulerData: viewModel,\n      newEvent: this.newEvent,\n      taskDndSource: taskDndSource,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }); //register the external DnDSources\n\n    let dndSources = [taskDndSource, resourceDndSource];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, h3, React.createElement(ViewSrcCode, {\n      srcCodeUrl: \"https://github.com/StephenChou1017/react-big-scheduler/blob/master/example/DragAndDrop.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Scheduler, {\n      schedulerData: viewModel,\n      prevClick: this.prevClick,\n      nextClick: this.nextClick,\n      onSelectDate: this.onSelectDate,\n      onViewChange: this.onViewChange,\n      eventItemClick: this.eventClicked,\n      viewEventClick: this.ops1,\n      viewEventText: \"Ops 1\",\n      viewEvent2Text: \"Ops 2\",\n      viewEvent2Click: this.ops2,\n      updateEventStart: this.updateEventStart,\n      updateEventEnd: this.updateEventEnd,\n      moveEvent: this.moveEvent,\n      movingEvent: this.movingEvent,\n      newEvent: this.newEvent,\n      subtitleGetter: this.subtitleGetter,\n      dndSources: dndSources,\n      toggleExpandFunc: this.toggleExpandFunc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(Col, {\n      span: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, dndList))));\n  }\n\n}\n\nexport default withDragDropContext(DragAndDrop);","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/example/DragAndDrop.js"],"names":["React","Component","PropTypes","Col","Row","Scheduler","SchedulerData","ViewTypes","DnDSource","DemoData","DnDTypes","TaskItem","TaskList","ResourceItem","ResourceList","Nav","ViewSrcCode","withDragDropContext","DragAndDrop","constructor","props","prevClick","schedulerData","prev","setEvents","eventsForTaskView","setState","viewModel","nextClick","next","onViewChange","view","setViewType","viewType","showAgenda","isEventPerspective","config","creatable","onSelectDate","date","setDate","eventClicked","event","alert","id","title","ops1","ops2","newEvent","slotId","slotName","start","end","type","item","window","confirm","newFreshId","events","forEach","resourceId","bgColor","RESOURCE","groupId","groupName","TASK","name","addEvent","updateEventStart","newStart","updateEventEnd","newEnd","moveEvent","movingEvent","action","console","log","subtitleGetter","getResourceById","toggleExpandFunc","toggleExpandStatus","Month","schedulerWidth","schedulerMaxHeight","views","viewName","localeMoment","locale","setResources","resources","state","taskDndSource","task","resourceDndSource","resource","render","h3","dndList","dndSources","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { PropTypes } from 'prop-types';\r\nimport Col from 'antd/lib/col';\r\nimport Row from 'antd/lib/row';\r\nimport 'antd/lib/grid/style/index.css';\r\nimport Scheduler, {\r\n  SchedulerData,\r\n  ViewTypes,\r\n  DnDSource,\r\n  DemoData\r\n} from '../src/index';\r\nimport { DnDTypes } from './DnDTypes';\r\nimport TaskItem from './TaskItem';\r\nimport TaskList from './TaskList';\r\nimport ResourceItem from './ResourceItem';\r\nimport ResourceList from './ResourceList';\r\nimport Nav from './Nav';\r\nimport ViewSrcCode from './ViewSrcCode';\r\nimport withDragDropContext from './withDnDContext';\r\n\r\nclass DragAndDrop extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let schedulerData = new SchedulerData(\r\n      '2017-12-18',\r\n      ViewTypes.Month,\r\n      false,\r\n      false,\r\n      {\r\n        schedulerWidth: '80%',\r\n        schedulerMaxHeight: 500,\r\n        views: [\r\n          {\r\n            viewName: 'Agenda View',\r\n            viewType: ViewTypes.Month,\r\n            showAgenda: true,\r\n            isEventPerspective: false\r\n          },\r\n          {\r\n            viewName: 'Resource View',\r\n            viewType: ViewTypes.Month,\r\n            showAgenda: false,\r\n            isEventPerspective: false\r\n          },\r\n          {\r\n            viewName: 'Task View',\r\n            viewType: ViewTypes.Month,\r\n            showAgenda: false,\r\n            isEventPerspective: true\r\n          }\r\n        ]\r\n      }\r\n    );\r\n    schedulerData.localeMoment.locale('en');\r\n    schedulerData.setResources(DemoData.resources);\r\n    schedulerData.setEvents(DemoData.eventsForTaskView);\r\n    this.state = {\r\n      viewModel: schedulerData,\r\n      taskDndSource: new DnDSource(\r\n        props => {\r\n          return props.task;\r\n        },\r\n        TaskItem,\r\n        DnDTypes.TASK\r\n      ),\r\n      resourceDndSource: new DnDSource(\r\n        props => {\r\n          return props.resource;\r\n        },\r\n        ResourceItem,\r\n        DnDTypes.RESOURCE\r\n      )\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { viewModel, taskDndSource, resourceDndSource } = this.state;\r\n    let h3 = viewModel.isEventPerspective\r\n      ? 'Drag and drop from outside: Drag a resource and drop to the task view'\r\n      : 'Drag and drop from outside: Drag a task and drop to the resource view';\r\n    let dndList = viewModel.isEventPerspective ? (\r\n      <ResourceList\r\n        schedulerData={viewModel}\r\n        newEvent={this.newEvent}\r\n        resourceDndSource={resourceDndSource}\r\n      />\r\n    ) : (\r\n      <TaskList\r\n        schedulerData={viewModel}\r\n        newEvent={this.newEvent}\r\n        taskDndSource={taskDndSource}\r\n      />\r\n    );\r\n\r\n    //register the external DnDSources\r\n    let dndSources = [taskDndSource, resourceDndSource];\r\n    return (\r\n      <div>\r\n        <Nav />\r\n        <div>\r\n          <h3 style={{ textAlign: 'center' }}>\r\n            {h3}\r\n            <ViewSrcCode srcCodeUrl=\"https://github.com/StephenChou1017/react-big-scheduler/blob/master/example/DragAndDrop.js\" />\r\n          </h3>\r\n          <Row>\r\n            <Col span={20}>\r\n              <Scheduler\r\n                schedulerData={viewModel}\r\n                prevClick={this.prevClick}\r\n                nextClick={this.nextClick}\r\n                onSelectDate={this.onSelectDate}\r\n                onViewChange={this.onViewChange}\r\n                eventItemClick={this.eventClicked}\r\n                viewEventClick={this.ops1}\r\n                viewEventText=\"Ops 1\"\r\n                viewEvent2Text=\"Ops 2\"\r\n                viewEvent2Click={this.ops2}\r\n                updateEventStart={this.updateEventStart}\r\n                updateEventEnd={this.updateEventEnd}\r\n                moveEvent={this.moveEvent}\r\n                movingEvent={this.movingEvent}\r\n                newEvent={this.newEvent}\r\n                subtitleGetter={this.subtitleGetter}\r\n                dndSources={dndSources}\r\n                toggleExpandFunc={this.toggleExpandFunc}\r\n              />\r\n            </Col>\r\n            <Col span={4}>{dndList}</Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  prevClick = schedulerData => {\r\n    schedulerData.prev();\r\n    schedulerData.setEvents(DemoData.eventsForTaskView);\r\n    this.setState({\r\n      viewModel: schedulerData\r\n    });\r\n  };\r\n\r\n  nextClick = schedulerData => {\r\n    schedulerData.next();\r\n    schedulerData.setEvents(DemoData.eventsForTaskView);\r\n    this.setState({\r\n      viewModel: schedulerData\r\n    });\r\n  };\r\n\r\n  onViewChange = (schedulerData, view) => {\r\n    schedulerData.setViewType(\r\n      view.viewType,\r\n      view.showAgenda,\r\n      view.isEventPerspective\r\n    );\r\n    schedulerData.config.creatable = !view.isEventPerspective;\r\n    schedulerData.setEvents(DemoData.eventsForTaskView);\r\n    this.setState({\r\n      viewModel: schedulerData\r\n    });\r\n  };\r\n\r\n  onSelectDate = (schedulerData, date) => {\r\n    schedulerData.setDate(date);\r\n    schedulerData.setEvents(DemoData.eventsForTaskView);\r\n    this.setState({\r\n      viewModel: schedulerData\r\n    });\r\n  };\r\n\r\n  eventClicked = (schedulerData, event) => {\r\n    alert(\r\n      `You just clicked an event: {id: ${event.id}, title: ${event.title}}`\r\n    );\r\n  };\r\n\r\n  ops1 = (schedulerData, event) => {\r\n    alert(\r\n      `You just executed ops1 to event: {id: ${event.id}, title: ${event.title}}`\r\n    );\r\n  };\r\n\r\n  ops2 = (schedulerData, event) => {\r\n    alert(\r\n      `You just executed ops2 to event: {id: ${event.id}, title: ${event.title}}`\r\n    );\r\n  };\r\n\r\n  newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\r\n    if (\r\n      window.confirm(\r\n        `Do you want to create a new event? {slotId: ${slotId}, slotName: ${slotName}, start: ${start}, end: ${end}, type: ${type}, item: ${item}}`\r\n      )\r\n    ) {\r\n      let newFreshId = 0;\r\n      schedulerData.events.forEach(item => {\r\n        if (item.id >= newFreshId) newFreshId = item.id + 1;\r\n      });\r\n\r\n      let newEvent = {\r\n        id: newFreshId,\r\n        title: 'New event you just created',\r\n        start: start,\r\n        end: end,\r\n        resourceId: slotId,\r\n        bgColor: 'purple'\r\n      };\r\n\r\n      if (type === DnDTypes.RESOURCE) {\r\n        newEvent = {\r\n          ...newEvent,\r\n          groupId: slotId,\r\n          groupName: slotName,\r\n          resourceId: item.id\r\n        };\r\n      } else if (type === DnDTypes.TASK) {\r\n        newEvent = {\r\n          ...newEvent,\r\n          groupId: item.id,\r\n          groupName: item.name\r\n        };\r\n      }\r\n\r\n      schedulerData.addEvent(newEvent);\r\n      this.setState({\r\n        viewModel: schedulerData\r\n      });\r\n    }\r\n  };\r\n\r\n  updateEventStart = (schedulerData, event, newStart) => {\r\n    if (\r\n      window.confirm(\r\n        `Do you want to adjust the start of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newStart: ${newStart}}`\r\n      )\r\n    ) {\r\n      schedulerData.updateEventStart(event, newStart);\r\n    }\r\n    this.setState({\r\n      viewModel: schedulerData\r\n    });\r\n  };\r\n\r\n  updateEventEnd = (schedulerData, event, newEnd) => {\r\n    if (\r\n      window.confirm(\r\n        `Do you want to adjust the end of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newEnd: ${newEnd}}`\r\n      )\r\n    ) {\r\n      schedulerData.updateEventEnd(event, newEnd);\r\n    }\r\n    this.setState({\r\n      viewModel: schedulerData\r\n    });\r\n  };\r\n\r\n  moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\r\n    if (\r\n      window.confirm(\r\n        `Do you want to move the event? {eventId: ${event.id}, eventTitle: ${event.title}, newSlotId: ${slotId}, newSlotName: ${slotName}, newStart: ${start}, newEnd: ${end}`\r\n      )\r\n    ) {\r\n      schedulerData.moveEvent(event, slotId, slotName, start, end);\r\n      this.setState({\r\n        viewModel: schedulerData\r\n      });\r\n    }\r\n  };\r\n\r\n  movingEvent = (\r\n    schedulerData,\r\n    slotId,\r\n    slotName,\r\n    newStart,\r\n    newEnd,\r\n    action,\r\n    type,\r\n    item\r\n  ) => {\r\n    console.log(\r\n      'moving event',\r\n      schedulerData,\r\n      slotId,\r\n      slotName,\r\n      newStart,\r\n      newEnd,\r\n      action,\r\n      type,\r\n      item\r\n    );\r\n  };\r\n\r\n  subtitleGetter = (schedulerData, event) => {\r\n    return schedulerData.isEventPerspective\r\n      ? schedulerData.getResourceById(event.resourceId).name\r\n      : event.groupName;\r\n  };\r\n\r\n  toggleExpandFunc = (schedulerData, slotId) => {\r\n    schedulerData.toggleExpandStatus(slotId);\r\n    this.setState({\r\n      viewModel: schedulerData\r\n    });\r\n  };\r\n}\r\n\r\nexport default withDragDropContext(DragAndDrop);\r\n"]},"metadata":{},"sourceType":"module"}