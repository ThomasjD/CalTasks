{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/Store/SyllabusData.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react'; //import classes from '../../components/Cockpit/Cockpit.module.css';\n\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport Store from './Store';\nimport EventsData from './EventsData';\n\nclass Syllabus extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      maxReact: [{\n        id: 'xvlwil',\n        lesson: '90. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbskk',\n        lesson: '91. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      maxReactWorkLeft: [{\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      }, {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      }, {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }],\n      minReact: [{\n        id: 'xvldddwil',\n        lesson: '936670. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbnnskk',\n        lesson: '93531. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhsdhck2',\n        lesson: '9100. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      lastLessonHeader: [],\n      crunk: 'Hootie and teh blowfish',\n      showLeftOverLessonsFromSyllabus: false,\n      TasksData: 'd',\n      nothing: 'nothing',\n      showData2: false\n    };\n\n    this.lastLessonHeaderHandler = () => {\n      if (this.state.maxReact.length != 0) {\n        this.setState({\n          lastLessonHeader: this.state.maxReact[0]\n        }, () => {\n          this.props.receiveSyllabusDataHandler(this.state);\n        });\n      } else {\n        this.setState({\n          lastLessonHeader: this.state.lastLessonHeader\n        }, () => {\n          this.props.receiveSyllabusDataHandler(this.state);\n        });\n      }\n    };\n\n    this.assignLessonFromSyllabus = () => {\n      this.setState({\n        showLeftOverLessonsFromSyllabus: true\n      });\n\n      if (this.state.maxReact.length != 0) {\n        this.setState({\n          lastLessonHeader: this.state.maxReact[0]\n        });\n      } else {\n        this.setState({\n          lastLessonHeader: this.state.lastLessonHeader\n        });\n      }\n    };\n\n    this.deleteLessonFromAssignedSyllabusHandler = (event, taskIndex) => {\n      alert('Are you sure you want to delete this Lesson?');\n      let currentScheduledLessons = [...this.state.maxReact];\n      currentScheduledLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReact: currentScheduledLessons\n      });\n    };\n\n    this.deleteLessonFromOriginalSyllabusHandler = (event, taskIndex) => {\n      alert('Are you sure you want to add this lesson?');\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      currentOriginalLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReactWorkLeft: currentOriginalLessons\n      });\n    };\n\n    this.addLessonFromOriginalSyllabusHandler = taskIndex => {\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      let lessonToAdd = currentOriginalLessons[taskIndex]; //add to maxReact the picked lesson\n\n      console.log('I am inside addNewLesonHandler');\n      let currentMaxReactSyllabus = [...this.state.maxReact];\n      currentMaxReactSyllabus.push(lessonToAdd); //currentMaxReactSyllabus.push(newLesson);\n\n      console.log(currentMaxReactSyllabus);\n      let currentShowLeftOverLessonsFromSyllabus = this.state.showLeftOverLessonsFromSyllabus; //Showing current left over Lessons from Syllabus (after addition/deletion)\n\n      this.setState({\n        showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus\n      }); //adding to redefining what maxReact is w/ new lesson\n\n      this.setState({\n        maxReact: currentMaxReactSyllabus\n      });\n      this.deleteLessonFromOriginalSyllabusHandler(taskIndex);\n    };\n\n    this.lessonChangeHandler = (event, taskChangeId) => {\n      const foundTaskId = this.state.maxReact.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReact[foundTaskId]); //using updated values to define the lesson of the particular pulled out lesson\n\n\n      updatedLessons.lesson = event.target.value; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReact]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskId] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReact: lessons\n      });\n    };\n\n    this.leftOverLessonChangeHandler = (event, taskChangeId) => {\n      const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReactWorkLeft[foundTaskId]); //using updated values to define the lesson of the particular pulled out lesson\n\n\n      updatedLessons.lesson = event.target.value; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReactWorkLeft]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskId] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReactWorkLeft: lessons\n      });\n    };\n\n    this.showLeftOverLessonsFromSyllabus = () => {\n      this.setState({\n        showLeftOverLessonsFromSyllabus: true\n      }, () => this.lastLessonHeaderHandler(), () => {\n        this.props.receiveSyllabusDataHandler(this.state);\n      });\n    };\n\n    this.TasksDataHandler = word => {\n      // console.log(word);\n      // let TasksData = word;\n      this.setState({\n        TasksData: word\n      });\n    };\n\n    this.TasksDataHandler2 = () => {\n      this.setState({\n        showData2: 'Hey so TaskDataHandler2 got called bec of handlerchoice passed in from RightCockpit -> Store -> SyllabusData'\n      }, () => {\n        this.props.receiveSyllabusDataHandler(this.state);\n      });\n    };\n  }\n\n  render() {\n    switch (this.props.syllabusHandlerChoice) {\n      case '1':\n        this.lastLessonHeaderHandler();\n        break;\n\n      case '6':\n        this.showLeftOverLessonsFromSyllabus();\n        break;\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"I'm inside of SyllabusData \");\n  }\n\n}\n/*\n    return (\n      <div>\n        <TasksData\n          data={this.TasksDataHandler}\n          showData2={this.state.showData2}\n          dataHandler2={this.TasksDataHandler2}\n        ></TasksData>\n\n        <RightCockpit\n          displayWord={displayWord}\n          dataHandler2={this.TasksDataHandler2}\n          showData2={this.state.showData2}\n          showData3={this.state.showData3}\n          data2={this.state.TasksData}\n          syllabusEverything={this.state}\n          dataHandler={this.TasksDataHandler2}\n          lastLessonHeaderHandler={event => this.lastLessonHeaderHandler(event)}\n          assignLessonFromSyllabus={event =>\n            this.assignLessonFromSyllabus(event)\n          }\n          deleteLessonFromAssignedSyllabusHandler={event =>\n            this.deleteLessonFromAssignedSyllabusHandler(event)\n          }\n          deleteLessonFromOriginalSyllabusHandler={event =>\n            this.deleteLessonFromOriginalSyllabusHandler(event)\n          }\n          addLessonFromOriginalSyllabusHandler={event =>\n            this.addLessonFromOriginalSyllabusHandler(event)\n          }\n          lessonChangeHandler={(event, taskIndex) =>\n            this.lessonChangeHandler(event, taskIndex)\n          }\n          showLeftOverLessonsFromSyllabus={event =>\n            this.showLeftOverLessonsFromSyllabus(event)\n          }\n          leftOverLessonChangeHandler={event =>\n            this.leftOverLessonChangeHandler(event)\n          }\n          data={this.state.TasksData}\n        ></RightCockpit>\n      </div>\n    );\n  }\n}\n*/\n\n\nexport default Syllabus;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/Store/SyllabusData.js"],"names":["React","Component","RightCockpit","TasksData","Store","EventsData","Syllabus","state","maxReact","id","lesson","completion","maxReactWorkLeft","minReact","lastLessonHeader","crunk","showLeftOverLessonsFromSyllabus","nothing","showData2","lastLessonHeaderHandler","length","setState","props","receiveSyllabusDataHandler","assignLessonFromSyllabus","deleteLessonFromAssignedSyllabusHandler","event","taskIndex","alert","currentScheduledLessons","splice","deleteLessonFromOriginalSyllabusHandler","currentOriginalLessons","addLessonFromOriginalSyllabusHandler","lessonToAdd","console","log","currentMaxReactSyllabus","push","currentShowLeftOverLessonsFromSyllabus","lessonChangeHandler","taskChangeId","foundTaskId","findIndex","currentId","updatedLessons","target","value","lessons","leftOverLessonChangeHandler","TasksDataHandler","word","TasksDataHandler2","render","syllabusHandlerChoice"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import classes from '../../components/Cockpit/Cockpit.module.css';\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport Store from './Store';\nimport EventsData from './EventsData';\nclass Syllabus extends Component {\n  state = {\n    maxReact: [\n      { id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n      { id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n      {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    maxReactWorkLeft: [\n      {\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      },\n      {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      },\n      {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }\n    ],\n    minReact: [\n      {\n        id: 'xvldddwil',\n        lesson: '936670. (for props Changes)',\n        completion: false\n      },\n      {\n        id: 'bbbnnskk',\n        lesson: '93531. (for state Changes)',\n        completion: false\n      },\n      {\n        id: 'kjhsdhck2',\n        lesson: '9100. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    lastLessonHeader: [],\n    crunk: 'Hootie and teh blowfish',\n    showLeftOverLessonsFromSyllabus: false,\n    TasksData: 'd',\n    nothing: 'nothing',\n    showData2: false\n  };\n  // syllabusDataHandler = () => {\n  //   let sendBacKminReact = this.state.minReact;\n  //   console.log(sendBacKminReact);\n  // };\n  lastLessonHeaderHandler = () => {\n    if (this.state.maxReact.length != 0) {\n      this.setState({ lastLessonHeader: this.state.maxReact[0] }, () => {\n        this.props.receiveSyllabusDataHandler(this.state);\n      });\n    } else {\n      this.setState({ lastLessonHeader: this.state.lastLessonHeader }, () => {\n        this.props.receiveSyllabusDataHandler(this.state);\n      });\n    }\n  };\n\n  assignLessonFromSyllabus = () => {\n    this.setState({ showLeftOverLessonsFromSyllabus: true });\n\n    if (this.state.maxReact.length != 0) {\n      this.setState({ lastLessonHeader: this.state.maxReact[0] });\n    } else {\n      this.setState({ lastLessonHeader: this.state.lastLessonHeader });\n    }\n  };\n\n  deleteLessonFromAssignedSyllabusHandler = (event, taskIndex) => {\n    alert('Are you sure you want to delete this Lesson?');\n\n    let currentScheduledLessons = [...this.state.maxReact];\n    currentScheduledLessons.splice(taskIndex, 1);\n    this.setState({ maxReact: currentScheduledLessons });\n  };\n\n  deleteLessonFromOriginalSyllabusHandler = (event, taskIndex) => {\n    alert('Are you sure you want to add this lesson?');\n\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n\n    currentOriginalLessons.splice(taskIndex, 1);\n\n    this.setState({ maxReactWorkLeft: currentOriginalLessons });\n  };\n\n  addLessonFromOriginalSyllabusHandler = taskIndex => {\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n    let lessonToAdd = currentOriginalLessons[taskIndex];\n\n    //add to maxReact the picked lesson\n    console.log('I am inside addNewLesonHandler');\n    let currentMaxReactSyllabus = [...this.state.maxReact];\n    currentMaxReactSyllabus.push(lessonToAdd);\n\n    //currentMaxReactSyllabus.push(newLesson);\n    console.log(currentMaxReactSyllabus);\n    let currentShowLeftOverLessonsFromSyllabus = this.state\n      .showLeftOverLessonsFromSyllabus;\n\n    //Showing current left over Lessons from Syllabus (after addition/deletion)\n    this.setState({\n      showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus\n    });\n    //adding to redefining what maxReact is w/ new lesson\n    this.setState({ maxReact: currentMaxReactSyllabus });\n\n    this.deleteLessonFromOriginalSyllabusHandler(taskIndex);\n  };\n\n  lessonChangeHandler = (event, taskChangeId) => {\n    const foundTaskId = this.state.maxReact.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReact[foundTaskId] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    updatedLessons.lesson = event.target.value;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReact];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskId] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReact: lessons });\n  };\n\n  leftOverLessonChangeHandler = (event, taskChangeId) => {\n    const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReactWorkLeft[foundTaskId] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    updatedLessons.lesson = event.target.value;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReactWorkLeft];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskId] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReactWorkLeft: lessons });\n  };\n  showLeftOverLessonsFromSyllabus = () => {\n    this.setState(\n      { showLeftOverLessonsFromSyllabus: true },\n      () => this.lastLessonHeaderHandler(),\n      () => {\n        this.props.receiveSyllabusDataHandler(this.state);\n      }\n    );\n  };\n  TasksDataHandler = word => {\n    // console.log(word);\n    // let TasksData = word;\n    this.setState({ TasksData: word });\n  };\n\n  TasksDataHandler2 = () => {\n    this.setState(\n      {\n        showData2:\n          'Hey so TaskDataHandler2 got called bec of handlerchoice passed in from RightCockpit -> Store -> SyllabusData'\n      },\n      () => {\n        this.props.receiveSyllabusDataHandler(this.state);\n      }\n    );\n  };\n\n  render() {\n    switch (this.props.syllabusHandlerChoice) {\n      case '1':\n        this.lastLessonHeaderHandler();\n        break;\n      case '6':\n        this.showLeftOverLessonsFromSyllabus();\n        break;\n    }\n\n    return <div>I'm inside of SyllabusData </div>;\n  }\n}\n/*\n    return (\n      <div>\n        <TasksData\n          data={this.TasksDataHandler}\n          showData2={this.state.showData2}\n          dataHandler2={this.TasksDataHandler2}\n        ></TasksData>\n\n        <RightCockpit\n          displayWord={displayWord}\n          dataHandler2={this.TasksDataHandler2}\n          showData2={this.state.showData2}\n          showData3={this.state.showData3}\n          data2={this.state.TasksData}\n          syllabusEverything={this.state}\n          dataHandler={this.TasksDataHandler2}\n          lastLessonHeaderHandler={event => this.lastLessonHeaderHandler(event)}\n          assignLessonFromSyllabus={event =>\n            this.assignLessonFromSyllabus(event)\n          }\n          deleteLessonFromAssignedSyllabusHandler={event =>\n            this.deleteLessonFromAssignedSyllabusHandler(event)\n          }\n          deleteLessonFromOriginalSyllabusHandler={event =>\n            this.deleteLessonFromOriginalSyllabusHandler(event)\n          }\n          addLessonFromOriginalSyllabusHandler={event =>\n            this.addLessonFromOriginalSyllabusHandler(event)\n          }\n          lessonChangeHandler={(event, taskIndex) =>\n            this.lessonChangeHandler(event, taskIndex)\n          }\n          showLeftOverLessonsFromSyllabus={event =>\n            this.showLeftOverLessonsFromSyllabus(event)\n          }\n          leftOverLessonChangeHandler={event =>\n            this.leftOverLessonChangeHandler(event)\n          }\n          data={this.state.TasksData}\n        ></RightCockpit>\n      </div>\n    );\n  }\n}\n*/\n\nexport default Syllabus;\n"]},"metadata":{},"sourceType":"module"}