{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/components/Tasks/Tasks.js\";\nimport React, { PureComponent } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\n\nclass Tasks extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.todayTasksHandler = () => {\n      return this.props.tasks.map((task, index) => {\n        return React.createElement(ErrorBoundary, {\n          key: task.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, React.createElement(Task, {\n          todo: task.todo,\n          deadline: task.deadline,\n          location: task.location,\n          key: task.id,\n          click: () => this.props.clicked(index),\n          changed: event => this.props.changed(event, task.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }, \"Change Task (below)\"));\n      });\n    };\n  }\n\n  // static getDerivedStateFromProps(props, state) {\n  //     console.log('[Tasks] getDerivedStateFromProps')\n  //     return state\n  // }\n  //niche -removed\n  // componentWillReceiveProps(props) {\n  //    console.log('[Persons.js] componentWillReceiveProps', props);\n  // }\n\n  /*\n    shouldComponentUpdate (nextProps, nextState) {\n        console.log('[Tasks] shouldComponentUpdate')\n        //comparing if props have changed\n        if (nextProps.tasks !== this.props.tasks) {\n            return true\n        } else {\n            return false\n        }\n       \n    }\n    */\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('[Tasks] getSnapshotBeforeUpdate');\n    return {\n      message: 'Snapshot'\n    };\n  } // componentWillUpdate() {\n  //     return\n  // }\n\n\n  componentDidUpdate(prevProps, prevState, message) {\n    console.log('[Tasks] componentDidUpdate');\n    console.log(message);\n  }\n\n  componentWillUnmount() {\n    console.log('[Tasks.js] componentWillUnmount');\n  }\n\n  render() {\n    console.log('[Tasks] rendering...');\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \" Today's Tasks\"), React.createElement(\"table\", {\n      id: \"students\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, renderTableHeaderHandler()), todayTasksHandler())));\n  }\n\n}\n\nexport default Tasks;\n/*\noriginal\nthis.props.tasks.map((task, index) => {\n            return (<ErrorBoundary key = {task.id}>\n            <Task \n            todo = {task.todo} \n            deadline = {task.deadline}\n            location = {task.location}\n            key = {task.id}\n            click = {() => this.props.clicked(index)}\n            changed = {(event) => this.props.changed (event, task.id)}>Change Task (below)</Task>\n            </ErrorBoundary>\n            )\n          })\n*/\n\n/* original functional component\n\nimport React from 'react'\nimport Task from './Task/Task'\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary'\n\nconst tasks = (props) => {\n\n    console.log('[Tasks.js] rendering')\n\n//get props from app.js, run through each element in state to feed into <Task>\n    //todo,deadline,location,key,click, changed sent to <Task>\nreturn props.tasks.map((task, index) => {\n    return (<ErrorBoundary key = {task.id}>\n    <Task \n    todo = {task.todo} \n    deadline = {task.deadline}\n    location = {task.location}\n    key = {task.id}\n    click = {() => props.clicked(index)}\n    changed = {(event) => props.changed (event, task.id)}>Change Task (below)</Task>\n    </ErrorBoundary>\n    )\n  })\n}\nexport default tasks;\n\n*/","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/components/Tasks/Tasks.js"],"names":["React","PureComponent","Task","ErrorBoundary","Tasks","constructor","props","todayTasksHandler","tasks","map","task","index","id","todo","deadline","location","clicked","event","changed","getSnapshotBeforeUpdate","prevProps","prevState","console","log","message","componentDidUpdate","componentWillUnmount","render","renderTableHeaderHandler"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;;AAEA,MAAMC,KAAN,SAAoBH,aAApB,CAAkC;AAChCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAInBC,iBAJmB,GAIC,MAAM;AACxB,aAAO,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,GAAjB,CAAqB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3C,eACE,oBAAC,aAAD;AAAe,UAAA,GAAG,EAAED,IAAI,CAACE,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AACE,UAAA,IAAI,EAAEF,IAAI,CAACG,IADb;AAEE,UAAA,QAAQ,EAAEH,IAAI,CAACI,QAFjB;AAGE,UAAA,QAAQ,EAAEJ,IAAI,CAACK,QAHjB;AAIE,UAAA,GAAG,EAAEL,IAAI,CAACE,EAJZ;AAKE,UAAA,KAAK,EAAE,MAAM,KAAKN,KAAL,CAAWU,OAAX,CAAmBL,KAAnB,CALf;AAME,UAAA,OAAO,EAAEM,KAAK,IAAI,KAAKX,KAAL,CAAWY,OAAX,CAAmBD,KAAnB,EAA0BP,IAAI,CAACE,EAA/B,CANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,CADF;AAcD,OAfM,CAAP;AAgBD,KArBkB;AAElB;;AAqBD;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AAaAO,EAAAA,uBAAuB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACA,WAAO;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAP;AACD,GAlD+B,CAoDhC;AACA;AACA;;;AAEAC,EAAAA,kBAAkB,CAACL,SAAD,EAAYC,SAAZ,EAAuBG,OAAvB,EAAgC;AAChDF,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACD;;AAEDE,EAAAA,oBAAoB,GAAG;AACrBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACPL,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAEA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE;AAAO,MAAA,EAAE,EAAC,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKK,wBAAwB,EAA7B,CADF,EAEGrB,iBAAiB,EAFpB,CADF,CAFF,CADF;AAWD;;AA/E+B;;AAkFlC,eAAeH,KAAf;AAEA;;;;;;;;;;;;;;;;AAgBA","sourcesContent":["import React, { PureComponent } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\n\nclass Tasks extends PureComponent {\n  constructor(props) {\n    super(props);\n  }\n\n  todayTasksHandler = () => {\n    return this.props.tasks.map((task, index) => {\n      return (\n        <ErrorBoundary key={task.id}>\n          <Task\n            todo={task.todo}\n            deadline={task.deadline}\n            location={task.location}\n            key={task.id}\n            click={() => this.props.clicked(index)}\n            changed={event => this.props.changed(event, task.id)}\n          >\n            Change Task (below)\n          </Task>\n        </ErrorBoundary>\n      );\n    });\n  };\n\n  // static getDerivedStateFromProps(props, state) {\n  //     console.log('[Tasks] getDerivedStateFromProps')\n  //     return state\n  // }\n\n  //niche -removed\n  // componentWillReceiveProps(props) {\n  //    console.log('[Persons.js] componentWillReceiveProps', props);\n  // }\n\n  /*\n    shouldComponentUpdate (nextProps, nextState) {\n        console.log('[Tasks] shouldComponentUpdate')\n        //comparing if props have changed\n        if (nextProps.tasks !== this.props.tasks) {\n            return true\n        } else {\n            return false\n        }\n       \n    }\n    */\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('[Tasks] getSnapshotBeforeUpdate');\n    return { message: 'Snapshot' };\n  }\n\n  // componentWillUpdate() {\n  //     return\n  // }\n\n  componentDidUpdate(prevProps, prevState, message) {\n    console.log('[Tasks] componentDidUpdate');\n    console.log(message);\n  }\n\n  componentWillUnmount() {\n    console.log('[Tasks.js] componentWillUnmount');\n  }\n\n  render() {\n    console.log('[Tasks] rendering...');\n\n    return (\n      <div>\n        <h1 id=\"title\"> Today's Tasks</h1>\n        <table id=\"students\">\n          <tbody>\n            <tr>{renderTableHeaderHandler()}</tr>\n            {todayTasksHandler()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Tasks;\n\n/*\noriginal\nthis.props.tasks.map((task, index) => {\n            return (<ErrorBoundary key = {task.id}>\n            <Task \n            todo = {task.todo} \n            deadline = {task.deadline}\n            location = {task.location}\n            key = {task.id}\n            click = {() => this.props.clicked(index)}\n            changed = {(event) => this.props.changed (event, task.id)}>Change Task (below)</Task>\n            </ErrorBoundary>\n            )\n          })\n*/\n\n/* original functional component\n\nimport React from 'react'\nimport Task from './Task/Task'\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary'\n\nconst tasks = (props) => {\n\n    console.log('[Tasks.js] rendering')\n\n//get props from app.js, run through each element in state to feed into <Task>\n    //todo,deadline,location,key,click, changed sent to <Task>\nreturn props.tasks.map((task, index) => {\n    return (<ErrorBoundary key = {task.id}>\n    <Task \n    todo = {task.todo} \n    deadline = {task.deadline}\n    location = {task.location}\n    key = {task.id}\n    click = {() => props.clicked(index)}\n    changed = {(event) => props.changed (event, task.id)}>Change Task (below)</Task>\n    </ErrorBoundary>\n    )\n  })\n}\nexport default tasks;\n\n*/\n"]},"metadata":{},"sourceType":"module"}