{"ast":null,"code":"import _objectSpread from \"/Users/thomasjd/Desktop/caltask/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/containers/Store/CalendarData.js\";\nimport React, { Component } from 'react'; //import classes from '../../components/Cockpit/Cockpit.module.css';\n\nimport DatePicker from 'react-datepicker';\nimport numToDay from '../../components/Calendar/numToDay';\nimport StoreContext from '../../context/StoreDataContext';\nimport { format, compareAsc } from 'date-fns';\n\nclass CalendarData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showChooseDate: false,\n      days: {\n        '200204Tue': {\n          unScheduledTasks: [{\n            id: 'task8',\n            title: 'homework;'\n          }],\n          unScheduledEvents: [{\n            eventId: 'event37',\n            eventTitle: 'homework;',\n            eventNote: '',\n            eventCategory: '',\n            eventStartTimeDate: '',\n            eventFinishTimeDate: '',\n            //later: If one-day event\n            eventDuration: '',\n            //later: T -> schedule it on calendarData\n            //F--> put into unScheduledEventsList for that day\n            blockOffTimeSlot: false,\n            showStartTimeDate: false,\n            showFinishTimeDate: false,\n            eventDeadline: '',\n            //later: show multiday non-continous event\n            showMultidayNonContinousDate: false\n          }]\n        }\n      }\n    };\n\n    this.createDayObjName = event => {\n      event.preventDefault();\n      alert('inside createDayObjName');\n      let day = this.state.startTimeDate.day;\n      let date = this.state.startTimeDate.toLocalString;\n      console.log(date);\n    };\n\n    this.newTaskHandler = value => {\n      let newTask = {\n        id: value.task,\n        //.concat(newEvent.dayObjName),\n        // timeOfDay: startTimeDate.time,\n        objName: value.dayObjName,\n        task: value.eventTitle,\n        note: value.eventNote,\n        deadline: value.deadline,\n        category: value.eventCategory // assignedTimeStart: startTimeDate,\n        // assignedTimeStop: newEvent.finishTimeDate\n\n      };\n      let dayObjName = value.dayObjName; // let dataLocation = this.context.dataRequestDetails.dataLocation;\n\n      let dataLocation = value.dayObjName;\n      let currentDaysObj = this.state.days; //if there there is NO obj for that day\n\n      if (typeof currentDaysObj[dayObjName] == 'undefined') {\n        let newEvent = null;\n        this.newDayObj(dayObjName, newTask, newEvent);\n        console.log('Inside if of newEventHandler() ');\n      } else {\n        currentDaysObj[dayObjName].unscheduledtasks.push(newTask);\n        console.log(currentDaysObj[dayObjName]);\n        this.setState({\n          days: currentDaysObj\n        }, () => console.log('Inside of newevent() setState  '));\n      }\n    };\n\n    this.newEventHandler = value => {\n      let newEvent = this.context.dataRequestDetails.value;\n      let newEventObj = {\n        eventId: value.eventId,\n        //.concat(newEvent.dayObjName),\n        // timeOfDay: startTimeDate.time,\n        objName: value.dayObjName,\n        eventTitle: value.eventTitle,\n        eventNote: value.eventNote,\n        eventDeadline: value.eventDeadline,\n        eventCategory: value.eventCategory,\n        eventStartTimeDate: value.eventStartTimeDate,\n        eventFinishTimeDate: value.eventFinishTimeDate,\n        eventDuration: value.eventDuration,\n        //\n        blockOffTimeSlot: value.blockOffTimeSlot,\n        //required\n        showStartTimeDate: value.showStartTimeDate,\n        //later: show another datePicker to pick a multiday event\n        showFinishTimeDate: value.showFinishTimeDate,\n        //later: show multiday non-continous event\n        showMultidayNonContinousDate: value.showMultidayNonContinousDate,\n        eventDeadline: value.eventDeadline,\n        //later: If one-day event\n        eventDuration: value.eventDuration,\n        //later: T -> schedule it on calendarData\n        //F--> put into unScheduledEventsList for that day\n        blockOffTimeSlot: value.blockOffTimeSlot\n      }; //let startTimeDate = this.context.dataRequestDetails.value.startTimeDate;\n\n      let dayObjName = this.context.dataRequestDetails.value.dayObjName;\n      let dataLocation = newEvent.dayObjName;\n      let currentDaysObj = this.state.days; //if there there is NO obj for that day\n\n      if (typeof currentDaysObj[dayObjName] == 'undefined') {\n        let newTask = null; //This way a day can store these new objs\n\n        this.newDayObj(dayObjName, newTask, newEventObj);\n      } else {\n        //if there is an obj for that day -> add this newEvent\n        //adding the newEvent to the unScheduledEvents list for that day\n        currentDaysObj[dayObjName].unscheduledtasks.push(newEventObj);\n        console.log(currentDaysObj[dayObjName]);\n        this.setState({\n          days: currentDaysObj\n        }, () => console.log('Inside of newevent() setState  ')); //() => this.context.dataReceiverHandler(this.state)\n        // console.log(this.state)\n        // );\n      }\n    };\n\n    this.newDayObj = (dayObjName, newTask, newEvent) => {\n      console.log('inside newDayObj '); //empty obj if dayObjName doesn't exist\n\n      let newDayObj = {\n        unScheduledTasks: newTask,\n        unScheduledEvents: newEvent,\n        repeats: ['hello', 'there'],\n        hours: {\n          '00:00': '',\n          '00:30': '',\n          '01:00': '',\n          '01:30': '',\n          '02:00': '',\n          '02:30': '',\n          '03:00': '',\n          '03:30': '',\n          '04:00': '',\n          '04:30': '',\n          '05:00': '',\n          '05:30': '',\n          '06:00': '',\n          '06:30': '',\n          '07:00': '',\n          '08:30': '',\n          '08:00': '',\n          '08:30': '',\n          '09:00': '',\n          '09:30': '',\n          '10:00': '',\n          '10:30': '',\n          '11:00': '',\n          '11:30': '',\n          '12:00': '',\n          '12:30': '',\n          '13:00': '',\n          '13:30': '',\n          '14:00': '',\n          '14:30': '',\n          '15:00': '',\n          '15:30': '',\n          '16:00': '',\n          '16:30': '',\n          '17:00': '',\n          '17:30': '',\n          '18:00': '',\n          '18.30': '',\n          '19:00': '',\n          '19.30': '',\n          '20:00': '',\n          '20.30': '',\n          '21:00': '',\n          '21.30': '',\n          '02:00': '',\n          '22.30': '',\n          '23:00': '',\n          '23.30': '',\n          '24:00': '',\n          '24.30': ''\n        }\n      };\n\n      let updatedDayObj = _objectSpread({}, this.state.days, {\n        [dayObjName]: newDayObj\n      });\n\n      this.setState({\n        days: updatedDayObj\n      });\n    };\n  }\n\n  render() {\n    console.dir(this.state);\n\n    if (this.context.dataRequestDetails && this.context.dataRequestDetails.typeOfData === 'events') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          //new Event\n          this.context.resetHandlerChoice(this.newEventHandler(this.context.dataRequestDetails.value));\n          break;\n      }\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    });\n  }\n\n}\n\nCalendarData.contextType = StoreContext;\nexport default CalendarData;\n/* function for datePicker for react & handler change()\nhandleStartTimeDateChange(date) {\n  let currentShowStartTimeDate = this.state.showStartTimeDate;\n  let day = format(date, 'E');\n  let dateDigit = format(date, 'dd');\n  let year = format(date, 'yy');\n  let month = format(date, 'MM');\n  let dayObjName = year + month + dateDigit + day;\n\n  // console.log(`day: ${day} type: ${typeof day}`);\n  // console.log(`date: ${dateDigit} type: ${typeof dateDigit}`);\n  // console.log(`year: ${year} type: ${typeof year}`);\n  // console.log(`month: ${month} type: ${typeof month}`);\n  // console.log(`dayObjName: ${dayObjName} type: ${typeof dayObjName}`);\n\n  let currentDaysObj = this.state.days;\n\n  //if there there is NO obj for that day\n  if (typeof currentDaysObj[dayObjName] == 'undefined') {\n    this.newDayObj(dayObjName);\n  } else {//if there is an obj for that day\n    \n\n    let newTask = { id: 'task243', title: 'groceries' };\n\n    currentDaysObj[dayObjName].unscheduledtasks.push(newTask);\n    console.log(currentDaysObj[dayObjName]);\n\n    this.setState(\n      {\n        days: currentDaysObj\n      },\n\n      () => console.log(this.state.days[dayObjName])\n    );\n  }\n}\n <div className=\"container\">\n          <DatePicker\n            placeholderText=\"Choose Start Time\"\n            selected={this.state.startDate}\n            onChange={date => this.handleStartTimeDateChange(date)}\n            showTimeSelect\n            timeFormat=\"HH:mm\"\n            timeIntervals={30}\n            timeCaption=\"Start\"\n            dateFormat=\"MMMM dd, yyyy\"\n          />\n        </div> */","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/containers/Store/CalendarData.js"],"names":["React","Component","DatePicker","numToDay","StoreContext","format","compareAsc","CalendarData","constructor","props","state","showChooseDate","days","unScheduledTasks","id","title","unScheduledEvents","eventId","eventTitle","eventNote","eventCategory","eventStartTimeDate","eventFinishTimeDate","eventDuration","blockOffTimeSlot","showStartTimeDate","showFinishTimeDate","eventDeadline","showMultidayNonContinousDate","createDayObjName","event","preventDefault","alert","day","startTimeDate","date","toLocalString","console","log","newTaskHandler","value","newTask","task","objName","dayObjName","note","deadline","category","dataLocation","currentDaysObj","newEvent","newDayObj","unscheduledtasks","push","setState","newEventHandler","context","dataRequestDetails","newEventObj","repeats","hours","updatedDayObj","render","dir","typeOfData","handlerChoice","resetHandlerChoice","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import classes from '../../components/Cockpit/Cockpit.module.css';\nimport DatePicker from 'react-datepicker';\nimport numToDay from '../../components/Calendar/numToDay';\nimport StoreContext from '../../context/StoreDataContext';\n\nimport { format, compareAsc } from 'date-fns';\nclass CalendarData extends Component {\n  constructor(props) {\n    super(props);\n\n    this.newDayObj = (dayObjName, newTask, newEvent) => {\n      console.log('inside newDayObj ');\n      //empty obj if dayObjName doesn't exist\n      let newDayObj = {\n        unScheduledTasks: newTask,\n        unScheduledEvents: newEvent,\n        repeats: ['hello', 'there'],\n        hours: {\n          '00:00': '',\n          '00:30': '',\n          '01:00': '',\n          '01:30': '',\n          '02:00': '',\n          '02:30': '',\n          '03:00': '',\n          '03:30': '',\n          '04:00': '',\n          '04:30': '',\n          '05:00': '',\n          '05:30': '',\n          '06:00': '',\n          '06:30': '',\n          '07:00': '',\n          '08:30': '',\n          '08:00': '',\n          '08:30': '',\n          '09:00': '',\n          '09:30': '',\n          '10:00': '',\n          '10:30': '',\n          '11:00': '',\n          '11:30': '',\n          '12:00': '',\n          '12:30': '',\n          '13:00': '',\n          '13:30': '',\n          '14:00': '',\n          '14:30': '',\n          '15:00': '',\n          '15:30': '',\n          '16:00': '',\n          '16:30': '',\n          '17:00': '',\n          '17:30': '',\n          '18:00': '',\n          '18.30': '',\n          '19:00': '',\n          '19.30': '',\n          '20:00': '',\n          '20.30': '',\n          '21:00': '',\n          '21.30': '',\n          '02:00': '',\n          '22.30': '',\n          '23:00': '',\n          '23.30': '',\n          '24:00': '',\n          '24.30': ''\n        }\n      };\n\n      let updatedDayObj = { ...this.state.days, [dayObjName]: newDayObj };\n      this.setState({ days: updatedDayObj });\n    };\n  }\n  state = {\n    showChooseDate: false,\n    days: {\n      '200204Tue': {\n        unScheduledTasks: [{ id: 'task8', title: 'homework;' }],\n        unScheduledEvents: [\n          {\n            eventId: 'event37',\n            eventTitle: 'homework;',\n            eventNote: '',\n            eventCategory: '',\n            eventStartTimeDate: '',\n            eventFinishTimeDate: '',\n            //later: If one-day event\n            eventDuration: '',\n            //later: T -> schedule it on calendarData\n            //F--> put into unScheduledEventsList for that day\n            blockOffTimeSlot: false,\n            showStartTimeDate: false,\n            showFinishTimeDate: false,\n            eventDeadline: '',\n            //later: show multiday non-continous event\n            showMultidayNonContinousDate: false\n          }\n        ]\n      }\n    }\n  };\n  static contextType = StoreContext;\n  createDayObjName = event => {\n    event.preventDefault();\n    alert('inside createDayObjName');\n    let day = this.state.startTimeDate.day;\n\n    let date = this.state.startTimeDate.toLocalString;\n    console.log(date);\n  };\n\n  newTaskHandler = value => {\n    let newTask = {\n      id: value.task, //.concat(newEvent.dayObjName),\n      // timeOfDay: startTimeDate.time,\n      objName: value.dayObjName,\n      task: value.eventTitle,\n      note: value.eventNote,\n      deadline: value.deadline,\n      category: value.eventCategory\n      // assignedTimeStart: startTimeDate,\n      // assignedTimeStop: newEvent.finishTimeDate\n    };\n    let dayObjName = value.dayObjName;\n\n    // let dataLocation = this.context.dataRequestDetails.dataLocation;\n    let dataLocation = value.dayObjName;\n    let currentDaysObj = this.state.days;\n\n    //if there there is NO obj for that day\n    if (typeof currentDaysObj[dayObjName] == 'undefined') {\n      let newEvent = null;\n      this.newDayObj(dayObjName, newTask, newEvent);\n      console.log('Inside if of newEventHandler() ');\n    } else {\n      currentDaysObj[dayObjName].unscheduledtasks.push(newTask);\n\n      console.log(currentDaysObj[dayObjName]);\n\n      this.setState(\n        {\n          days: currentDaysObj\n        },\n        () => console.log('Inside of newevent() setState  ')\n      );\n    }\n  };\n  newEventHandler = value => {\n    let newEvent = this.context.dataRequestDetails.value;\n    let newEventObj = {\n      eventId: value.eventId, //.concat(newEvent.dayObjName),\n      // timeOfDay: startTimeDate.time,\n      objName: value.dayObjName,\n      eventTitle: value.eventTitle,\n      eventNote: value.eventNote,\n      eventDeadline: value.eventDeadline,\n      eventCategory: value.eventCategory,\n      eventStartTimeDate: value.eventStartTimeDate,\n      eventFinishTimeDate: value.eventFinishTimeDate,\n      eventDuration: value.eventDuration, //\n      blockOffTimeSlot: value.blockOffTimeSlot,\n      //required\n      showStartTimeDate: value.showStartTimeDate,\n      //later: show another datePicker to pick a multiday event\n      showFinishTimeDate: value.showFinishTimeDate,\n\n      //later: show multiday non-continous event\n      showMultidayNonContinousDate: value.showMultidayNonContinousDate,\n      eventDeadline: value.eventDeadline,\n      //later: If one-day event\n      eventDuration: value.eventDuration,\n      //later: T -> schedule it on calendarData\n      //F--> put into unScheduledEventsList for that day\n      blockOffTimeSlot: value.blockOffTimeSlot\n    };\n    //let startTimeDate = this.context.dataRequestDetails.value.startTimeDate;\n    let dayObjName = this.context.dataRequestDetails.value.dayObjName;\n\n    let dataLocation = newEvent.dayObjName;\n    let currentDaysObj = this.state.days;\n\n    //if there there is NO obj for that day\n    if (typeof currentDaysObj[dayObjName] == 'undefined') {\n      let newTask = null;\n      //This way a day can store these new objs\n      this.newDayObj(dayObjName, newTask, newEventObj);\n    } else {\n      //if there is an obj for that day -> add this newEvent\n\n      //adding the newEvent to the unScheduledEvents list for that day\n      currentDaysObj[dayObjName].unscheduledtasks.push(newEventObj);\n\n      console.log(currentDaysObj[dayObjName]);\n\n      this.setState(\n        {\n          days: currentDaysObj\n        },\n        () => console.log('Inside of newevent() setState  ')\n      );\n      //() => this.context.dataReceiverHandler(this.state)\n\n      // console.log(this.state)\n      // );\n    }\n  };\n\n  render() {\n    console.dir(this.state);\n    if (\n      this.context.dataRequestDetails &&\n      this.context.dataRequestDetails.typeOfData === 'events'\n    ) {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1': //new Event\n          this.context.resetHandlerChoice(\n            this.newEventHandler(this.context.dataRequestDetails.value)\n          );\n\n          break;\n      }\n    }\n\n    return <React.Fragment></React.Fragment>;\n  }\n}\nexport default CalendarData;\n\n/* function for datePicker for react & handler change()\nhandleStartTimeDateChange(date) {\n  let currentShowStartTimeDate = this.state.showStartTimeDate;\n  let day = format(date, 'E');\n  let dateDigit = format(date, 'dd');\n  let year = format(date, 'yy');\n  let month = format(date, 'MM');\n  let dayObjName = year + month + dateDigit + day;\n\n  // console.log(`day: ${day} type: ${typeof day}`);\n  // console.log(`date: ${dateDigit} type: ${typeof dateDigit}`);\n  // console.log(`year: ${year} type: ${typeof year}`);\n  // console.log(`month: ${month} type: ${typeof month}`);\n  // console.log(`dayObjName: ${dayObjName} type: ${typeof dayObjName}`);\n\n  let currentDaysObj = this.state.days;\n\n  //if there there is NO obj for that day\n  if (typeof currentDaysObj[dayObjName] == 'undefined') {\n    this.newDayObj(dayObjName);\n  } else {//if there is an obj for that day\n    \n\n    let newTask = { id: 'task243', title: 'groceries' };\n\n    currentDaysObj[dayObjName].unscheduledtasks.push(newTask);\n    console.log(currentDaysObj[dayObjName]);\n\n    this.setState(\n      {\n        days: currentDaysObj\n      },\n\n      () => console.log(this.state.days[dayObjName])\n    );\n  }\n}\n <div className=\"container\">\n          <DatePicker\n            placeholderText=\"Choose Start Time\"\n            selected={this.state.startDate}\n            onChange={date => this.handleStartTimeDateChange(date)}\n            showTimeSelect\n            timeFormat=\"HH:mm\"\n            timeIntervals={30}\n            timeCaption=\"Start\"\n            dateFormat=\"MMMM dd, yyyy\"\n          />\n        </div> */\n"]},"metadata":{},"sourceType":"module"}