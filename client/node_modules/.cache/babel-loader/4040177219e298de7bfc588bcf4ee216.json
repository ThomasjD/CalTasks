{"ast":null,"code":"import _slicedToArray from \"/Users/thomasjd/Desktop/caltask/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/Cockpit/Cockpit.js\";\nimport React, { useEffect, useState } from 'react'; //import rocky from '../../containers/App.module.css'\n\nimport classNames from 'classnames';\nimport classes from './Cockpit.module.css';\nimport Navbar from './navBar';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport Template from '../../Template/Template';\n\nconst Cockpit = props => {\n  //can do anything that componentDidUpdate can do\n  //can send http request here\n  useEffect(() => {\n    console.log('I am inside of [Cockpit.js] useffect'); //getting rid of timer\n    // const timer = setTimeout(() => {\n    //   alert('Cockpit timer alert');\n    // }, 1000);\n\n    return () => {\n      //clearTimeout(timer);\n      console.log('[Cockpit.js] cleanup work in useEffect');\n    };\n  }, []);\n  /*\n    setTimeout(() => {\n      alert('Saved data to cloud')\n    }, 1000);\n    return () => { //don't have to have a return statement\n      console.log('[Cockpit.js] cleanup work in useEffect')\n    }\n  }, []); \n  */\n  //if 2nd argument [props.tasks] it doesn't involve tasks -> it won't run this again\n  //[props.tasks]\n\n  useEffect(() => {\n    console.log('[Cockpit.js] 2nd useEffect');\n    return () => {\n      console.log('[Cockpit.js] cleanup work in 2nd UseEffect');\n    };\n  }); //styling the 'Things to Do' using strings for classnames\n\n  const assignedClasses = [];\n  let btnClass = '';\n\n  switch (props.tasksLength) {\n    case 3:\n      assignedClasses.push('bold', 'red');\n      break;\n\n    case 2:\n      assignedClasses.push('red');\n      break;\n\n    case 1:\n      assignedClasses.push('orange');\n      break;\n\n    default:\n      assignedClasses.push('green');\n      break;\n  } //console.log(assignedClasses[0])\n  //add multiple classes for <p> w/ strings\n  //const classesFinal = classes.join(' ')\n\n\n  const classesFinal = 'rocky.' + assignedClasses;\n\n  const _useState = useState({\n    showTasksNumEachDay: true\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        howBusyToggle = _useState2[0],\n        setHowBusyToggle = _useState2[1];\n\n  const setHowBusyToggleHandler = () => {\n    let currentToggleStatus = howBusyToggle.showTasksNumEachDay;\n\n    if (!currentToggleStatus) {\n      this.context.dataRequestHandler(event, 'syllabus', '1', null, null);\n    }\n\n    setHowBusyToggle({\n      showTasksNumEachDay: !currentToggleStatus\n    });\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: classes.leftCockpitIcon,\n    src: require('../../Assets/aptIcon.png'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Pick Content View!\"), React.createElement(\"button\", {\n    onClick: setHowBusyToggleHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Click To see Column Chart\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), howBusyToggle.showTasksNumEachDay ? React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Template, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: classNames({\n      [classes[assignedClasses[0]]]: true,\n      [classes[assignedClasses[1]]]: true\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  })) : null, React.createElement(DatePickerPicker, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })));\n}; //export default Cockpit;\n\n\nexport default React.memo(Cockpit);","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/Cockpit/Cockpit.js"],"names":["React","useEffect","useState","classNames","classes","Navbar","DatePickerPicker","Template","Cockpit","props","console","log","assignedClasses","btnClass","tasksLength","push","classesFinal","showTasksNumEachDay","howBusyToggle","setHowBusyToggle","setHowBusyToggleHandler","currentToggleStatus","context","dataRequestHandler","event","leftCockpitIcon","require","memo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n//import rocky from '../../containers/App.module.css'\nimport classNames from 'classnames';\nimport classes from './Cockpit.module.css';\nimport Navbar from './navBar';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport Template from '../../Template/Template';\n\nconst Cockpit = props => {\n  //can do anything that componentDidUpdate can do\n  //can send http request here\n\n  useEffect(() => {\n    console.log('I am inside of [Cockpit.js] useffect');\n\n    //getting rid of timer\n    // const timer = setTimeout(() => {\n    //   alert('Cockpit timer alert');\n    // }, 1000);\n\n    return () => {\n      //clearTimeout(timer);\n      console.log('[Cockpit.js] cleanup work in useEffect');\n    };\n  }, []);\n\n  /*\n    setTimeout(() => {\n      alert('Saved data to cloud')\n    }, 1000);\n    return () => { //don't have to have a return statement\n      console.log('[Cockpit.js] cleanup work in useEffect')\n    }\n  }, []); \n  */\n  //if 2nd argument [props.tasks] it doesn't involve tasks -> it won't run this again\n  //[props.tasks]\n\n  useEffect(() => {\n    console.log('[Cockpit.js] 2nd useEffect');\n    return () => {\n      console.log('[Cockpit.js] cleanup work in 2nd UseEffect');\n    };\n  });\n\n  //styling the 'Things to Do' using strings for classnames\n  const assignedClasses = [];\n  let btnClass = '';\n\n  switch (props.tasksLength) {\n    case 3:\n      assignedClasses.push('bold', 'red');\n      break;\n    case 2:\n      assignedClasses.push('red');\n      break;\n    case 1:\n      assignedClasses.push('orange');\n      break;\n    default:\n      assignedClasses.push('green');\n      break;\n  }\n\n  //console.log(assignedClasses[0])\n  //add multiple classes for <p> w/ strings\n  //const classesFinal = classes.join(' ')\n  const classesFinal = 'rocky.' + assignedClasses;\n  const [howBusyToggle, setHowBusyToggle] = useState({\n    showTasksNumEachDay: true\n  });\n\n  const setHowBusyToggleHandler = () => {\n    let currentToggleStatus = howBusyToggle.showTasksNumEachDay;\n\n    if (!currentToggleStatus) {\n      this.context.dataRequestHandler(event, 'syllabus', '1', null, null);\n    }\n\n    setHowBusyToggle({\n      showTasksNumEachDay: !currentToggleStatus\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"\">\n        <img\n          className={classes.leftCockpitIcon}\n          src={require('../../Assets/aptIcon.png')}\n        />\n\n        <h5>Pick Content View!</h5>\n\n        <button onClick={setHowBusyToggleHandler}>\n          Click To see Column Chart\n        </button>\n        <br></br>\n        <br></br>\n\n        {howBusyToggle.showTasksNumEachDay ? (\n          <React.Fragment>\n            <Template />\n            <p\n              className={classNames({\n                [classes[assignedClasses[0]]]: true,\n                [classes[assignedClasses[1]]]: true\n              })}\n            ></p>\n          </React.Fragment>\n        ) : null}\n        <DatePickerPicker />\n      </div>\n    </React.Fragment>\n  );\n};\n//export default Cockpit;\n\nexport default React.memo(Cockpit);\n"]},"metadata":{},"sourceType":"module"}