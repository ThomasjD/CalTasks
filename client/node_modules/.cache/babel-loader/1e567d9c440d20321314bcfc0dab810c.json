{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/RightCockpit.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport classes from '../../components/Cockpit/Cockpit.module.css';\nimport Cockpit from '../../components/Cockpit/Cockpit';\nimport Cockpit2 from '../../components/Cockpit/Cockpit2';\nimport Navbar2 from '../../components/Cockpit/Navbar/Navbar2';\nimport Tasks from '../../components/ViewContent/Tasks/Tasks';\nimport TodayTasks from '../../components/ViewContent/TodayTasks/TodayTasks';\nimport Lessons from '../../components/Syllabus/MaxReact/Lessons';\nimport ViewContentOptions from '../../components/Cockpit/ViewContentOptions';\nimport NewTask from '../../components/Creation/newTask';\nimport DisplayContent from '../../components/Cockpit/displayContent';\nimport Syllabus from '../../components/Creation/Syllabus';\n\nclass RightCockpit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [{\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      }, {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      }, {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }],\n      Monday: [{\n        id: 'morning',\n        timeOfDay: '',\n        task: 'comprar comida'\n      }, {\n        id: 'afternoon',\n        timeOfDay: '',\n        task: 'eat lunch'\n      }, {\n        id: 'evening',\n        timeOfDay: '',\n        task: 'play ball'\n      }],\n      newTaskTitle: '',\n      newTaskLocation: '',\n      isGoing: true,\n      numberOfGuests: 2,\n      maxReact: [{\n        id: 'xvlwil',\n        lesson: '90. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbskk',\n        lesson: '91. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      contentChoice: '0',\n      showCockpit: true,\n      lastHeader: [],\n      lastTodayTasksHeader: [],\n      lastLessonHeader: [],\n      reRenderTasks: false //syllabi: []\n\n    };\n\n    this.contentViewHandler = event => {\n      let newViewChoice = event.target.value;\n      let maxReact = new Syllabus('maxReact1', 'maxReact', '11', 'Use this in functions', '11.Read all about this'); //let readereater = maxReact.idMaker();\n      // let ronnie = [...this.state.syllabi];\n      // console.log(maxReact);\n      // //ronnie.push(maxReact);\n      // let wtf = ronnie[0];\n      //onsole.log(wtf.syllabusTitle);\n\n      this.setState({\n        syllabi: maxReact\n      });\n      console.log(this.state.syllabi); //console.log(this.state.syllabi[0].syllabusTitle);\n      //console.log(this.state.syllabi[1].syllabusTitle);\n      //Comparing new contentChoice with previous contentChoice\n      //if newContentChoice === oldContentChoice\n      //turn off the view\n\n      this.setState({\n        contentChoice: newViewChoice\n      });\n\n      if (newViewChoice === this.state.contentChoice) {\n        return this.setState({\n          contentChoice: '0'\n        });\n      } else {\n        switch (newViewChoice) {\n          case '1':\n            //All tasks\n            if (this.state.tasks != 0) {\n              this.setState({\n                lastHeader: this.state.tasks[0]\n              });\n            } else {\n              this.setState({\n                lastHeader: this.state.lastHeader\n              });\n            }\n\n            break;\n\n          case '2':\n            //TodaysTasks\n            if (this.state.Monday != 0) {\n              this.setState({\n                lastTodayTasksHeader: this.state.Monday[0]\n              });\n            } else {\n              this.setState({\n                lastTodayTasksHeader: this.state.lastTodayTasksHeader\n              });\n            }\n\n            break;\n\n          case '3':\n            //Syllabus\n            if (this.state.maxReact.length != 0) {\n              this.setState({\n                lastLessonHeader: this.state.maxReact[0]\n              });\n            } else {\n              this.setState({\n                lastLessonHeader: this.state.lastLessonHeader\n              });\n            }\n\n            break;\n        }\n      }\n    };\n\n    this.deleteTaskhandler = taskIndex => {\n      alert('Are you sure you want to delete this task?');\n      let tasks = []; // switch (this.state.contentChoice) {\n      //   case '1':\n      //     tasks = [...this.state.tasks];\n      //     break;\n      //   case '2':\n      //     tasks = [...this.state.Monday];\n      // }\n      // tasks.splice(taskIndex, 1);\n      // switch (this.state.contentChoice) {\n      //   case '1':\n      //     this.setState({ tasks: tasks });\n      //     break;\n      //   case '2':\n      //     this.setState({ Monday: tasks });\n      // }\n\n      switch (this.state.contentChoice) {\n        case '1':\n          tasks = [...this.state.tasks];\n          break;\n\n        case '2':\n          tasks = [...this.state.Monday];\n          break;\n\n        case '3':\n          tasks = [...this.state.maxReact];\n      }\n\n      tasks.splice(taskIndex, 1); // switch (this.state.contentChoice) {\n      //   case '1':\n      //     tasks = [...this.state.obj];\n      //     break;\n      //   case '2':\n      //     tasks = [...this.state.obj];\n      // }\n\n      switch (this.state.contentChoice) {\n        case '1':\n          this.setState({\n            tasks: tasks\n          });\n          break;\n\n        case '2':\n          this.setState({\n            Monday: tasks\n          });\n          break;\n\n        case '3':\n          this.setState({\n            maxReact: tasks\n          });\n      } // if (this.state.contentChoice === '1') {\n      //   //get tasks array\n      //   tasks = [...this.state.tasks];\n      //   tasks.splice(taskIndex, 1);\n      //   this.setState({ tasks: tasks });\n      // } else {\n      //   //get tasks array\n      //   tasks = [...this.state.Monday];\n      //   tasks.splice(taskIndex, 1);\n      //   this.setState({ Monday: tasks });\n      // }\n\n\n      this.setState({\n        reRenderTasks: true\n      }); // //splice task of interst\n      // tasks.splice(taskIndex, 1);\n      // //update new list of tasks to state\n      // this.setState({ tasks: tasks });\n      //this.setState({ showTasksCounter: false });\n    };\n\n    this.deleteTodayTaskhandler = taskIndex => {\n      alert('Are you sure you want to delete this task?');\n      this.setState({\n        reRenderTodayTasks: true\n      }); //get tasks array\n\n      const Monday = [...this.state.Monday]; //splice task of interst\n\n      Monday.splice(taskIndex, 1); //update new list of tasks to state\n\n      this.setState({\n        Monday: Monday\n      }); //this.setState({ showTasksCounter: false });\n    };\n\n    this.taskChangeHandler = (event, taskChangedId) => {\n      //find the task that matches the taskChangedId\n      const foundTaskId = this.state.tasks.findIndex(currentId => {\n        return currentId.id === taskChangedId;\n      }); //create new task item that we will put into array\n\n      const updatedTask = _objectSpread({}, this.state.tasks[foundTaskId]);\n\n      updatedTask.todo = event.target.value; //pull out the states tasks array\n\n      const tasks = [...this.state.tasks]; //update the task with id of interest w/ new task description\n\n      tasks[foundTaskId] = updatedTask; //update the state\n\n      this.setState({\n        tasks: tasks\n      });\n    };\n\n    this.newTaskHandler = event => {\n      console.log(event.target.name);\n\n      switch (event.target.name) {\n        case 'newTaskTitle':\n          console.log('got it here in newTasktitle');\n          break;\n\n        case 'location':\n          console.log('nbanbanbanba nba');\n          break;\n\n        case 'deadline':\n          console.log('I am in the deadline baby');\n          break;\n      } //console.log(event.target.value);\n      // let newTaskTitle = event.target.newTaskTitle;\n      // let newTaskTitleValue = event.target.value;\n      // let newLocation = event.target.location;\n      // let newLocationValue = event.target.value;\n      // console.log(`this is eventTargetvalue ${newTaskTitleValue}`);\n      // this.setState({\n      //   newTaskTitle: newTaskTitleValue,\n      //   newTaskLocation: newLocationValue\n      // });\n      // let oldTasks = [...this.state.tasks];\n      // oldTasks.push({\n      //   id: 'qrwrwq',\n      //   todo: 'Find work',\n      //   deadline: 'Lunes',\n      //   location: 'Poplado'\n      // });\n      // let newTitle = event.target.value.newTaskTitle;\n      // console.log(`this is inside of app.js newTaskHandler ${newTitle}`);\n\n    };\n\n    this.newTaskLocationHandler = event => {\n      // let location = event.target.value;\n      // console.log(event.name);\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.todayTaskChangeHandler = (event, taskChangedId) => {\n      //find the task that matches the taskChangedId\n      const foundTaskId = this.state.Monday.findIndex(currentId => {\n        return currentId.id === taskChangedId;\n      }); //create new task item that we will put into array\n\n      const updatedTask = _objectSpread({}, this.state.Monday[foundTaskId]);\n\n      updatedTask.task = event.target.value; //pull out the states tasks array\n\n      const Monday = [...this.state.Monday]; //update the task with id of interest w/ new task description\n\n      Monday[foundTaskId] = updatedTask; //update the state\n\n      this.setState({\n        Monday: Monday\n      });\n    };\n\n    this.deleteLessonhandler = taskIndex => {\n      alert('Are you sure you want to delete this task?');\n      this.setState({\n        reRenderTasks: true\n      }); //get tasks array\n\n      const lessons = [...this.state.maxReact]; //splice task of interst\n\n      lessons.splice(taskIndex, 1); //update new list of tasks to state\n\n      this.setState({\n        maxReact: lessons\n      });\n    };\n\n    this.lessonChangeHandler = (event, taskChangeId) => {\n      const foundTaskId = this.state.maxReact.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReact[foundTaskId]); //using updated values to define the lesson of the particular pulled out lesson\n\n\n      updatedLessons.lesson = event.target.value; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReact]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskId] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReact: lessons\n      });\n    };\n  }\n\n  render() {\n    let viewOptions = null;\n\n    if (this.state.showCockpit == true) {\n      viewOptions = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, React.createElement(Cockpit, {\n        title: this.props.appTitle,\n        allTasksClicked: this.toggleShowTasksHandler,\n        tasksLength: this.state.tasks.length,\n        todayTasksClicked: this.displayTodayScheduleHandler,\n        deleteCockpit: () => {\n          this.setState({\n            showCockpit: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }));\n    }\n\n    let displayCockpit = React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"d-flex flex-row \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card text-white bg-info m-1 p-1 col-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"p-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, viewOptions)), React.createElement(\"div\", {\n      className: \"card bg-light m-1 p-1 col-9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"p-1 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, React.createElement(DisplayContent, {\n      deleteTaskhandler: this.deleteTaskhandler,\n      everything: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    })))));\n    let navbar = React.createElement(Navbar2, {\n      newTaskInfoComing: event => this.newTaskHandler(event),\n      title: this.props.appTitle,\n      tasksLength: this.state.tasks.length,\n      clicked: event => this.contentViewHandler(event),\n      clickedSyllabus: event => this.contentViewHandler(event),\n      clickedNewTask: event => this.contentViewHandler(event),\n      deleteCockpit: () => {\n        this.setState({\n          showCockpit: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, this.props.newTaskInfoComing);\n    let viewContentOptions = React.createElement(ViewContentOptions, {\n      viewContent: event => this.contentViewHandler(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }); //testing out Class without having component for syllabus\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, navbar, viewContentOptions, displayCockpit);\n  }\n\n}\n\nexport default RightCockpit; //{displayOptions}\n//<Syllabus syllabus={this.setState} />\n//","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/RightCockpit.js"],"names":["React","Component","classes","Cockpit","Cockpit2","Navbar2","Tasks","TodayTasks","Lessons","ViewContentOptions","NewTask","DisplayContent","Syllabus","RightCockpit","constructor","props","state","tasks","id","todo","deadline","location","Monday","timeOfDay","task","newTaskTitle","newTaskLocation","isGoing","numberOfGuests","maxReact","lesson","completion","contentChoice","showCockpit","lastHeader","lastTodayTasksHeader","lastLessonHeader","reRenderTasks","contentViewHandler","event","newViewChoice","target","value","setState","syllabi","console","log","length","deleteTaskhandler","taskIndex","alert","splice","deleteTodayTaskhandler","reRenderTodayTasks","taskChangeHandler","taskChangedId","foundTaskId","findIndex","currentId","updatedTask","newTaskHandler","name","newTaskLocationHandler","type","checked","todayTaskChangeHandler","deleteLessonhandler","lessons","lessonChangeHandler","taskChangeId","updatedLessons","render","viewOptions","appTitle","toggleShowTasksHandler","displayTodayScheduleHandler","displayCockpit","navbar","newTaskInfoComing","viewContentOptions"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from '../../components/Cockpit/Cockpit.module.css';\nimport Cockpit from '../../components/Cockpit/Cockpit';\nimport Cockpit2 from '../../components/Cockpit/Cockpit2';\nimport Navbar2 from '../../components/Cockpit/Navbar/Navbar2';\nimport Tasks from '../../components/ViewContent/Tasks/Tasks';\nimport TodayTasks from '../../components/ViewContent/TodayTasks/TodayTasks';\nimport Lessons from '../../components/Syllabus/MaxReact/Lessons';\nimport ViewContentOptions from '../../components/Cockpit/ViewContentOptions';\nimport NewTask from '../../components/Creation/newTask';\nimport DisplayContent from '../../components/Cockpit/displayContent';\nimport Syllabus from '../../components/Creation/Syllabus';\nclass RightCockpit extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    tasks: [\n      {\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      },\n      {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      },\n      {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }\n    ],\n    Monday: [\n      { id: 'morning', timeOfDay: '', task: 'comprar comida' },\n      { id: 'afternoon', timeOfDay: '', task: 'eat lunch' },\n      { id: 'evening', timeOfDay: '', task: 'play ball' }\n    ],\n    newTaskTitle: '',\n    newTaskLocation: '',\n    isGoing: true,\n    numberOfGuests: 2,\n    maxReact: [\n      { id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n      { id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n      {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    contentChoice: '0',\n    showCockpit: true,\n    lastHeader: [],\n    lastTodayTasksHeader: [],\n    lastLessonHeader: [],\n    reRenderTasks: false\n    //syllabi: []\n  };\n\n  contentViewHandler = event => {\n    let newViewChoice = event.target.value;\n    let maxReact = new Syllabus(\n      'maxReact1',\n      'maxReact',\n      '11',\n      'Use this in functions',\n      '11.Read all about this'\n    );\n\n    //let readereater = maxReact.idMaker();\n    // let ronnie = [...this.state.syllabi];\n    // console.log(maxReact);\n    // //ronnie.push(maxReact);\n    // let wtf = ronnie[0];\n    //onsole.log(wtf.syllabusTitle);\n    this.setState({ syllabi: maxReact });\n    console.log(this.state.syllabi);\n    //console.log(this.state.syllabi[0].syllabusTitle);\n    //console.log(this.state.syllabi[1].syllabusTitle);\n\n    //Comparing new contentChoice with previous contentChoice\n    //if newContentChoice === oldContentChoice\n    //turn off the view\n\n    this.setState({ contentChoice: newViewChoice });\n    if (newViewChoice === this.state.contentChoice) {\n      return this.setState({ contentChoice: '0' });\n    } else {\n      switch (newViewChoice) {\n        case '1': //All tasks\n          if (this.state.tasks != 0) {\n            this.setState({ lastHeader: this.state.tasks[0] });\n          } else {\n            this.setState({ lastHeader: this.state.lastHeader });\n          }\n          break;\n\n        case '2': //TodaysTasks\n          if (this.state.Monday != 0) {\n            this.setState({ lastTodayTasksHeader: this.state.Monday[0] });\n          } else {\n            this.setState({\n              lastTodayTasksHeader: this.state.lastTodayTasksHeader\n            });\n          }\n          break;\n\n        case '3': //Syllabus\n          if (this.state.maxReact.length != 0) {\n            this.setState({ lastLessonHeader: this.state.maxReact[0] });\n          } else {\n            this.setState({ lastLessonHeader: this.state.lastLessonHeader });\n          }\n\n          break;\n      }\n    }\n  };\n\n  //delete a task\n  deleteTaskhandler = taskIndex => {\n    alert('Are you sure you want to delete this task?');\n\n    let tasks = [];\n\n    // switch (this.state.contentChoice) {\n    //   case '1':\n    //     tasks = [...this.state.tasks];\n    //     break;\n    //   case '2':\n    //     tasks = [...this.state.Monday];\n    // }\n    // tasks.splice(taskIndex, 1);\n\n    // switch (this.state.contentChoice) {\n    //   case '1':\n    //     this.setState({ tasks: tasks });\n    //     break;\n    //   case '2':\n    //     this.setState({ Monday: tasks });\n    // }\n\n    switch (this.state.contentChoice) {\n      case '1':\n        tasks = [...this.state.tasks];\n        break;\n      case '2':\n        tasks = [...this.state.Monday];\n        break;\n      case '3':\n        tasks = [...this.state.maxReact];\n    }\n\n    tasks.splice(taskIndex, 1);\n\n    // switch (this.state.contentChoice) {\n    //   case '1':\n    //     tasks = [...this.state.obj];\n    //     break;\n    //   case '2':\n    //     tasks = [...this.state.obj];\n    // }\n\n    switch (this.state.contentChoice) {\n      case '1':\n        this.setState({ tasks: tasks });\n        break;\n      case '2':\n        this.setState({ Monday: tasks });\n        break;\n      case '3':\n        this.setState({ maxReact: tasks });\n    }\n\n    // if (this.state.contentChoice === '1') {\n    //   //get tasks array\n    //   tasks = [...this.state.tasks];\n    //   tasks.splice(taskIndex, 1);\n    //   this.setState({ tasks: tasks });\n    // } else {\n    //   //get tasks array\n    //   tasks = [...this.state.Monday];\n    //   tasks.splice(taskIndex, 1);\n    //   this.setState({ Monday: tasks });\n    // }\n\n    this.setState({ reRenderTasks: true });\n\n    // //splice task of interst\n    // tasks.splice(taskIndex, 1);\n\n    // //update new list of tasks to state\n    // this.setState({ tasks: tasks });\n\n    //this.setState({ showTasksCounter: false });\n  };\n\n  deleteTodayTaskhandler = taskIndex => {\n    alert('Are you sure you want to delete this task?');\n    this.setState({ reRenderTodayTasks: true });\n\n    //get tasks array\n    const Monday = [...this.state.Monday];\n\n    //splice task of interst\n    Monday.splice(taskIndex, 1);\n\n    //update new list of tasks to state\n    this.setState({ Monday: Monday });\n\n    //this.setState({ showTasksCounter: false });\n  };\n\n  //dynamic edit task\n  taskChangeHandler = (event, taskChangedId) => {\n    //find the task that matches the taskChangedId\n    const foundTaskId = this.state.tasks.findIndex(currentId => {\n      return currentId.id === taskChangedId;\n    });\n\n    //create new task item that we will put into array\n    const updatedTask = { ...this.state.tasks[foundTaskId] };\n    updatedTask.todo = event.target.value;\n\n    //pull out the states tasks array\n    const tasks = [...this.state.tasks];\n\n    //update the task with id of interest w/ new task description\n    tasks[foundTaskId] = updatedTask;\n\n    //update the state\n    this.setState({ tasks: tasks });\n  };\n\n  //dynamic edit task for Today (Monday)\n  newTaskHandler = event => {\n    console.log(event.target.name);\n    switch (event.target.name) {\n      case 'newTaskTitle':\n        console.log('got it here in newTasktitle');\n        break;\n      case 'location':\n        console.log('nbanbanbanba nba');\n        break;\n      case 'deadline':\n        console.log('I am in the deadline baby');\n        break;\n    }\n\n    //console.log(event.target.value);\n    // let newTaskTitle = event.target.newTaskTitle;\n    // let newTaskTitleValue = event.target.value;\n    // let newLocation = event.target.location;\n    // let newLocationValue = event.target.value;\n    // console.log(`this is eventTargetvalue ${newTaskTitleValue}`);\n    // this.setState({\n    //   newTaskTitle: newTaskTitleValue,\n    //   newTaskLocation: newLocationValue\n    // });\n\n    // let oldTasks = [...this.state.tasks];\n    // oldTasks.push({\n    //   id: 'qrwrwq',\n    //   todo: 'Find work',\n    //   deadline: 'Lunes',\n    //   location: 'Poplado'\n    // });\n\n    // let newTitle = event.target.value.newTaskTitle;\n    // console.log(`this is inside of app.js newTaskHandler ${newTitle}`);\n  };\n  newTaskLocationHandler = event => {\n    // let location = event.target.value;\n    // console.log(event.name);\n\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  todayTaskChangeHandler = (event, taskChangedId) => {\n    //find the task that matches the taskChangedId\n    const foundTaskId = this.state.Monday.findIndex(currentId => {\n      return currentId.id === taskChangedId;\n    });\n\n    //create new task item that we will put into array\n    const updatedTask = { ...this.state.Monday[foundTaskId] };\n\n    updatedTask.task = event.target.value;\n\n    //pull out the states tasks array\n    const Monday = [...this.state.Monday];\n\n    //update the task with id of interest w/ new task description\n    Monday[foundTaskId] = updatedTask;\n\n    //update the state\n    this.setState({ Monday: Monday });\n  };\n\n  deleteLessonhandler = taskIndex => {\n    alert('Are you sure you want to delete this task?');\n    this.setState({ reRenderTasks: true });\n\n    //get tasks array\n    const lessons = [...this.state.maxReact];\n\n    //splice task of interst\n    lessons.splice(taskIndex, 1);\n\n    //update new list of tasks to state\n    this.setState({ maxReact: lessons });\n  };\n\n  lessonChangeHandler = (event, taskChangeId) => {\n    const foundTaskId = this.state.maxReact.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReact[foundTaskId] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    updatedLessons.lesson = event.target.value;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReact];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskId] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReact: lessons });\n  };\n\n  render() {\n    let viewOptions = null;\n    if (this.state.showCockpit == true) {\n      viewOptions = (\n        <React.Fragment>\n          <Cockpit\n            title={this.props.appTitle}\n            allTasksClicked={this.toggleShowTasksHandler}\n            tasksLength={this.state.tasks.length}\n            todayTasksClicked={this.displayTodayScheduleHandler}\n            deleteCockpit={() => {\n              this.setState({ showCockpit: false });\n            }}\n          />\n        </React.Fragment>\n      );\n    }\n\n    let displayCockpit = (\n      <div className=\"container\">\n        <div className=\"d-flex flex-row \">\n          <div className=\"card text-white bg-info m-1 p-1 col-3\">\n            <div className=\"p-1\">{viewOptions}</div>\n          </div>\n          <div className=\"card bg-light m-1 p-1 col-9\">\n            <div className=\"p-1 \">\n              <DisplayContent\n                deleteTaskhandler={this.deleteTaskhandler}\n                everything={this.state}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n\n    let navbar = (\n      <Navbar2\n        newTaskInfoComing={event => this.newTaskHandler(event)}\n        title={this.props.appTitle}\n        tasksLength={this.state.tasks.length}\n        clicked={event => this.contentViewHandler(event)}\n        clickedSyllabus={event => this.contentViewHandler(event)}\n        clickedNewTask={event => this.contentViewHandler(event)}\n        deleteCockpit={() => {\n          this.setState({ showCockpit: false });\n        }}\n      >\n        {this.props.newTaskInfoComing}\n      </Navbar2>\n    );\n\n    let viewContentOptions = (\n      <ViewContentOptions\n        viewContent={event => this.contentViewHandler(event)}\n      />\n    );\n    //testing out Class without having component for syllabus\n\n    return (\n      <React.Fragment>\n        {navbar}\n        {viewContentOptions}\n        {displayCockpit}\n      </React.Fragment>\n    );\n  }\n}\nexport default RightCockpit;\n//{displayOptions}\n//<Syllabus syllabus={this.setState} />\n\n//\n"]},"metadata":{},"sourceType":"module"}