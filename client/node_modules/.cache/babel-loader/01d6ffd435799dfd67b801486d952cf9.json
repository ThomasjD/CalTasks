{"ast":null,"code":"import _objectSpread from \"/Users/thomasjd/Desktop/caltask/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/containers/Store/CalendarData.js\";\nimport React, { Component } from 'react'; //import classes from '../../components/Cockpit/Cockpit.module.css';\n\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksContext from '../../context/tasksContext';\nimport DatePicker from 'react-datepicker';\nimport numToDay from '../../components/Calendar/numToDay'; //import * as moment from 'moment';\n//import { format, compareAsc } from 'date-fns';\n\nclass CalendarData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showChooseDate: false,\n      days: {}\n    };\n\n    this.createDayObjName = event => {\n      event.preventDefault();\n      alert('inside createDayObjName');\n      let day = this.state.startTimeDate.day; //let year = this.state.startTimeDate.\n\n      let date = this.state.startTimeDate.toLocalString;\n      console.log(date);\n    };\n\n    this.newDayObj = () => {//obj name 200219Wed\n    };\n\n    this.createDayObjName = () => {\n      /*\n        //datepicker to give obj of startime\n        //use starttime to make obj name\n        //d\n          */\n    };\n  }\n\n  handleStartTimeDateChange(date) {\n    // alert('inside handleStartTimeDateChange');\n    let currentShowStartTimeDate = this.state.showStartTimeDate;\n    let startTimeDate = {\n      date: date,\n      dateObjectString: date.toString(),\n      toISOString: date.toISOString(),\n      toUTCString: date.toUTCString(),\n      toGMTString: date.toUTCString(),\n      dateString: date.toDateString(),\n      timeString: date.toTimeString(),\n      year: date.getFullYear(),\n      yearShort: date.getYear(),\n      month: date.getMonth(),\n      date: date.getDate(),\n      day: date.getDay('es-co', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n      }),\n      time: date.toLocaleTimeString(),\n      hour: date.getHours(),\n      minute: date.getMinutes(),\n      UTCDate: date.getUTCDate(),\n      toLocalString: date.toLocaleString('es-co', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n      }),\n      toLocalDateString: date.toLocaleDateString(),\n      toLocaleTimeString: date.toLocaleTimeString()\n    };\n    let day = numToDay(startTimeDate.day);\n    let dateDigit = date.getDate();\n    let year = date.getFullYear().toString().slice(0, 2); //.slice(0, 1);\n\n    let month = date.getMonth(); //let toLocaleDateString = '';\n    // toLocaleDateString = format(date.toLocaleDateString(), 'MM/dd/yyyy');\n\n    console.log(`day: ${day} type: ${typeof day}`);\n    console.log(`date: ${dateDigit} type: ${typeof dateDigit}`);\n    console.log(`year: ${year} type: ${typeof year}`);\n    console.log(`month: ${month} type: ${typeof month}`); // console.log(\n    //   `toLocalString: ${toLocaleDateString} type: ${typeof toLocaleDateString}`\n    // );\n\n    let dayObjName = year + month + dateDigit + day;\n    console.log(`dayObjName: ${dayObjName} type: ${typeof dayObjName}`); //dynamic keys use []\n\n    let currentDaysObj = _objectSpread({}, this.state.days, {\n      [dayObjName]: {\n        word: 'hello'\n      }\n    });\n\n    let stretch = _objectSpread({}, currentDaysObj);\n\n    console.dir(currentDaysObj);\n    console.dir(startTimeDate.toLocalString);\n    this.setState({\n      showStartTimeDate: !currentShowStartTimeDate,\n      startDate: date,\n      startTimeDate: startTimeDate\n    }, () => console.log(numToDay(startTimeDate.day)) // () => this.props.startDateTimeHandler(this.state.startTimeDate)\n    );\n  }\n\n  render() {\n    //datePicker\n    // let chooseDate = null;\n    // if (this.state.showChooseDate) {\n    //   chooseDate = (\n    //     <React.Fragment>\n    //       <div className=\"container\">\n    //         <DatePicker\n    //           placeholderText=\"Choose Start Time\"\n    //           selected={this.state.startDate}\n    //           onChange={date => this.handleStartTimeDateChange(date)}\n    //           showTimeSelect\n    //           timeFormat=\"HH:mm\"\n    //           timeIntervals={30}\n    //           timeCaption=\"Start\"\n    //           dateFormat=\"MMMM d, yyyy h:mm aa\"\n    //         />\n    //         {/* <DatePicker\n    //         placeholderText=\"Choose End Time\"\n    //         selected={this.state.finishDate}\n    //         onChange={date => this.handleFinishTimeDateChange(date)}\n    //         showTimeSelect\n    //         timeFormat=\"HH:mm\"\n    //         timeIntervals={15}\n    //         timeCaption=\"End\"\n    //         dateFormat=\"MMMM d, yyyy h:mm aa\"\n    //       /> */}\n    //       </div>\n    //     </React.Fragment>\n    //   );\n    // }\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(DatePicker, {\n      placeholderText: \"Choose Start Time\",\n      selected: this.state.startDate,\n      onChange: date => this.handleStartTimeDateChange(date),\n      showTimeSelect: true,\n      timeFormat: \"HH:mm\",\n      timeIntervals: 30,\n      timeCaption: \"Start\",\n      dateFormat: \"MMMM dd, yyyy\" //dateFormat=\"MMMM d, yyyy h:mm aa\"\n      //dateFormat=\"mm/dd/yyyy h:m aa\",\n      // format=\"mm/dd/yyyy\"\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default CalendarData;\n{\n  /* <button\n          onClick={() => {\n            this.setState({\n              showChooseDate: !this.state.showChooseDate\n            });\n          }}\n        >\n          PickDate\n        </button> */\n}","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/containers/Store/CalendarData.js"],"names":["React","Component","RightCockpit","TasksContext","DatePicker","numToDay","CalendarData","constructor","props","state","showChooseDate","days","createDayObjName","event","preventDefault","alert","day","startTimeDate","date","toLocalString","console","log","newDayObj","handleStartTimeDateChange","currentShowStartTimeDate","showStartTimeDate","dateObjectString","toString","toISOString","toUTCString","toGMTString","dateString","toDateString","timeString","toTimeString","year","getFullYear","yearShort","getYear","month","getMonth","getDate","getDay","time","toLocaleTimeString","hour","getHours","minute","getMinutes","UTCDate","getUTCDate","toLocaleString","toLocalDateString","toLocaleDateString","dateDigit","slice","dayObjName","currentDaysObj","word","stretch","dir","setState","startDate","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import classes from '../../components/Cockpit/Cockpit.module.css';\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksContext from '../../context/tasksContext';\nimport DatePicker from 'react-datepicker';\nimport numToDay from '../../components/Calendar/numToDay';\n//import * as moment from 'moment';\n//import { format, compareAsc } from 'date-fns';\nclass CalendarData extends Component {\n  constructor(props) {\n    super(props);\n\n    this.newDayObj = () => {\n      //obj name 200219Wed\n    };\n\n    this.createDayObjName = () => {\n      /*\n        //datepicker to give obj of startime\n        //use starttime to make obj name\n        //d\n\n\n\n\n      */\n    };\n  }\n  state = {\n    showChooseDate: false,\n    days: {}\n  };\n\n  createDayObjName = event => {\n    event.preventDefault();\n    alert('inside createDayObjName');\n    let day = this.state.startTimeDate.day;\n    //let year = this.state.startTimeDate.\n    let date = this.state.startTimeDate.toLocalString;\n    console.log(date);\n  };\n\n  handleStartTimeDateChange(date) {\n    // alert('inside handleStartTimeDateChange');\n    let currentShowStartTimeDate = this.state.showStartTimeDate;\n    let startTimeDate = {\n      date: date,\n      dateObjectString: date.toString(),\n      toISOString: date.toISOString(),\n      toUTCString: date.toUTCString(),\n      toGMTString: date.toUTCString(),\n      dateString: date.toDateString(),\n      timeString: date.toTimeString(),\n      year: date.getFullYear(),\n      yearShort: date.getYear(),\n      month: date.getMonth(),\n      date: date.getDate(),\n      day: date.getDay('es-co', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n      }),\n      time: date.toLocaleTimeString(),\n      hour: date.getHours(),\n      minute: date.getMinutes(),\n      UTCDate: date.getUTCDate(),\n      toLocalString: date.toLocaleString('es-co', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n      }),\n      toLocalDateString: date.toLocaleDateString(),\n      toLocaleTimeString: date.toLocaleTimeString()\n    };\n    let day = numToDay(startTimeDate.day);\n\n    let dateDigit = date.getDate();\n    let year = date\n      .getFullYear()\n      .toString()\n      .slice(0, 2);\n    //.slice(0, 1);\n    let month = date.getMonth();\n    //let toLocaleDateString = '';\n    // toLocaleDateString = format(date.toLocaleDateString(), 'MM/dd/yyyy');\n\n    console.log(`day: ${day} type: ${typeof day}`);\n    console.log(`date: ${dateDigit} type: ${typeof dateDigit}`);\n    console.log(`year: ${year} type: ${typeof year}`);\n    console.log(`month: ${month} type: ${typeof month}`);\n    // console.log(\n    //   `toLocalString: ${toLocaleDateString} type: ${typeof toLocaleDateString}`\n    // );\n    let dayObjName = year + month + dateDigit + day;\n    console.log(`dayObjName: ${dayObjName} type: ${typeof dayObjName}`);\n    //dynamic keys use []\n    let currentDaysObj = {\n      ...this.state.days,\n      [dayObjName]: {\n        word: 'hello'\n      }\n    };\n    let stretch = { ...currentDaysObj };\n    console.dir(currentDaysObj);\n    console.dir(startTimeDate.toLocalString);\n\n    this.setState(\n      {\n        showStartTimeDate: !currentShowStartTimeDate,\n        startDate: date,\n        startTimeDate: startTimeDate\n      },\n      () => console.log(numToDay(startTimeDate.day))\n\n      // () => this.props.startDateTimeHandler(this.state.startTimeDate)\n    );\n  }\n\n  render() {\n    //datePicker\n    // let chooseDate = null;\n    // if (this.state.showChooseDate) {\n    //   chooseDate = (\n    //     <React.Fragment>\n    //       <div className=\"container\">\n    //         <DatePicker\n    //           placeholderText=\"Choose Start Time\"\n    //           selected={this.state.startDate}\n    //           onChange={date => this.handleStartTimeDateChange(date)}\n    //           showTimeSelect\n    //           timeFormat=\"HH:mm\"\n    //           timeIntervals={30}\n    //           timeCaption=\"Start\"\n    //           dateFormat=\"MMMM d, yyyy h:mm aa\"\n    //         />\n\n    //         {/* <DatePicker\n    //         placeholderText=\"Choose End Time\"\n    //         selected={this.state.finishDate}\n    //         onChange={date => this.handleFinishTimeDateChange(date)}\n    //         showTimeSelect\n    //         timeFormat=\"HH:mm\"\n    //         timeIntervals={15}\n    //         timeCaption=\"End\"\n    //         dateFormat=\"MMMM d, yyyy h:mm aa\"\n    //       /> */}\n    //       </div>\n    //     </React.Fragment>\n    //   );\n    // }\n\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <DatePicker\n            placeholderText=\"Choose Start Time\"\n            selected={this.state.startDate}\n            onChange={date => this.handleStartTimeDateChange(date)}\n            showTimeSelect\n            timeFormat=\"HH:mm\"\n            timeIntervals={30}\n            timeCaption=\"Start\"\n            dateFormat=\"MMMM dd, yyyy\"\n            //dateFormat=\"MMMM d, yyyy h:mm aa\"\n            //dateFormat=\"mm/dd/yyyy h:m aa\",\n            // format=\"mm/dd/yyyy\"\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default CalendarData;\n{\n  /* <button\n          onClick={() => {\n            this.setState({\n              showChooseDate: !this.state.showChooseDate\n            });\n          }}\n        >\n          PickDate\n        </button> */\n}\n"]},"metadata":{},"sourceType":"module"}