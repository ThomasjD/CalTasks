{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/RightCockpit.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport classes from '../../components/Cockpit/Cockpit.module.css';\nimport Cockpit from '../../components/Cockpit/Cockpit';\nimport Cockpit2 from '../../components/Cockpit/Cockpit2';\nimport Navbar2 from '../../components/Cockpit/Navbar/Navbar2';\nimport Tasks from '../../components/ViewContent/Tasks/Tasks';\nimport TodayTasks from '../../components/ViewContent/TodayTasks/TodayTasks';\nimport Lessons from '../../components/ViewContent/Syllabus/MaxReact/Lessons';\nimport ViewContentOptions from '../../components/Cockpit/ViewContentOptions';\nimport NewTask from '../../components/Creation/newTask';\nimport DisplayContent from '../../components/Cockpit/displayContent';\nimport Syllabus from '../../components/Creation/Syllabus';\nimport classes2 from './RightCockpit.module.css';\nimport DatePickerPicker from './DatePicker.js';\nimport ShowAllTasksAfterAddingTask from '../../context/newTask-context';\nimport TryingOutContext from '../../context/tryOutContext.js';\nimport SyllabusData from '../Store/SyllabusData';\n\nclass RightCockpit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: [],\n      showEvents: false,\n      showDatePicker: false,\n      newTask: [],\n      tasks: [{\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      }, {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      }, {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }],\n      Monday: [{\n        id: 'morning',\n        timeOfDay: '',\n        task: 'comprar comida'\n      }, {\n        id: 'afternoon',\n        timeOfDay: '',\n        task: 'eat lunch'\n      }, {\n        id: 'evening',\n        timeOfDay: '',\n        task: 'play ball'\n      }],\n      newTaskTitle: '',\n      newTaskLocation: '',\n      isGoing: true,\n      numberOfGuests: 2,\n      contentChoice: '0',\n      showCockpit: true,\n      lastHeader: [],\n      lastTodayTasksHeader: [],\n      lastLessonHeader: [],\n      reRenderTasks: false,\n      syllabi: [],\n      contentChoiceHandlerTestNum: 7,\n      realNum: 8,\n      showLeftOverLessonsFromSyllabus: false,\n      SyllabusDataStructure: {},\n      blowfish: 'hootie'\n    };\n\n    this.newTaskInfo2 = event => {\n      let newSyllabus = event.target.value;\n      const syllabi = this.state.syllabi;\n      syllabi.push(newSyllabus);\n      this.setState({\n        syllabi: syllabi\n      });\n      console.log(\"this is this.state.syllabi after maxReact push \".concat(JSON.stringify(this.state.syllabi, null, 2)));\n    };\n\n    this.contentViewHandler = event => {\n      let newViewChoice = event.target.value; //Comparing new contentChoice with previous contentChoice\n      //if newContentChoice === oldContentChoice\n      //turn off the view\n\n      this.setState({\n        contentChoice: newViewChoice\n      });\n\n      if (newViewChoice === this.state.contentChoice) {\n        return this.setState({\n          contentChoice: '0'\n        });\n      } else {\n        switch (newViewChoice) {\n          case '1':\n            //All tasks\n            if (this.state.tasks != 0) {\n              this.setState({\n                lastHeader: this.state.tasks[0]\n              });\n            } else {\n              this.setState({\n                lastHeader: this.state.lastHeader\n              });\n            }\n\n            break;\n\n          case '2':\n            //TodaysTasks\n            if (this.state.Monday != 0) {\n              this.setState({\n                lastTodayTasksHeader: this.state.Monday[0]\n              });\n            } else {\n              this.setState({\n                lastTodayTasksHeader: this.state.lastTodayTasksHeader\n              });\n            }\n\n            break;\n\n          case '3':\n            //Syllabus\n            //reaching out to SyllabusData\n            this.props.lastLessonHeaderHandler();\n            break;\n\n          case '6':\n            //Adding Lessons from Syllabus\n            //syllabusData\n            this.props.showLeftOverLessonsFromSyllabus();\n            break;\n        }\n      }\n    };\n\n    this.deleteTaskhandler = taskIndex => {\n      alert('Are you sure you want to delete this task?');\n      let tasks = [];\n\n      switch (this.state.contentChoice) {\n        case '1':\n          tasks = [...this.state.tasks];\n          this.setState({\n            tasks: tasks\n          });\n          break;\n\n        case '2':\n          tasks = [...this.state.Monday];\n          this.setState({\n            Monday: tasks\n          });\n          break;\n\n        case '3':\n          //syllabusData\n          this.props.deleteLessonFromAssignedSyllabusHandler(); // tasks = [...this.state.maxReact];\n          // this.setState({ maxReact: tasks });\n\n          break;\n\n        case '6':\n          //syllabusData\n          this.props.addLessonFromOriginalSyllabusHandler();\n        // tasks = [...this.state.maxReactWorkLeft];\n        // this.setState({ maxReactWorkLeft: tasks });\n      }\n\n      tasks.splice(taskIndex, 1);\n      this.setState({\n        reRenderTasks: true\n      });\n    };\n\n    this.deleteTodayTaskhandler = taskIndex => {\n      alert('Are you sure you want to delete this task?');\n      this.setState({\n        reRenderTodayTasks: true\n      }); //get tasks array\n\n      const Monday = [...this.state.Monday]; //splice task of interst\n\n      Monday.splice(taskIndex, 1); //update new list of tasks to state\n\n      this.setState({\n        Monday: Monday\n      }); //this.setState({ showTasksCounter: false });\n    };\n\n    this.taskChangeHandler = (event, taskChangedId) => {\n      //find the task that matches the taskChangedId\n      const foundTaskId = this.state.tasks.findIndex(currentId => {\n        return currentId.id === taskChangedId;\n      }); //create new task item that we will put into array\n\n      const updatedTask = _objectSpread({}, this.state.tasks[foundTaskId]);\n\n      updatedTask.todo = event.target.value; //pull out the states tasks array\n\n      const tasks = [...this.state.tasks]; //update the task with id of interest w/ new task description\n\n      tasks[foundTaskId] = updatedTask; //update the state\n\n      this.setState({\n        tasks: tasks\n      });\n    };\n\n    this.newestTaskHandler = e => {\n      console.log('hey I am in newestTaskhandler');\n      console.log(e.task); //need to fix this in newTask so that it automaticly picks up the default value of the radio button\n\n      let location = !e.task.location ? e.task.location = 'Popblado' : null;\n      console.log(\"target location is \".concat(location));\n      let newestEvent = [...this.state.tasks, e.task]; //console.log(newestEvent[0].todo);\n\n      this.setState({\n        tasks: newestEvent\n      }); //this.setState({ showEvents: true });\n    };\n\n    this.newTaskLocationHandler = event => {\n      // let location = event.target.value;\n      // console.log(event.name);\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value,\n        realNum: '1'\n      });\n    };\n\n    this.todayTaskChangeHandler = (event, taskChangedId) => {\n      //find the task that matches the taskChangedId\n      const foundTaskId = this.state.Monday.findIndex(currentId => {\n        return currentId.id === taskChangedId;\n      }); //create new task item that we will put into array\n\n      const updatedTask = _objectSpread({}, this.state.Monday[foundTaskId]);\n\n      updatedTask.task = event.target.value; //pull out the states tasks array\n\n      const Monday = [...this.state.Monday]; //update the task with id of interest w/ new task description\n\n      Monday[foundTaskId] = updatedTask; //update the state\n\n      this.setState({\n        Monday: Monday\n      });\n    };\n\n    this.deleteLessonHandler = taskIndex => {\n      //get tasks array\n      const lessons = [...this.state.maxReact];\n      console.log('I am inside deleteLessonHandler');\n      alert('Are you sure you want to delete this task?');\n      this.setState({\n        reRenderTasks: true\n      }); //adding the lesson from maxReactLeftOverWork -> maxReact\n      //getting the current work left from\n\n      const currentMaxReactLeftOverWork = [...this.state.maxReactWorkLeft]; //find the correct index to add to maxReact\n\n      const addThisLesson = currentMaxReactLeftOverWork[taskIndex];\n      lessons.push(addThisLesson);\n      this.setState({\n        maxReact: lessons\n      }); //deleting from currentMaxReactLeftOverWork\n\n      currentMaxReactLeftOverWork.splice(taskIndex, 1); //updating currentMaxReactLeftOverWork after deleting a lesson\n\n      this.setState({\n        maxReactWorkLeft: currentMaxReactLeftOverWork\n      });\n      /*\n      !this.state.showLeftOverLessonsFromSyllabus\n        ? lessons.push(addThisLesson)\n        : //splice task of interst\n          lessons.splice(taskIndex, 1);\n      console.log(\n        `this is the adThisLesson I'm sending fro deleteLessonHandler ${addThisLesson}`\n      );\n      */\n\n      this.addNewLessonHandler(addThisLesson); //update new list of tasks to state\n      //this.setState({ maxReact: lessons });\n    };\n\n    this.newestEventHandler = e => {\n      console.log(e); // console.log(JSON.stringify(e.target.name, null, 2));\n      // console.log(JSON.stringify(e.target.value, null, 2));\n      //let currentEvent = this.state.events;\n\n      let incomingEvent = {\n        title: e.title,\n        name: e.name\n      }; //obj\n\n      let newestEvent = [...this.state.events, incomingEvent];\n      console.log(newestEvent[0].title); //console.log(JSON.stringify(incomingEvent, null, 3));\n      // let newestEvent = currentEvent.push(incomingEvent);\n\n      this.setState({\n        events: newestEvent\n      });\n      this.setState({\n        showEvents: true\n      });\n    };\n\n    this.newestSyllabusHandler = event => {\n      console.log(\"i am inside of newestSyllabusHandler event: \".concat(event));\n      let newContentChoice = event;\n      let contentViewObject = {\n        target: {\n          value: newContentChoice\n        }\n      };\n      this.contentViewHandler(contentViewObject);\n    };\n  }\n\n  render() {\n    let viewOptions = null;\n\n    if (this.state.showCockpit == true) {\n      viewOptions = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }, React.createElement(Cockpit, {\n        title: this.props.appTitle,\n        allTasksClicked: this.toggleShowTasksHandler,\n        tasksLength: this.state.tasks.length,\n        todayTasksClicked: this.displayTodayScheduleHandler,\n        deleteCockpit: () => {\n          this.setState({\n            showCockpit: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }));\n    } // showLeftOverLessonsFromOrigSyllabus={\n    //   this.props.syllabusEverything[\n    //     'showLeftOverLessonsFromSyllabus'\n    //   ]\n    // }\n    //Part of TryingOutContext.Provider\n    //contentChoiceHandler: this.contentChoiceHandler2,\n\n\n    let displayCockpit = React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row d-flex d-lg-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-lg-4 order-1 float-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card text-white bg-info m-3 p-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, viewOptions))), React.createElement(\"div\", {\n      className: \"col-lg-8 order-0 float-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card bg-light m-3 p-3 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(TryingOutContext.Provider, {\n      value: {\n        newestSyllabus: event => {\n          this.newestSyllabusHandler(event);\n        },\n        addNewLessonHandler: event => {\n          this.props.addLessonFromOriginalSyllabusHandler(event);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(DisplayContent, {\n      deleteTaskhandler: this.deleteTaskhandler,\n      todayTaskChangeHandler: this.todayTaskChangeHandler,\n      taskChangeHandler: this.taskChangeHandler,\n      everything: this.state,\n      everythingSyllabus: this.props.syllabusEverything,\n      lessonChangeHandler: this.props.lessonChangeHandler,\n      leftOverLessonChangeHandler: this.props.leftOverLessonChangeHandler,\n      newestTask: event => this.newestTaskHandler(event),\n      newestEvent: event => this.newestEventHandler(event),\n      deleteLessonHandler: event => this.props.deleteLessonFromAssignedSyllabusHandler(event),\n      addLessonFromOriginalSyllabusHandler: (event, taskIndex) => this.props.addLessonFromOriginalSyllabusHandler(event, taskIndex),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    })))));\n    let navbar = React.createElement(Navbar2, {\n      newTaskInfoComing: event => this.newTaskHandler(event),\n      newTaskInfo: event => this.eventContentViewHandler(event),\n      clickedNewEvent: event => this.contentViewHandler(event),\n      title: this.props.appTitle,\n      tasksLength: this.state.tasks.length,\n      clicked: event => this.contentViewHandler(event),\n      clickedSyllabus: event => this.contentViewHandler(event),\n      clickedNewTask: event => this.contentViewHandler(event),\n      newTaskInfo2: event => this.newTaskHandler(event),\n      deleteCockpit: () => {\n        this.setState({\n          showCockpit: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, this.props.newTaskInfoComing);\n    let viewContentOptions = React.createElement(ViewContentOptions, {\n      viewContent: event => this.contentViewHandler(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }); //need to stringify an object before rendering it\n    //let firechild = JSON.stringify(this.props.syllabusEverything.minReact[0]);\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, navbar, viewContentOptions, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, this.props.data.TasksData.word), displayCockpit);\n  }\n\n}\n\nRightCockpit.contextType = ShowAllTasksAfterAddingTask;\nexport default RightCockpit;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/RightCockpit.js"],"names":["React","Component","classes","Cockpit","Cockpit2","Navbar2","Tasks","TodayTasks","Lessons","ViewContentOptions","NewTask","DisplayContent","Syllabus","classes2","DatePickerPicker","ShowAllTasksAfterAddingTask","TryingOutContext","SyllabusData","RightCockpit","constructor","props","state","events","showEvents","showDatePicker","newTask","tasks","id","todo","deadline","location","Monday","timeOfDay","task","newTaskTitle","newTaskLocation","isGoing","numberOfGuests","contentChoice","showCockpit","lastHeader","lastTodayTasksHeader","lastLessonHeader","reRenderTasks","syllabi","contentChoiceHandlerTestNum","realNum","showLeftOverLessonsFromSyllabus","SyllabusDataStructure","blowfish","newTaskInfo2","event","newSyllabus","target","value","push","setState","console","log","JSON","stringify","contentViewHandler","newViewChoice","lastLessonHeaderHandler","deleteTaskhandler","taskIndex","alert","deleteLessonFromAssignedSyllabusHandler","addLessonFromOriginalSyllabusHandler","splice","deleteTodayTaskhandler","reRenderTodayTasks","taskChangeHandler","taskChangedId","foundTaskId","findIndex","currentId","updatedTask","newestTaskHandler","e","newestEvent","newTaskLocationHandler","type","checked","name","todayTaskChangeHandler","deleteLessonHandler","lessons","maxReact","currentMaxReactLeftOverWork","maxReactWorkLeft","addThisLesson","addNewLessonHandler","newestEventHandler","incomingEvent","title","newestSyllabusHandler","newContentChoice","contentViewObject","render","viewOptions","appTitle","toggleShowTasksHandler","length","displayTodayScheduleHandler","displayCockpit","newestSyllabus","syllabusEverything","lessonChangeHandler","leftOverLessonChangeHandler","navbar","newTaskHandler","eventContentViewHandler","newTaskInfoComing","viewContentOptions","data","TasksData","word","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from '../../components/Cockpit/Cockpit.module.css';\nimport Cockpit from '../../components/Cockpit/Cockpit';\nimport Cockpit2 from '../../components/Cockpit/Cockpit2';\nimport Navbar2 from '../../components/Cockpit/Navbar/Navbar2';\nimport Tasks from '../../components/ViewContent/Tasks/Tasks';\nimport TodayTasks from '../../components/ViewContent/TodayTasks/TodayTasks';\nimport Lessons from '../../components/ViewContent/Syllabus/MaxReact/Lessons';\nimport ViewContentOptions from '../../components/Cockpit/ViewContentOptions';\nimport NewTask from '../../components/Creation/newTask';\nimport DisplayContent from '../../components/Cockpit/displayContent';\nimport Syllabus from '../../components/Creation/Syllabus';\nimport classes2 from './RightCockpit.module.css';\nimport DatePickerPicker from './DatePicker.js';\nimport ShowAllTasksAfterAddingTask from '../../context/newTask-context';\nimport TryingOutContext from '../../context/tryOutContext.js';\nimport SyllabusData from '../Store/SyllabusData';\n\nclass RightCockpit extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    events: [],\n    showEvents: false,\n    showDatePicker: false,\n    newTask: [],\n    tasks: [\n      {\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      },\n      {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      },\n      {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }\n    ],\n    Monday: [\n      { id: 'morning', timeOfDay: '', task: 'comprar comida' },\n      { id: 'afternoon', timeOfDay: '', task: 'eat lunch' },\n      { id: 'evening', timeOfDay: '', task: 'play ball' }\n    ],\n    newTaskTitle: '',\n    newTaskLocation: '',\n    isGoing: true,\n    numberOfGuests: 2,\n    contentChoice: '0',\n    showCockpit: true,\n    lastHeader: [],\n    lastTodayTasksHeader: [],\n    lastLessonHeader: [],\n    reRenderTasks: false,\n    syllabi: [],\n    contentChoiceHandlerTestNum: 7,\n    realNum: 8,\n    showLeftOverLessonsFromSyllabus: false,\n    SyllabusDataStructure: {},\n    blowfish: 'hootie'\n  };\n\n  newTaskInfo2 = event => {\n    let newSyllabus = event.target.value;\n\n    const syllabi = this.state.syllabi;\n    syllabi.push(newSyllabus);\n    this.setState({ syllabi: syllabi });\n    console.log(\n      `this is this.state.syllabi after maxReact push ${JSON.stringify(\n        this.state.syllabi,\n        null,\n        2\n      )}`\n    );\n  };\n\n  /*\n      console.log(newViewChoice);\n    console.log(JSON.stringify(newViewChoice, null, 2));\n    //console.log(event.target.['location'].value);\n\n    let maxReact2 = new Syllabus(\n      'maxReact2',\n      'maxReact22222',\n      '11asfd',\n      'Use this in fusfsasgnctions',\n      '11.Read allasf about this'\n    );\n\n    //if array is empty no need to use spread operator\n    const tryOutSyllabi = this.state.syllabi;\n\n    tryOutSyllabi.push(maxReact2);\n\n    this.setState({ syllabi: tryOutSyllabi });\n*/\n\n  contentViewHandler = event => {\n    let newViewChoice = event.target.value;\n\n    //Comparing new contentChoice with previous contentChoice\n    //if newContentChoice === oldContentChoice\n    //turn off the view\n    this.setState({ contentChoice: newViewChoice });\n    if (newViewChoice === this.state.contentChoice) {\n      return this.setState({ contentChoice: '0' });\n    } else {\n      switch (newViewChoice) {\n        case '1': //All tasks\n          if (this.state.tasks != 0) {\n            this.setState({ lastHeader: this.state.tasks[0] });\n          } else {\n            this.setState({ lastHeader: this.state.lastHeader });\n          }\n          break;\n\n        case '2': //TodaysTasks\n          if (this.state.Monday != 0) {\n            this.setState({ lastTodayTasksHeader: this.state.Monday[0] });\n          } else {\n            this.setState({\n              lastTodayTasksHeader: this.state.lastTodayTasksHeader\n            });\n          }\n          break;\n\n        case '3': //Syllabus\n          //reaching out to SyllabusData\n          this.props.lastLessonHeaderHandler();\n          break;\n\n        case '6': //Adding Lessons from Syllabus\n          //syllabusData\n          this.props.showLeftOverLessonsFromSyllabus();\n          break;\n      }\n    }\n  };\n\n  //delete a task\n  deleteTaskhandler = taskIndex => {\n    alert('Are you sure you want to delete this task?');\n\n    let tasks = [];\n\n    switch (this.state.contentChoice) {\n      case '1':\n        tasks = [...this.state.tasks];\n        this.setState({ tasks: tasks });\n        break;\n      case '2':\n        tasks = [...this.state.Monday];\n        this.setState({ Monday: tasks });\n        break;\n      case '3':\n        //syllabusData\n        this.props.deleteLessonFromAssignedSyllabusHandler();\n        // tasks = [...this.state.maxReact];\n        // this.setState({ maxReact: tasks });\n        break;\n      case '6':\n        //syllabusData\n        this.props.addLessonFromOriginalSyllabusHandler();\n\n      // tasks = [...this.state.maxReactWorkLeft];\n      // this.setState({ maxReactWorkLeft: tasks });\n    }\n\n    tasks.splice(taskIndex, 1);\n\n    this.setState({ reRenderTasks: true });\n  };\n\n  deleteTodayTaskhandler = taskIndex => {\n    alert('Are you sure you want to delete this task?');\n    this.setState({ reRenderTodayTasks: true });\n\n    //get tasks array\n    const Monday = [...this.state.Monday];\n\n    //splice task of interst\n    Monday.splice(taskIndex, 1);\n\n    //update new list of tasks to state\n    this.setState({ Monday: Monday });\n\n    //this.setState({ showTasksCounter: false });\n  };\n\n  //dynamic edit task\n  taskChangeHandler = (event, taskChangedId) => {\n    //find the task that matches the taskChangedId\n    const foundTaskId = this.state.tasks.findIndex(currentId => {\n      return currentId.id === taskChangedId;\n    });\n\n    //create new task item that we will put into array\n    const updatedTask = { ...this.state.tasks[foundTaskId] };\n    updatedTask.todo = event.target.value;\n\n    //pull out the states tasks array\n    const tasks = [...this.state.tasks];\n\n    //update the task with id of interest w/ new task description\n    tasks[foundTaskId] = updatedTask;\n\n    //update the state\n    this.setState({ tasks: tasks });\n  };\n\n  //dynamic edit task for Today (Monday)\n  newestTaskHandler = e => {\n    console.log('hey I am in newestTaskhandler');\n    console.log(e.task);\n    //need to fix this in newTask so that it automaticly picks up the default value of the radio button\n    let location = !e.task.location ? (e.task.location = 'Popblado') : null;\n    console.log(`target location is ${location}`);\n\n    let newestEvent = [...this.state.tasks, e.task];\n    //console.log(newestEvent[0].todo);\n\n    this.setState({ tasks: newestEvent });\n    //this.setState({ showEvents: true });\n  };\n\n  newTaskLocationHandler = event => {\n    // let location = event.target.value;\n    // console.log(event.name);\n\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n      realNum: '1'\n    });\n  };\n\n  todayTaskChangeHandler = (event, taskChangedId) => {\n    //find the task that matches the taskChangedId\n    const foundTaskId = this.state.Monday.findIndex(currentId => {\n      return currentId.id === taskChangedId;\n    });\n\n    //create new task item that we will put into array\n    const updatedTask = { ...this.state.Monday[foundTaskId] };\n\n    updatedTask.task = event.target.value;\n\n    //pull out the states tasks array\n    const Monday = [...this.state.Monday];\n\n    //update the task with id of interest w/ new task description\n    Monday[foundTaskId] = updatedTask;\n\n    //update the state\n    this.setState({ Monday: Monday });\n  };\n\n  deleteLessonHandler = taskIndex => {\n    //get tasks array\n    const lessons = [...this.state.maxReact];\n    console.log('I am inside deleteLessonHandler');\n\n    alert('Are you sure you want to delete this task?');\n    this.setState({ reRenderTasks: true });\n\n    //adding the lesson from maxReactLeftOverWork -> maxReact\n\n    //getting the current work left from\n    const currentMaxReactLeftOverWork = [...this.state.maxReactWorkLeft];\n    //find the correct index to add to maxReact\n    const addThisLesson = currentMaxReactLeftOverWork[taskIndex];\n    lessons.push(addThisLesson);\n    this.setState({ maxReact: lessons });\n\n    //deleting from currentMaxReactLeftOverWork\n    currentMaxReactLeftOverWork.splice(taskIndex, 1);\n\n    //updating currentMaxReactLeftOverWork after deleting a lesson\n    this.setState({ maxReactWorkLeft: currentMaxReactLeftOverWork });\n    /*\n    !this.state.showLeftOverLessonsFromSyllabus\n      ? lessons.push(addThisLesson)\n      : //splice task of interst\n        lessons.splice(taskIndex, 1);\n    console.log(\n      `this is the adThisLesson I'm sending fro deleteLessonHandler ${addThisLesson}`\n    );\n    */\n    this.addNewLessonHandler(addThisLesson);\n\n    //update new list of tasks to state\n    //this.setState({ maxReact: lessons });\n  };\n\n  // lessonChangeHandler = (event, taskChangeId) => {\n  //   const foundTaskId = this.state.maxReact.findIndex(currentId => {\n  //     return currentId.id === taskChangeId;\n  //   });\n\n  //   //createnew task item to put into array\n  //   const updatedLessons = { ...this.state.maxReact[foundTaskId] };\n\n  //   //using updated values to define the lesson of the particular pulled out lesson\n  //   updatedLessons.lesson = event.target.value;\n\n  //   //pull out of states maxReact array\n  //   const lessons = [...this.state.maxReact];\n\n  //   //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n  //   lessons[foundTaskId] = updatedLessons;\n\n  //   //final update of lessons\n  //   this.setState({ maxReact: lessons });\n  // };\n\n  newestEventHandler = e => {\n    console.log(e);\n    // console.log(JSON.stringify(e.target.name, null, 2));\n    // console.log(JSON.stringify(e.target.value, null, 2));\n    //let currentEvent = this.state.events;\n    let incomingEvent = { title: e.title, name: e.name }; //obj\n\n    let newestEvent = [...this.state.events, incomingEvent];\n    console.log(newestEvent[0].title);\n    //console.log(JSON.stringify(incomingEvent, null, 3));\n    // let newestEvent = currentEvent.push(incomingEvent);\n    this.setState({ events: newestEvent });\n    this.setState({ showEvents: true });\n  };\n\n  newestSyllabusHandler = event => {\n    console.log(`i am inside of newestSyllabusHandler event: ${event}`);\n\n    let newContentChoice = event;\n    let contentViewObject = {\n      target: {\n        value: newContentChoice\n      }\n    };\n\n    this.contentViewHandler(contentViewObject);\n  };\n\n  static contextType = ShowAllTasksAfterAddingTask;\n  render() {\n    let viewOptions = null;\n    if (this.state.showCockpit == true) {\n      viewOptions = (\n        <React.Fragment>\n          <Cockpit\n            title={this.props.appTitle}\n            allTasksClicked={this.toggleShowTasksHandler}\n            tasksLength={this.state.tasks.length}\n            todayTasksClicked={this.displayTodayScheduleHandler}\n            deleteCockpit={() => {\n              this.setState({ showCockpit: false });\n            }}\n          />\n        </React.Fragment>\n      );\n    }\n\n    // showLeftOverLessonsFromOrigSyllabus={\n    //   this.props.syllabusEverything[\n    //     'showLeftOverLessonsFromSyllabus'\n    //   ]\n    // }\n    //Part of TryingOutContext.Provider\n    //contentChoiceHandler: this.contentChoiceHandler2,\n    let displayCockpit = (\n      <div className=\"container\">\n        <div className=\"row d-flex d-lg-block\">\n          <div className=\"col-lg-4 order-1 float-left\">\n            <div className=\"card text-white bg-info m-3 p-3\">{viewOptions}</div>\n          </div>\n        </div>\n\n        <div className=\"col-lg-8 order-0 float-left\">\n          <div className=\"card bg-light m-3 p-3 \">\n            <TryingOutContext.Provider\n              value={{\n                newestSyllabus: event => {\n                  this.newestSyllabusHandler(event);\n                },\n                addNewLessonHandler: event => {\n                  this.props.addLessonFromOriginalSyllabusHandler(event);\n                }\n              }}\n            >\n              <DisplayContent\n                deleteTaskhandler={this.deleteTaskhandler}\n                todayTaskChangeHandler={this.todayTaskChangeHandler}\n                taskChangeHandler={this.taskChangeHandler}\n                everything={this.state}\n                everythingSyllabus={this.props.syllabusEverything}\n                lessonChangeHandler={this.props.lessonChangeHandler}\n                leftOverLessonChangeHandler={\n                  this.props.leftOverLessonChangeHandler\n                }\n                newestTask={event => this.newestTaskHandler(event)}\n                newestEvent={event => this.newestEventHandler(event)}\n                deleteLessonHandler={event =>\n                  this.props.deleteLessonFromAssignedSyllabusHandler(event)\n                }\n                addLessonFromOriginalSyllabusHandler={(event, taskIndex) =>\n                  this.props.addLessonFromOriginalSyllabusHandler(\n                    event,\n                    taskIndex\n                  )\n                }\n              />\n            </TryingOutContext.Provider>\n          </div>\n        </div>\n      </div>\n    );\n\n    let navbar = (\n      <Navbar2\n        newTaskInfoComing={event => this.newTaskHandler(event)}\n        newTaskInfo={event => this.eventContentViewHandler(event)}\n        clickedNewEvent={event => this.contentViewHandler(event)}\n        title={this.props.appTitle}\n        tasksLength={this.state.tasks.length}\n        clicked={event => this.contentViewHandler(event)}\n        clickedSyllabus={event => this.contentViewHandler(event)}\n        clickedNewTask={event => this.contentViewHandler(event)}\n        newTaskInfo2={event => this.newTaskHandler(event)}\n        deleteCockpit={() => {\n          this.setState({ showCockpit: false });\n        }}\n      >\n        {this.props.newTaskInfoComing}\n      </Navbar2>\n    );\n\n    let viewContentOptions = (\n      <ViewContentOptions\n        viewContent={event => this.contentViewHandler(event)}\n      />\n    );\n    //need to stringify an object before rendering it\n    //let firechild = JSON.stringify(this.props.syllabusEverything.minReact[0]);\n\n    return (\n      <React.Fragment>\n        {navbar}\n\n        {viewContentOptions}\n        <p>{this.props.data.TasksData.word}</p>\n\n        {displayCockpit}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default RightCockpit;\n"]},"metadata":{},"sourceType":"module"}