{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/Cockpit/Cockpit.js\";\n// import React, { useEffect, useState, useContext } from 'react';\n// //import rocky from '../../containers/App.module.css'\n// import classNames from 'classnames';\n// import classes from './Cockpit.module.css';\n// import Navbar from './navBar';\n// import DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\n// import Template from '../../Template/Template';\n// import TasksContext from '../../context/tasksContext';\n// import HowBusyThisWeek from './HowBusyThisWeek/HowBusyThisWeek';\n// import WeeklyTimeBudget from '../Creation/WeeklyTimeBudget/WeeklyTimeBudget';\n// const Cockpit = props => {\n//   //can do anything that componentDidUpdate can do\n//   //can send http request here\n//   const tasksContext = useContext(TasksContext);\n//   useEffect(() => {\n//     console.log('I am inside of [Cockpit.js] useffect');\n//     //getting rid of timer\n//     // const timer = setTimeout(() => {\n//     //   alert('Cockpit timer alert');\n//     // }, 1000);\n//     return () => {\n//       //clearTimeout(timer);\n//       console.log('[Cockpit.js] cleanup work in useEffect');\n//     };\n//   }, []);\n//   /*\n//     setTimeout(() => {\n//       alert('Saved data to cloud')\n//     }, 1000);\n//     return () => { //don't have to have a return statement\n//       console.log('[Cockpit.js] cleanup work in useEffect')\n//     }\n//   }, []);\n//   */\n//   //if 2nd argument [props.tasks] it doesn't involve tasks -> it won't run this again\n//   //[props.tasks]\n//   useEffect(() => {\n//     console.log('[Cockpit.js] 2nd useEffect');\n//     return () => {\n//       console.log('[Cockpit.js] cleanup work in 2nd UseEffect');\n//     };\n//   });\n//   //styling the 'Things to Do' using strings for classnames\n//   const assignedClasses = [];\n//   let btnClass = '';\n//   switch (props.tasksLength) {\n//     case 3:\n//       assignedClasses.push('bold', 'red');\n//       break;\n//     case 2:\n//       assignedClasses.push('red');\n//       break;\n//     case 1:\n//       assignedClasses.push('orange');\n//       break;\n//     default:\n//       assignedClasses.push('green');\n//       break;\n//   }\n//   //console.log(assignedClasses[0])\n//   //add multiple classes for <p> w/ strings\n//   //const classesFinal = classes.join(' ')\n//   const classesFinal = 'rocky.' + assignedClasses;\n//   const [cockpitViewOptions, setCockpitViewOptions] = useState({\n//     showTasksNumEachDay: true,\n//     showTimeBudgetForWeek: false\n//   });\n//   const setHowBusyToggleHandler = () => {\n//     let currentToggleStatus = cockpitViewOptions.showTasksNumEachDay;\n//     setCockpitViewOptions({\n//       showTasksNumEachDay: !currentToggleStatus\n//     });\n//   };\n//   const requestDataHandler = event => {\n//     let viewOptionChoice = event.target.value; //'' number used in displayContent component\n//     let contentChoice = null;\n//     let typeOfData = ''; //string: syllabus,tasks,events,objectives\n//     let handlerChoice = ''; //string: '#' handler inside of database\n//     let dataLocation = ''; // string: where obj found inside database\n//     let infoType = ''; //string: index/id/\n//     let info = ''; //string: actual info\n//     //let today = calendarObj();\n//     switch (viewOptionChoice) {\n//       case '0': //Unscheduled Tasks for Week\n//         let currentShowTasksNumEachDay = cockpitViewOptions.showTasksNumEachDay;\n//         setCockpitViewOptions({\n//           showTasksNumEachDay: !currentShowTasksNumEachDay\n//         });\n//         typeOfData = 'tasks';\n//         handlerChoice = '7';\n//         dataLocation = '';\n//         infoType = 'howBusy';\n//         info = null;\n//         //contentChoice = '7';\n//         let dataRequestMessage = {\n//           typeOfData: typeOfData,\n//           handlerChoice: handlerChoice,\n//           dataLocation: dataLocation,\n//           infoType: infoType,\n//           info: info\n//         };\n//         tasksContext.dataRequestHandler(event, dataRequestMessage);\n//         break;\n//       case '1': //TimeBudget for Week\n//         let currentShowTimeBudgetForWeek =\n//           cockpitViewOptions.showTimeBudgetForWeek;\n//         setCockpitViewOptions({\n//           showTimeBudgetForWeek: !currentShowTimeBudgetForWeek\n//         });\n//         //reconnect to UiData after forming universal Store\n//         // contentChoice = '12';\n//         // let contentViewObject = {\n//         //   target: {\n//         //     value: contentChoice\n//         //   }\n//         // };\n//         // props.contentViewHandler(contentViewObject);\n//         break;\n//     }\n//     // alert(`typeOfData: ${typeOfData}`);\n//     // alert(`handlerChoice ${handlerChoice}`);\n//     // alert(`dataLocation ${dataLocation}`);\n//     // alert(`infoType ${infoType}`);\n//     // alert(`info ${info}`);\n//     //props.contentViewHandler(contentViewObject);\n//   };\n//   let displayHowBusyThisWeek = null;\n//   if (\n//     tasksContext.tasksData.tasksData &&\n//     cockpitViewOptions.showTasksNumEachDay\n//     // tasksContext.tasksData.tasksData.showHowBusyWeek\n//   ) {\n//     displayHowBusyThisWeek = (\n//       <React.Fragment>\n//         <HowBusyThisWeek\n//           showHowBusyThisWeek={cockpitViewOptions.showTasksNumEachDay}\n//           deadline={tasksContext.tasksData.numTasksThisWeek}\n//         />\n//       </React.Fragment>\n//     );\n//   }\n//   let displayShowTimeBudgetForWeek = null;\n//   if (cockpitViewOptions.showTimeBudgetForWeek) {\n//     displayShowTimeBudgetForWeek = <WeeklyTimeBudget />;\n//   }\n//   return (\n//     <React.Fragment>\n//       <div>\n//         <img\n//           className={classes.leftCockpitIcon}\n//           src={require('../../Assets/aptIcon.png')}\n//         />\n//         <h5>Pick Content View!</h5>\n//         <br></br>\n//         <br></br>\n//         <div className=\"btn-group-toggle d-flex-between\" data-toggle=\"buttons\">\n//           <label className=\"btn btn-danger m-2 active\">\n//             <button\n//               // type=\"radio\"\n//               name=\"options\"\n//               id=\"option1\"\n//               autoComplete=\"off\"\n//               // onClick={props.viewContent}\n//               onClick={event => requestDataHandler(event)}\n//               value=\"0\"\n//             />{' '}\n//             Click to see # of Tasks/Day\n//           </label>\n//           <label className=\"btn btn-danger m-2 active\">\n//             <button\n//               // type=\"radio\"\n//               name=\"options\"\n//               id=\"option1\"\n//               autoComplete=\"off\"\n//               onClick={event => requestDataHandler(event)}\n//               value=\"1\"\n//               // onClick={event =>\n//               //   setHowBusyToggleHandler(\n//               //     tasksContext.dataRequestHandler(event, 'tasks', '7', null, null)\n//               //   )\n//               // }\n//               // value=\"0\"\n//             />{' '}\n//             Click to see Time Budget For Week\n//           </label>\n//         </div>\n//         <br></br>\n//         <br></br>\n//         {displayHowBusyThisWeek}\n//         {displayShowTimeBudgetForWeek}\n//         {cockpitViewOptions.showTasksNumEachDay ? (\n//           <React.Fragment>\n//             <Template />\n//             <p\n//               className={classNames({\n//                 [classes[assignedClasses[0]]]: true,\n//                 [classes[assignedClasses[1]]]: true\n//               })}\n//             ></p>\n//           </React.Fragment>\n//         ) : null}\n//         <DatePickerPicker />\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n// export default React.memo(Cockpit);\nimport React, { Component } from 'react'; //import classes from '../../components/Cockpit/Cockpit.module.css';\n\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport SyllabusData from './SyllabusData';\nimport SyllabusContext from '../../context/syllabusContext.js';\nimport TasksDataContext from '../../context/tasksContext.js';\nimport Aux from '../../hoc/Aux';\nimport Layout from '../../hoc/Layout';\nimport CalendarContext from '../../context/calendarContext'; //import Basic from './react-big-scheduler-master/Basic';\n\nclass Store extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showSyllabusList: false,\n      crunk: 'Hootie',\n      showLeftOverLessonsFromSyllabus: false,\n      showLeftOverTasksForWeek: false,\n      syllabusData: null,\n      tasksData: null,\n      fish: 'blowFish',\n      dataRequestDetails: {\n        handlerChoice: false,\n        dataLocation: null,\n        index: null,\n        id: null,\n        value: null\n      }\n    };\n\n    this.sendSyllabusDataHandler = handlerChoice => {\n      this.setState({\n        syllabusHandlerChoice: handlerChoice\n      });\n      console.log('Inside of sendSyllabusDataHandler');\n    };\n\n    this.receiveSyllabusDataHandler = dataBase => {\n      switch (dataBase.dataBaseName) {\n        case 'syllabus':\n          this.setState({\n            syllabusData: dataBase,\n            syllabusHandlerChoice: '0'\n          }, () => {\n            console.log(this.state.syllabusData.lastLessonHeader);\n          });\n          break;\n\n        case 'tasks':\n          this.setState({\n            tasksData: dataBase,\n            tasksHandlerChoice: '0'\n          });\n          break;\n      }\n    };\n\n    this.dataRequestHandler = (event, dataRequestMessage) => {\n      // alert(` in Store dataRequestHandler-->  typeOfData: ${dataRequestMessage.typeOfData}\n      // handlerChoice: ${dataRequestMessage.handlerChoice}\n      // dataLocation: ${dataRequestMessage.dataLocation}\n      // infoType: ${dataRequestMessage.infoType}\n      // info: ${dataRequestMessage.info.eventTitle}`);\n      let typeOfData = dataRequestMessage.typeOfData,\n          handlerChoice = dataRequestMessage.handlerChoice,\n          dataLocation = dataRequestMessage.dataLocation,\n          infoType = dataRequestMessage.infoType,\n          info = dataRequestMessage.info;\n      let index = null;\n      let id = null;\n      let value = '';\n      let dataRequestDetails = null; //let inspection = event.value;\n\n      switch (typeOfData) {\n        case 'tasks':\n          switch (infoType) {\n            case 'index':\n              index = info;\n              value = event.target.value;\n              break;\n\n            case 'id':\n              id = info;\n              value = event.target.value;\n              alert(`inside Store value: ${value}`);\n              break;\n\n            case 'pickedDayTasks':\n              value = null;\n              break;\n          } //alert('inside typeOfData of tasks ');\n\n\n          dataRequestDetails = {\n            handlerChoice: handlerChoice,\n            index: index,\n            id: id,\n            value: value,\n            typeOfData: typeOfData,\n            dataLocation: dataLocation\n          };\n          break;\n\n        case 'events':\n          //alert('inside store case events');\n          dataRequestDetails = {\n            handlerChoice: handlerChoice,\n            index: index,\n            id: id,\n            typeOfData: typeOfData,\n            dataLocation: dataLocation,\n            value: info\n          };\n          break;\n\n        case 'syllabus':\n          // alert(\n          //   `inside Store syllabus case ${typeOfData} handlerChoice:${handlerChoice} dataLocation: ${dataLocation} info: ${info}`\n          // );\n          switch (infoType) {\n            case 'index':\n              index = info; //value = event.target.value;\n\n              break;\n\n            case 'id':\n              id = info;\n              value = event.target.value;\n              break;\n          }\n\n          dataRequestDetails = {\n            handlerChoice: handlerChoice,\n            index: index,\n            id: id,\n            dataLocation: dataLocation,\n            typeOfData: typeOfData,\n            value: value\n          };\n          break;\n      } //event, index, handlerType\n\n\n      this.setState({\n        dataRequestDetails: dataRequestDetails\n      });\n    };\n\n    this.dataReceiverHandler = dataBase => {\n      switch (dataBase.dataBaseName) {\n        case 'syllabus':\n          this.setState({\n            syllabusData: dataBase\n          });\n          break;\n\n        case 'tasks':\n          this.setState({\n            tasksData: dataBase\n          });\n          break;\n      }\n    };\n\n    this.resetHandlerChoice = () => {\n      this.setState({\n        dataRequestDetails: {\n          handlerChoice: '0',\n          typeOfData: '',\n          index: null,\n          id: null,\n          value: ''\n        }\n      });\n    };\n  }\n\n  render() {\n    // let displayMessage = null;\n    // if (this.state.syllabusHandlerChoice === '0') {\n    //   displayMessage = <div>Hey syllabusHandlerchoice is recorded</div>;\n    // }\n    // Layout wrap displayed\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, React.createElement(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, React.createElement(CalendarContext.Provider, {\n      value: {\n        resetHandlerChoice: this.resetHandlerChoice,\n        everythingCalendar: this.state,\n        dataRequestHandler: this.dataRequestHandler,\n        dataRequestDetails: this.state.dataRequestDetails,\n        dataReceiverHandler: this.dataReceiverHandler\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, React.createElement(SyllabusContext.Provider, {\n      value: {\n        resetHandlerChoice: this.resetHandlerChoice,\n        everythingSyllabus: this.state,\n        dataRequestHandler: this.dataRequestHandler,\n        dataRequestDetails: this.state.dataRequestDetails,\n        dataReceiverHandler: this.dataReceiverHandler\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, React.createElement(SyllabusData, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }), React.createElement(TasksDataContext.Provider, {\n      value: {\n        crunk: this.state.crunk,\n        dataReceiverHandler: this.dataReceiverHandler,\n        dataRequestHandler: this.dataRequestHandler,\n        dataRequestDetails: this.state.dataRequestDetails,\n        tasksData: this.state,\n        resetHandlerChoice: this.resetHandlerChoice,\n        newDataHandler: this.newDataHandler\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, React.createElement(TasksData, {\n      showLeftOverTasksForWeek: this.state.showLeftOverTasksForWeek,\n      dataRequestDetails: this.state.dataRequestDetails,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }), React.createElement(RightCockpit, {\n      crunk: this.state.crunk,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default Store;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/Cockpit/Cockpit.js"],"names":["React","Component","RightCockpit","TasksData","SyllabusData","SyllabusContext","TasksDataContext","Aux","Layout","CalendarContext","Store","state","showSyllabusList","crunk","showLeftOverLessonsFromSyllabus","showLeftOverTasksForWeek","syllabusData","tasksData","fish","dataRequestDetails","handlerChoice","dataLocation","index","id","value","sendSyllabusDataHandler","setState","syllabusHandlerChoice","console","log","receiveSyllabusDataHandler","dataBase","dataBaseName","lastLessonHeader","tasksHandlerChoice","dataRequestHandler","event","dataRequestMessage","typeOfData","infoType","info","target","alert","dataReceiverHandler","resetHandlerChoice","render","everythingCalendar","everythingSyllabus","newDataHandler"],"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","sourcesContent":["// import React, { useEffect, useState, useContext } from 'react';\n// //import rocky from '../../containers/App.module.css'\n// import classNames from 'classnames';\n// import classes from './Cockpit.module.css';\n// import Navbar from './navBar';\n// import DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\n// import Template from '../../Template/Template';\n// import TasksContext from '../../context/tasksContext';\n// import HowBusyThisWeek from './HowBusyThisWeek/HowBusyThisWeek';\n// import WeeklyTimeBudget from '../Creation/WeeklyTimeBudget/WeeklyTimeBudget';\n\n// const Cockpit = props => {\n//   //can do anything that componentDidUpdate can do\n//   //can send http request here\n//   const tasksContext = useContext(TasksContext);\n\n//   useEffect(() => {\n//     console.log('I am inside of [Cockpit.js] useffect');\n\n//     //getting rid of timer\n//     // const timer = setTimeout(() => {\n//     //   alert('Cockpit timer alert');\n//     // }, 1000);\n\n//     return () => {\n//       //clearTimeout(timer);\n//       console.log('[Cockpit.js] cleanup work in useEffect');\n//     };\n//   }, []);\n\n//   /*\n//     setTimeout(() => {\n//       alert('Saved data to cloud')\n//     }, 1000);\n//     return () => { //don't have to have a return statement\n//       console.log('[Cockpit.js] cleanup work in useEffect')\n//     }\n//   }, []);\n//   */\n//   //if 2nd argument [props.tasks] it doesn't involve tasks -> it won't run this again\n//   //[props.tasks]\n\n//   useEffect(() => {\n//     console.log('[Cockpit.js] 2nd useEffect');\n//     return () => {\n//       console.log('[Cockpit.js] cleanup work in 2nd UseEffect');\n//     };\n//   });\n\n//   //styling the 'Things to Do' using strings for classnames\n//   const assignedClasses = [];\n//   let btnClass = '';\n\n//   switch (props.tasksLength) {\n//     case 3:\n//       assignedClasses.push('bold', 'red');\n//       break;\n//     case 2:\n//       assignedClasses.push('red');\n//       break;\n//     case 1:\n//       assignedClasses.push('orange');\n//       break;\n//     default:\n//       assignedClasses.push('green');\n//       break;\n//   }\n\n//   //console.log(assignedClasses[0])\n//   //add multiple classes for <p> w/ strings\n//   //const classesFinal = classes.join(' ')\n//   const classesFinal = 'rocky.' + assignedClasses;\n\n//   const [cockpitViewOptions, setCockpitViewOptions] = useState({\n//     showTasksNumEachDay: true,\n//     showTimeBudgetForWeek: false\n//   });\n\n//   const setHowBusyToggleHandler = () => {\n//     let currentToggleStatus = cockpitViewOptions.showTasksNumEachDay;\n//     setCockpitViewOptions({\n//       showTasksNumEachDay: !currentToggleStatus\n//     });\n//   };\n\n//   const requestDataHandler = event => {\n//     let viewOptionChoice = event.target.value; //'' number used in displayContent component\n//     let contentChoice = null;\n//     let typeOfData = ''; //string: syllabus,tasks,events,objectives\n//     let handlerChoice = ''; //string: '#' handler inside of database\n//     let dataLocation = ''; // string: where obj found inside database\n//     let infoType = ''; //string: index/id/\n//     let info = ''; //string: actual info\n//     //let today = calendarObj();\n\n//     switch (viewOptionChoice) {\n//       case '0': //Unscheduled Tasks for Week\n//         let currentShowTasksNumEachDay = cockpitViewOptions.showTasksNumEachDay;\n//         setCockpitViewOptions({\n//           showTasksNumEachDay: !currentShowTasksNumEachDay\n//         });\n//         typeOfData = 'tasks';\n//         handlerChoice = '7';\n//         dataLocation = '';\n//         infoType = 'howBusy';\n//         info = null;\n//         //contentChoice = '7';\n//         let dataRequestMessage = {\n//           typeOfData: typeOfData,\n//           handlerChoice: handlerChoice,\n//           dataLocation: dataLocation,\n//           infoType: infoType,\n//           info: info\n//         };\n//         tasksContext.dataRequestHandler(event, dataRequestMessage);\n//         break;\n\n//       case '1': //TimeBudget for Week\n//         let currentShowTimeBudgetForWeek =\n//           cockpitViewOptions.showTimeBudgetForWeek;\n//         setCockpitViewOptions({\n//           showTimeBudgetForWeek: !currentShowTimeBudgetForWeek\n//         });\n//         //reconnect to UiData after forming universal Store\n//         // contentChoice = '12';\n//         // let contentViewObject = {\n//         //   target: {\n//         //     value: contentChoice\n//         //   }\n//         // };\n//         // props.contentViewHandler(contentViewObject);\n//         break;\n//     }\n\n//     // alert(`typeOfData: ${typeOfData}`);\n//     // alert(`handlerChoice ${handlerChoice}`);\n//     // alert(`dataLocation ${dataLocation}`);\n//     // alert(`infoType ${infoType}`);\n//     // alert(`info ${info}`);\n\n//     //props.contentViewHandler(contentViewObject);\n//   };\n//   let displayHowBusyThisWeek = null;\n\n//   if (\n//     tasksContext.tasksData.tasksData &&\n//     cockpitViewOptions.showTasksNumEachDay\n//     // tasksContext.tasksData.tasksData.showHowBusyWeek\n//   ) {\n//     displayHowBusyThisWeek = (\n//       <React.Fragment>\n//         <HowBusyThisWeek\n//           showHowBusyThisWeek={cockpitViewOptions.showTasksNumEachDay}\n//           deadline={tasksContext.tasksData.numTasksThisWeek}\n//         />\n//       </React.Fragment>\n//     );\n//   }\n\n//   let displayShowTimeBudgetForWeek = null;\n//   if (cockpitViewOptions.showTimeBudgetForWeek) {\n//     displayShowTimeBudgetForWeek = <WeeklyTimeBudget />;\n//   }\n\n//   return (\n//     <React.Fragment>\n//       <div>\n//         <img\n//           className={classes.leftCockpitIcon}\n//           src={require('../../Assets/aptIcon.png')}\n//         />\n\n//         <h5>Pick Content View!</h5>\n//         <br></br>\n//         <br></br>\n//         <div className=\"btn-group-toggle d-flex-between\" data-toggle=\"buttons\">\n//           <label className=\"btn btn-danger m-2 active\">\n//             <button\n//               // type=\"radio\"\n//               name=\"options\"\n//               id=\"option1\"\n//               autoComplete=\"off\"\n//               // onClick={props.viewContent}\n//               onClick={event => requestDataHandler(event)}\n//               value=\"0\"\n//             />{' '}\n//             Click to see # of Tasks/Day\n//           </label>\n\n//           <label className=\"btn btn-danger m-2 active\">\n//             <button\n//               // type=\"radio\"\n//               name=\"options\"\n//               id=\"option1\"\n//               autoComplete=\"off\"\n//               onClick={event => requestDataHandler(event)}\n//               value=\"1\"\n//               // onClick={event =>\n//               //   setHowBusyToggleHandler(\n//               //     tasksContext.dataRequestHandler(event, 'tasks', '7', null, null)\n//               //   )\n//               // }\n//               // value=\"0\"\n//             />{' '}\n//             Click to see Time Budget For Week\n//           </label>\n//         </div>\n\n//         <br></br>\n//         <br></br>\n//         {displayHowBusyThisWeek}\n//         {displayShowTimeBudgetForWeek}\n//         {cockpitViewOptions.showTasksNumEachDay ? (\n//           <React.Fragment>\n//             <Template />\n\n//             <p\n//               className={classNames({\n//                 [classes[assignedClasses[0]]]: true,\n//                 [classes[assignedClasses[1]]]: true\n//               })}\n//             ></p>\n//           </React.Fragment>\n//         ) : null}\n//         <DatePickerPicker />\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n// export default React.memo(Cockpit);\n\nimport React, { Component } from 'react';\n//import classes from '../../components/Cockpit/Cockpit.module.css';\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport SyllabusData from './SyllabusData';\nimport SyllabusContext from '../../context/syllabusContext.js';\nimport TasksDataContext from '../../context/tasksContext.js';\nimport Aux from '../../hoc/Aux';\nimport Layout from '../../hoc/Layout';\nimport CalendarContext from '../../context/calendarContext';\n//import Basic from './react-big-scheduler-master/Basic';\nclass Store extends Component {\n  state = {\n    showSyllabusList: false,\n    crunk: 'Hootie',\n    showLeftOverLessonsFromSyllabus: false,\n    showLeftOverTasksForWeek: false,\n    syllabusData: null,\n    tasksData: null,\n    fish: 'blowFish',\n\n    dataRequestDetails: {\n      handlerChoice: false,\n      dataLocation: null,\n      index: null,\n      id: null,\n      value: null\n    }\n  };\n\n  //Now deals with syllabusData strictly\n  sendSyllabusDataHandler = handlerChoice => {\n    this.setState({ syllabusHandlerChoice: handlerChoice });\n    console.log('Inside of sendSyllabusDataHandler');\n  };\n\n  receiveSyllabusDataHandler = dataBase => {\n    switch (dataBase.dataBaseName) {\n      case 'syllabus':\n        this.setState(\n          {\n            syllabusData: dataBase,\n            syllabusHandlerChoice: '0'\n          },\n          () => {\n            console.log(this.state.syllabusData.lastLessonHeader);\n          }\n        );\n        break;\n\n      case 'tasks':\n        this.setState({\n          tasksData: dataBase,\n          tasksHandlerChoice: '0'\n        });\n        break;\n    }\n  };\n\n  //dataRequestHandler = (event, typeOfData, handlerChoice,dataLocation,infoType, info) => {\n  dataRequestHandler = (event, dataRequestMessage) => {\n    // alert(` in Store dataRequestHandler-->  typeOfData: ${dataRequestMessage.typeOfData}\n    // handlerChoice: ${dataRequestMessage.handlerChoice}\n    // dataLocation: ${dataRequestMessage.dataLocation}\n    // infoType: ${dataRequestMessage.infoType}\n    // info: ${dataRequestMessage.info.eventTitle}`);\n    let {\n      typeOfData,\n      handlerChoice,\n      dataLocation,\n      infoType,\n      info\n    } = dataRequestMessage;\n\n    let index = null;\n    let id = null;\n    let value = '';\n    let dataRequestDetails = null;\n    //let inspection = event.value;\n    switch (typeOfData) {\n      case 'tasks':\n        switch (infoType) {\n          case 'index':\n            index = info;\n            value = event.target.value;\n            break;\n          case 'id':\n            id = info;\n            value = event.target.value;\n            alert(`inside Store value: ${value}`);\n            break;\n          case 'pickedDayTasks':\n            value = null;\n            break;\n        }\n        //alert('inside typeOfData of tasks ');\n        dataRequestDetails = {\n          handlerChoice: handlerChoice,\n          index: index,\n          id: id,\n          value: value,\n          typeOfData: typeOfData,\n          dataLocation: dataLocation\n        };\n        break;\n      case 'events':\n        //alert('inside store case events');\n        dataRequestDetails = {\n          handlerChoice: handlerChoice,\n          index: index,\n          id: id,\n          typeOfData: typeOfData,\n          dataLocation: dataLocation,\n          value: info\n        };\n        break;\n      case 'syllabus':\n        // alert(\n        //   `inside Store syllabus case ${typeOfData} handlerChoice:${handlerChoice} dataLocation: ${dataLocation} info: ${info}`\n        // );\n\n        switch (infoType) {\n          case 'index':\n            index = info;\n            //value = event.target.value;\n            break;\n          case 'id':\n            id = info;\n            value = event.target.value;\n            break;\n        }\n\n        dataRequestDetails = {\n          handlerChoice: handlerChoice,\n          index: index,\n          id: id,\n          dataLocation: dataLocation,\n          typeOfData: typeOfData,\n          value: value\n        };\n        break;\n    }\n\n    //event, index, handlerType\n    this.setState({\n      dataRequestDetails: dataRequestDetails\n    });\n  };\n\n  dataReceiverHandler = dataBase => {\n    switch (dataBase.dataBaseName) {\n      case 'syllabus':\n        this.setState({\n          syllabusData: dataBase\n        });\n        break;\n\n      case 'tasks':\n        this.setState({\n          tasksData: dataBase\n        });\n\n        break;\n    }\n  };\n\n  resetHandlerChoice = () => {\n    this.setState({\n      dataRequestDetails: {\n        handlerChoice: '0',\n        typeOfData: '',\n        index: null,\n        id: null,\n        value: ''\n      }\n    });\n  };\n\n  render() {\n    // let displayMessage = null;\n    // if (this.state.syllabusHandlerChoice === '0') {\n    //   displayMessage = <div>Hey syllabusHandlerchoice is recorded</div>;\n    // }\n    // Layout wrap displayed\n    return (\n      <Aux>\n        <Layout>\n          <CalendarContext.Provider\n            value={{\n              resetHandlerChoice: this.resetHandlerChoice,\n              everythingCalendar: this.state,\n              dataRequestHandler: this.dataRequestHandler,\n              dataRequestDetails: this.state.dataRequestDetails,\n              dataReceiverHandler: this.dataReceiverHandler\n            }}\n          >\n            {/* <Calendar /> */}\n\n            <SyllabusContext.Provider\n              value={{\n                resetHandlerChoice: this.resetHandlerChoice,\n                everythingSyllabus: this.state,\n                dataRequestHandler: this.dataRequestHandler,\n                dataRequestDetails: this.state.dataRequestDetails,\n                dataReceiverHandler: this.dataReceiverHandler\n              }}\n            >\n              <SyllabusData></SyllabusData>\n\n              <TasksDataContext.Provider\n                value={{\n                  crunk: this.state.crunk,\n                  dataReceiverHandler: this.dataReceiverHandler,\n                  dataRequestHandler: this.dataRequestHandler,\n                  dataRequestDetails: this.state.dataRequestDetails,\n                  tasksData: this.state,\n                  resetHandlerChoice: this.resetHandlerChoice,\n                  newDataHandler: this.newDataHandler\n                }}\n              >\n                <TasksData\n                  showLeftOverTasksForWeek={this.state.showLeftOverTasksForWeek}\n                  dataRequestDetails={this.state.dataRequestDetails}\n                />\n                <RightCockpit crunk={this.state.crunk}></RightCockpit>\n              </TasksDataContext.Provider>\n            </SyllabusContext.Provider>\n          </CalendarContext.Provider>\n        </Layout>\n      </Aux>\n    );\n  }\n}\n\nexport default Store;\n"]},"metadata":{},"sourceType":"module"}