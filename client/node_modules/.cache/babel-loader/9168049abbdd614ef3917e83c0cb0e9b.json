{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport rocky from './App.module.css';\nimport Tasks from '../components/Tasks/Tasks'; //import Task from '../components/Tasks/Task/Task'\n\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport Cockpit2 from '../components/Cockpit/Cockpit2';\nimport Navbar2 from '../components/Cockpit/Navbar/Navbar2';\nimport '../components/Tasks/Task/Task';\nimport TodayTasks from '../components/TodayTasks/TodayTasks'; //import MaxReact from '../components/Syllabus/MaxReact'\n\nimport WithClass from '../hoc/WithClass';\nimport NewTaskContext from '../context/newTask-context'; //import DataStructure from './DataStructure';\n//import Student from './Student.css';\n//import StudentTable from './StudentTable'\n// import StudentTable from './StudentTable';\n//import Navbar from '../components/Cockpit/navBar';\n//import Syllabus from '../components/Syllabus/Syllabus';\n//import for bootstraps\n// import axios from 'axios';\n// import { Container, Row, Col } from 'reactstrap';\n// import Post from '../components/Post';\n// import Header from '../components/Header';\n// import SideCard from '../components/SideCard';\n\nclass App extends Component {\n  constructor(props) {\n    // const bigDaddy = {...this.DataStructure}\n    // console.log(bigDaddy.state.ShowView)\n    super(props);\n    this.state = {\n      tasks: [{\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      }, {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      }, {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }],\n      lastHeader: [],\n      lastTodayTasksHeader: [],\n      maxReact: [{\n        id: 'xvlwil',\n        lesson: '90. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbskk',\n        lesson: '91. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      Monday: [{\n        id: 'morning',\n        timeOfDay: '',\n        task: ''\n      }, {\n        id: 'afternoon',\n        timeOfDay: '',\n        task: 'eat lunch'\n      }, {\n        id: 'evening',\n        timeOfDay: '',\n        task: 'play ball'\n      }],\n      Tuesday: [{\n        id: 'morning',\n        task: ''\n      }, {\n        id: 'afternoon',\n        task: ''\n      }, {\n        id: 'evening',\n        task: ''\n      }],\n      showTasks: false,\n      reRenderTasks: false,\n      reRenderTodayTasks: false,\n      showTasksToday: false,\n      showCockpit: true,\n      showCockpit2: true,\n      showView: '0',\n      showNewTask: false,\n      showSyllabusFromNav: false,\n      students: [{\n        id: 1,\n        name: 'Wasif',\n        age: 21,\n        email: 'wasif@email.com'\n      }, {\n        id: 2,\n        name: 'Ali',\n        age: 19,\n        email: 'ali@email.com'\n      }, {\n        id: 3,\n        name: 'Saad',\n        age: 16,\n        email: 'saad@email.com'\n      }, {\n        id: 4,\n        name: 'Asad',\n        age: 25,\n        email: 'asad@email.com'\n      }],\n      contentChoice: '0'\n    };\n\n    this.contentViewHandler = event => {\n      let newViewChoice = event.target.value;\n      console.log(newViewChoice); //Comparing new contentChoice with previous contentChoice\n      //if newContentChoice === oldContentChoice\n      //turn off the view\n\n      if (newViewChoice === this.state.contentChoice) {\n        return this.setState({\n          contentChoice: '0'\n        });\n      } else {\n        //Setting which Content view to show\n        //there will be only 1 contentChoice stored in state\n        switch (newViewChoice) {\n          case '0':\n            //only cockpit\n            this.setState({\n              contentChoice: '0'\n            });\n            break;\n\n          case '1':\n            //All tasks\n            this.setState({\n              contentChoice: '1'\n            });\n            break;\n\n          case '2':\n            //TodaysTasks\n            this.setState({\n              contentChoice: '2'\n            });\n            break;\n\n          case '3':\n            //Syllabus\n            this.setState({\n              contentChoice: '3'\n            });\n            break;\n        }\n      } //Setting the lastHeader for each contentChoice\n      //there will be 3 diff. lastHeader depending on # of dif lists to be displayed\n\n\n      switch (this.state.contentChoice) {\n        case '0':\n          //only cockpit\n          break;\n\n        case '1':\n          //All tasks\n          if (!this.state.lastHeader) {\n            console.log('Yo MATE IM TESTING THE LASTHEADER');\n            this.setState({\n              lastHeader: this.state.tasks[0]\n            });\n          }\n\n          break;\n\n        case '2':\n          //TodaysTasks\n          this.setState({\n            lastTodayTasksHeader: this.state.Monday[0]\n          });\n          break;\n\n        case '3':\n          //Syllabus\n          this.setState({\n            lastSyllabusHeader: 'this.state.maxReact[0]'\n          });\n          break;\n      }\n    };\n\n    this.toggleShowTasksHandler = () => {\n      if (this.state.tasks != 0) {\n        this.setState({\n          lastHeader: this.state.tasks[0]\n        });\n      } else {\n        this.setState({\n          lastHeader: this.state.lastHeader\n        });\n      } //old way of showing all tasks\n\n\n      const doesShow = this.state.showTasks;\n      this.setState({\n        showTasks: !doesShow\n      }); //this allows to either show <Tasks> or <TodayTasks> at one time (not both at the same time)\n      //showView = '0' => showing Regular rightcockpit\n      //showView = '1' => showing AllTasks\n      //showView = '2' => showing TodaysTasks\n      //showView = '0' => showing <cockpit2> Syllabus (Reactmax)\n\n      switch (this.state.showView) {\n        case '0':\n          this.setState({\n            showView: '1'\n          });\n          break;\n\n        case '1':\n          this.setState({\n            showView: '0'\n          });\n          break;\n\n        case '2':\n          this.setState({\n            showView: '1'\n          });\n          break;\n      } //tryout\n\n\n      const Monday = [...this.state.Monday];\n      Monday[0].task = 'higher love';\n      this.setState({\n        Monday: Monday\n      });\n    };\n\n    this.deleteTaskhandler = taskIndex => {\n      alert('Are you sure you want to delete this task?');\n      this.setState({\n        reRenderTasks: true\n      }); //get tasks array\n\n      const tasks = [...this.state.tasks]; //splice task of interst\n\n      tasks.splice(taskIndex, 1); //update new list of tasks to state\n\n      this.setState({\n        tasks: tasks\n      }); //this.setState({ showTasksCounter: false });\n    };\n\n    this.taskChangeHandler = (event, taskChangedId) => {\n      //find the task that matches the taskChangedId\n      const foundTaskId = this.state.tasks.findIndex(currentId => {\n        return currentId.id === taskChangedId;\n      }); //create new task item that we will put into array\n\n      const updatedTask = _objectSpread({}, this.state.tasks[foundTaskId]);\n\n      updatedTask.todo = event.target.value; //pull out the states tasks array\n\n      const tasks = [...this.state.tasks]; //update the task with id of interest w/ new task description\n\n      tasks[foundTaskId] = updatedTask; //update the state\n\n      this.setState({\n        tasks: tasks\n      });\n    };\n\n    this.displayTodayScheduleHandler = () => {\n      if (this.state.Monday != 0) {\n        this.setState({\n          lastTodayTasksHeader: this.state.Monday[0]\n        });\n      } else {\n        this.setState({\n          lastTodayTasksHeader: this.state.lastTodayTasksHeader\n        });\n      } //this allows to either show <Tasks> or <TodayTasks> at one time (not both at the same time)\n      //showView = '0' => showing Regular rightcockpit\n      //showView = '1' => showing AllTasks\n      //showView = '2' => showing TodaysTasks\n      //showView = '0' => showing <cockpit2> Syllabus (Reactmax)\n\n\n      switch (this.state.showView) {\n        case '0':\n          this.setState({\n            showView: '2'\n          });\n          break;\n\n        case '1':\n          this.setState({\n            showView: '2'\n          });\n          break;\n\n        case '2':\n          this.setState({\n            showView: '0'\n          });\n          break;\n\n        case '3':\n          this.setState({\n            showView: '2'\n          });\n          break;\n      } //pull out the states tasks array\n\n\n      const Monday = [...this.state.Monday]; //update the task with id of interest w/ new task description\n\n      Monday[0].task = 'higher love';\n      /*old way of showing Today's Tasks\n      const doesShowToday = this.state.showTasksToday;\n      this.setState({ showTasksToday: !doesShowToday });\n      */\n    };\n\n    this.renderTableDataHandler = () => {\n      return this.state.students.map((student, index) => {\n        const id = student.id,\n              name = student.name,\n              age = student.age,\n              email = student.email; //destructuring\n\n        return React.createElement(\"tr\", {\n          key: id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 306\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 307\n          },\n          __self: this\n        }, id), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 308\n          },\n          __self: this\n        }, name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309\n          },\n          __self: this\n        }, age), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 310\n          },\n          __self: this\n        }, email));\n      });\n    };\n\n    this.renderTableHeaderHandler = () => {\n      let header = Object.keys(this.state.students[0]);\n      return header.map((key, index) => {\n        return React.createElement(\"th\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 319\n          },\n          __self: this\n        }, key.toUpperCase());\n      });\n    };\n\n    this.deleteTodayTaskhandler = taskIndex => {\n      alert('Are you sure you want to delete this task?');\n      this.setState({\n        reRenderTodayTasks: true\n      }); //get tasks array\n\n      const Monday = [...this.state.Monday]; //splice task of interst\n\n      Monday.splice(taskIndex, 1); //update new list of tasks to state\n\n      this.setState({\n        Monday: Monday\n      }); //this.setState({ showTasksCounter: false });\n    };\n\n    this.showSyllabusHandler = () => {\n      let doesShow = this.state.showSyllabusFromNav;\n      this.setState({\n        showSyllabusFromNav: !doesShow\n      });\n\n      switch (this.state.showView) {\n        case '0':\n          this.setState({\n            showView: '3'\n          });\n          break;\n\n        case '1':\n          this.setState({\n            showView: '3'\n          });\n          break;\n\n        case '2':\n          this.setState({\n            showView: '3'\n          });\n          break;\n\n        case '3':\n          this.setState({\n            showView: '0'\n          });\n          break;\n      }\n    };\n  }\n\n  // componentWillMount() {\n  //   console.log('[App.js] componentWillMount')\n  // }\n  //(year, month, day, hours, minutes, seconds, milliseconds)\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[App.js] shouldComponentUpdate'); // let currentShowTaskStatus = this.state.showTasksCounter;\n    // if (nextState.tasks.length !== this.state.tasks.length) {\n    //   this.setState({ showTasksCounter: false });\n    // }\n\n    return true;\n  }\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount');\n  }\n\n  componentDidUpdate(nextProps, nextState) {\n    console.log('[App.js] componentDidUpdate ');\n\n    if (nextState.tasks.length !== this.state.tasks.length) {\n      this.setState({\n        reRenderTasks: false\n      });\n    }\n  } // if (this.state.tasks.length >= 1) {\n  //   this.setState({ lastHeader: this.state.tasks[0] });\n  // }\n  // console.log(`I'm in the deleteTaskHandler ${this.state.lastHeader}`);\n  //show list of tasks\n\n\n  render() {\n    let displayTasks = null; //clicking on the show Tasks button to show available tasks\n    //tasks, clicked, changed will be sent to <Tasks>\n\n    switch (this.state.showView) {\n      case '1':\n        displayTasks = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 370\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 371\n          },\n          __self: this\n        }, \"tasks has # \", this.state.tasks.length), React.createElement(Tasks, {\n          reRenderTasks: this.state.reRenderTasks,\n          tasks: this.state.tasks,\n          clicked: this.deleteTaskhandler,\n          changed: this.taskChangeHandler,\n          lastHeader: this.state.lastHeader,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372\n          },\n          __self: this\n        }));\n        break;\n\n      case '2':\n        displayTasks = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 385\n          },\n          __self: this\n        }, React.createElement(TodayTasks, {\n          reRenderTodayTasks: this.state.reRenderTodayTasks,\n          lastTodayTasksHeader: this.state.lastTodayTasksHeader,\n          clicked: this.deleteTodayTaskhandler,\n          changed: this.todayTaskChangeHandler,\n          monday: this.state.Monday,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 386\n          },\n          __self: this\n        }));\n        break;\n\n      case '3':\n        displayTasks = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 399\n          },\n          __self: this\n        }, React.createElement(Cockpit2, {\n          showSyllabusFromNav: this.state.showSyllabusFromNav,\n          tasks: this.state.tasks,\n          deleteCockpit2: () => {\n            this.setState({\n              showCockpit2: false\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 400\n          },\n          __self: this\n        }));\n    }\n\n    let leftCockpit = null;\n\n    if (this.state.showCockpit == true) {\n      leftCockpit = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      }, React.createElement(Cockpit, {\n        title: this.props.appTitle,\n        allTasksClicked: this.toggleShowTasksHandler,\n        tasksLength: this.state.tasks.length,\n        todayTasksClicked: this.displayTodayScheduleHandler,\n        deleteCockpit: () => {\n          this.setState({\n            showCockpit: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }));\n    }\n\n    let rightCockpit = null;\n\n    if (this.state.showCockpit2 == true) {\n      rightCockpit = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        },\n        __self: this\n      }, React.createElement(Cockpit2, {\n        showSyllabusFromNav: this.state.showSyllabusFromNav,\n        tasks: this.state.tasks,\n        deleteCockpit2: () => {\n          this.setState({\n            showCockpit2: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433\n        },\n        __self: this\n      }));\n    }\n\n    let tasklength = this.state.tasks.length; //Trying out toggleShowTasksHandler\n\n    let displayContent = null;\n\n    switch (this.state.contentChoice) {\n      case '0':\n        break;\n\n      case '1':\n        displayContent = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 456\n          },\n          __self: this\n        }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 457\n          },\n          __self: this\n        }, \"tasks\\xA0has\\xA0#\\xA0\", this.state.tasks.length), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", React.createElement(Tasks, {\n          reRenderTasks: this.state.reRenderTasks,\n          tasks: this.state.tasks,\n          clicked: this.deleteTaskhandler,\n          changed: this.taskChangeHandler,\n          lastHeader: this.state.lastHeader,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 459\n          },\n          __self: this\n        }), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\");\n        break;\n\n      case '2':\n        displayContent = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 473\n          },\n          __self: this\n        }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", React.createElement(TodayTasks, {\n          reRenderTodayTasks: this.state.reRenderTodayTasks,\n          lastTodayTasksHeader: this.state.lastTodayTasksHeader,\n          clicked: this.deleteTodayTaskhandler,\n          changed: this.todayTaskChangeHandler,\n          monday: this.state.Monday,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 475\n          },\n          __self: this\n        }), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\");\n        break;\n\n      case '3':\n        displayContent = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 489\n          },\n          __self: this\n        }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", React.createElement(Cockpit2, {\n          showSyllabusFromNav: this.state.showSyllabusFromNav,\n          tasks: this.state.tasks,\n          deleteCockpit2: () => {\n            this.setState({\n              showCockpit2: false\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 491\n          },\n          __self: this\n        }), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\");\n        break;\n    }\n\n    return React.createElement(WithClass, {\n      passClass: rocky.App,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(Navbar2, {\n      syllabusClicked: this.showSyllabusHandler,\n      title: this.props.appTitle,\n      allTasksClicked: this.toggleShowTasksHandler,\n      tasksLength: this.state.tasks.length,\n      todayTasksClicked: this.contentViewHandler,\n      deleteCockpit: () => {\n        this.setState({\n          showCockpit: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"btn-group btn-group-toggle\",\n      \"data-toggle\": \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"btn btn-danger m-1 active\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"radio\",\n      name: \"options\",\n      id: \"option1\",\n      autoComplete: \"off\",\n      onClick: event => this.contentViewHandler(event),\n      value: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }), ' ', \"Cockpit\"), React.createElement(\"label\", {\n      className: \"btn btn-primary m-1 active\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"radio\",\n      name: \"options\",\n      id: \"option1\",\n      autoComplete: \"off\",\n      onClick: event => this.contentViewHandler(event),\n      value: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }), ' ', \"All Tasks\"), React.createElement(\"label\", {\n      className: \"btn btn-success m-1 active \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"radio\",\n      name: \"options\",\n      id: \"option2\",\n      autoComplete: \"off\",\n      onClick: event => this.contentViewHandler(event),\n      value: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }), ' ', \"Todays Tasks\"), React.createElement(\"label\", {\n      className: \"btn btn-warning m-1 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"radio\",\n      name: \"options\",\n      id: \"option3\",\n      autoComplete: \"off\",\n      onClick: event => this.contentViewHandler(event),\n      value: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }), ' ', \"React Syllabus\"))), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"d-flex flex-row \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card text-white bg-info m-1 p-1 col-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"p-1 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }, leftCockpit)), React.createElement(\"div\", {\n      className: \"card bg-light m-1 p-1 col-9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"p-1 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }, displayContent)))));\n  }\n\n} //{displayContent}\n//{displayTasks}\n\n\nApp.getDerivedStateFromProps = (state, props) => {\n  console.log('[App.js] getDerivedStateFromProps', props);\n  return state;\n};\n\nexport default App; //<div className=\"p-1 \">{rightCockpit}</div>\n//<div className=\"d-flex flex-column \"></div>;\n//<p className={rocky[classes]}>Things to Do!</p>\n//using css modules on multiple classNames\n//{classNames({[styles.foo]: true, [styles.bar]: true})}\n//<p className={classNames({[rocky[classes]]: true, [rocky.red]: true})}>Things to Do!</p>\n\n/*old way of displaying\n<WithClass passClass={rocky.App}>\n        <button\n          onClick={() => {\n            this.setState({ showCockpit: false });\n          }}\n        >\n          {' '}\n          Remove Cockpit\n        </button>\n\n        {this.state.showCockpit ? (\n          <Cockpit\n            title={this.props.appTitle}\n            clicked={this.toggleShowTasksHandler}\n            tasksLength={this.state.tasks.length}\n            todayClicked={this.displayTodayScheduleHandler}\n          />\n        ) : null}\n\n        {displayTasks}\n      </WithClass>\n      */\n//    <div>\n//    <h1 id=\"title\">React Dynamic Table</h1>\n//    <table id=\"students\">\n//      <tbody>\n//        <tr>{this.renderTableHeaderHandler()}</tr>\n//        {this.renderTableDataHandler()}\n//      </tbody>\n//    </table>\n//  </div>","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/App.js"],"names":["React","Component","rocky","Tasks","Cockpit","Cockpit2","Navbar2","TodayTasks","WithClass","NewTaskContext","App","constructor","props","state","tasks","id","todo","deadline","location","lastHeader","lastTodayTasksHeader","maxReact","lesson","completion","Monday","timeOfDay","task","Tuesday","showTasks","reRenderTasks","reRenderTodayTasks","showTasksToday","showCockpit","showCockpit2","showView","showNewTask","showSyllabusFromNav","students","name","age","email","contentChoice","contentViewHandler","event","newViewChoice","target","value","console","log","setState","lastSyllabusHeader","toggleShowTasksHandler","doesShow","deleteTaskhandler","taskIndex","alert","splice","taskChangeHandler","taskChangedId","foundTaskId","findIndex","currentId","updatedTask","displayTodayScheduleHandler","renderTableDataHandler","map","student","index","renderTableHeaderHandler","header","Object","keys","key","toUpperCase","deleteTodayTaskhandler","showSyllabusHandler","shouldComponentUpdate","nextProps","nextState","componentDidMount","componentDidUpdate","length","render","displayTasks","todayTaskChangeHandler","leftCockpit","appTitle","rightCockpit","tasklength","displayContent","getDerivedStateFromProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,KAAP,MAAkB,2BAAlB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,OAAP,MAAoB,sCAApB;AACA,OAAO,+BAAP;AACA,OAAOC,UAAP,MAAuB,qCAAvB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,cAAP,MAA2B,4BAA3B,C,CACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,GAAN,SAAkBT,SAAlB,CAA4B;AAC1BU,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;AACA;AACA,UAAMA,KAAN;AAHiB,SAMnBC,KANmB,GAMX;AACNC,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,EAAE,EAAE,QADN;AAEEC,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,QAAQ,EAAE,OAHZ;AAIEC,QAAAA,QAAQ,EAAE;AAJZ,OADK,EAOL;AACEH,QAAAA,EAAE,EAAE,QADN;AAEEC,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,QAAQ,EAAE,QAHZ;AAIEC,QAAAA,QAAQ,EAAE;AAJZ,OAPK,EAaL;AACEH,QAAAA,EAAE,EAAE,QADN;AAEEC,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,QAAQ,EAAE,QAHZ;AAIEC,QAAAA,QAAQ,EAAE;AAJZ,OAbK,CADD;AAqBNC,MAAAA,UAAU,EAAE,EArBN;AAsBNC,MAAAA,oBAAoB,EAAE,EAtBhB;AAuBNC,MAAAA,QAAQ,EAAE,CACR;AAAEN,QAAAA,EAAE,EAAE,QAAN;AAAgBO,QAAAA,MAAM,EAAE,yBAAxB;AAAmDC,QAAAA,UAAU,EAAE;AAA/D,OADQ,EAER;AAAER,QAAAA,EAAE,EAAE,QAAN;AAAgBO,QAAAA,MAAM,EAAE,yBAAxB;AAAmDC,QAAAA,UAAU,EAAE;AAA/D,OAFQ,EAGR;AACER,QAAAA,EAAE,EAAE,QADN;AAEEO,QAAAA,MAAM,EAAE,iDAFV;AAGEC,QAAAA,UAAU,EAAE;AAHd,OAHQ,CAvBJ;AAgCNC,MAAAA,MAAM,EAAE,CACN;AAAET,QAAAA,EAAE,EAAE,SAAN;AAAiBU,QAAAA,SAAS,EAAE,EAA5B;AAAgCC,QAAAA,IAAI,EAAE;AAAtC,OADM,EAEN;AAAEX,QAAAA,EAAE,EAAE,WAAN;AAAmBU,QAAAA,SAAS,EAAE,EAA9B;AAAkCC,QAAAA,IAAI,EAAE;AAAxC,OAFM,EAGN;AAAEX,QAAAA,EAAE,EAAE,SAAN;AAAiBU,QAAAA,SAAS,EAAE,EAA5B;AAAgCC,QAAAA,IAAI,EAAE;AAAtC,OAHM,CAhCF;AAqCNC,MAAAA,OAAO,EAAE,CACP;AAAEZ,QAAAA,EAAE,EAAE,SAAN;AAAiBW,QAAAA,IAAI,EAAE;AAAvB,OADO,EAEP;AAAEX,QAAAA,EAAE,EAAE,WAAN;AAAmBW,QAAAA,IAAI,EAAE;AAAzB,OAFO,EAGP;AAAEX,QAAAA,EAAE,EAAE,SAAN;AAAiBW,QAAAA,IAAI,EAAE;AAAvB,OAHO,CArCH;AA0CNE,MAAAA,SAAS,EAAE,KA1CL;AA2CNC,MAAAA,aAAa,EAAE,KA3CT;AA4CNC,MAAAA,kBAAkB,EAAE,KA5Cd;AA6CNC,MAAAA,cAAc,EAAE,KA7CV;AA8CNC,MAAAA,WAAW,EAAE,IA9CP;AA+CNC,MAAAA,YAAY,EAAE,IA/CR;AAgDNC,MAAAA,QAAQ,EAAE,GAhDJ;AAiDNC,MAAAA,WAAW,EAAE,KAjDP;AAkDNC,MAAAA,mBAAmB,EAAE,KAlDf;AAmDNC,MAAAA,QAAQ,EAAE,CACR;AAAEtB,QAAAA,EAAE,EAAE,CAAN;AAASuB,QAAAA,IAAI,EAAE,OAAf;AAAwBC,QAAAA,GAAG,EAAE,EAA7B;AAAiCC,QAAAA,KAAK,EAAE;AAAxC,OADQ,EAER;AAAEzB,QAAAA,EAAE,EAAE,CAAN;AAASuB,QAAAA,IAAI,EAAE,KAAf;AAAsBC,QAAAA,GAAG,EAAE,EAA3B;AAA+BC,QAAAA,KAAK,EAAE;AAAtC,OAFQ,EAGR;AAAEzB,QAAAA,EAAE,EAAE,CAAN;AAASuB,QAAAA,IAAI,EAAE,MAAf;AAAuBC,QAAAA,GAAG,EAAE,EAA5B;AAAgCC,QAAAA,KAAK,EAAE;AAAvC,OAHQ,EAIR;AAAEzB,QAAAA,EAAE,EAAE,CAAN;AAASuB,QAAAA,IAAI,EAAE,MAAf;AAAuBC,QAAAA,GAAG,EAAE,EAA5B;AAAgCC,QAAAA,KAAK,EAAE;AAAvC,OAJQ,CAnDJ;AAyDNC,MAAAA,aAAa,EAAE;AAzDT,KANW;;AAAA,SAyGnBC,kBAzGmB,GAyGEC,KAAK,IAAI;AAC5B,UAAIC,aAAa,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAjC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ,EAF4B,CAG5B;AACA;AACA;;AACA,UAAIA,aAAa,KAAK,KAAK/B,KAAL,CAAW4B,aAAjC,EAAgD;AAC9C,eAAO,KAAKQ,QAAL,CAAc;AAAER,UAAAA,aAAa,EAAE;AAAjB,SAAd,CAAP;AACD,OAFD,MAEO;AACL;AACA;AACA,gBAAQG,aAAR;AACE,eAAK,GAAL;AAAU;AACR,iBAAKK,QAAL,CAAc;AAAER,cAAAA,aAAa,EAAE;AAAjB,aAAd;AACA;;AACF,eAAK,GAAL;AAAU;AACR,iBAAKQ,QAAL,CAAc;AAAER,cAAAA,aAAa,EAAE;AAAjB,aAAd;AACA;;AACF,eAAK,GAAL;AAAU;AACR,iBAAKQ,QAAL,CAAc;AAAER,cAAAA,aAAa,EAAE;AAAjB,aAAd;AACA;;AACF,eAAK,GAAL;AAAU;AACR,iBAAKQ,QAAL,CAAc;AAAER,cAAAA,aAAa,EAAE;AAAjB,aAAd;AACA;AAZJ;AAcD,OAzB2B,CA2B5B;AACA;;;AACA,cAAQ,KAAK5B,KAAL,CAAW4B,aAAnB;AACE,aAAK,GAAL;AAAU;AACR;;AACF,aAAK,GAAL;AAAU;AACR,cAAI,CAAC,KAAK5B,KAAL,CAAWM,UAAhB,EAA4B;AAC1B4B,YAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACA,iBAAKC,QAAL,CAAc;AAAE9B,cAAAA,UAAU,EAAE,KAAKN,KAAL,CAAWC,KAAX,CAAiB,CAAjB;AAAd,aAAd;AACD;;AACD;;AACF,aAAK,GAAL;AAAU;AACR,eAAKmC,QAAL,CAAc;AAAE7B,YAAAA,oBAAoB,EAAE,KAAKP,KAAL,CAAWW,MAAX,CAAkB,CAAlB;AAAxB,WAAd;AACA;;AACF,aAAK,GAAL;AAAU;AACR,eAAKyB,QAAL,CAAc;AAAEC,YAAAA,kBAAkB,EAAE;AAAtB,WAAd;AACA;AAdJ;AAgBD,KAtJkB;;AAAA,SAwJnBC,sBAxJmB,GAwJM,MAAM;AAC7B,UAAI,KAAKtC,KAAL,CAAWC,KAAX,IAAoB,CAAxB,EAA2B;AACzB,aAAKmC,QAAL,CAAc;AAAE9B,UAAAA,UAAU,EAAE,KAAKN,KAAL,CAAWC,KAAX,CAAiB,CAAjB;AAAd,SAAd;AACD,OAFD,MAEO;AACL,aAAKmC,QAAL,CAAc;AAAE9B,UAAAA,UAAU,EAAE,KAAKN,KAAL,CAAWM;AAAzB,SAAd;AACD,OAL4B,CAO7B;;;AACA,YAAMiC,QAAQ,GAAG,KAAKvC,KAAL,CAAWe,SAA5B;AACA,WAAKqB,QAAL,CAAc;AAAErB,QAAAA,SAAS,EAAE,CAACwB;AAAd,OAAd,EAT6B,CAW7B;AAEA;AACA;AACA;AACA;;AACA,cAAQ,KAAKvC,KAAL,CAAWqB,QAAnB;AACE,aAAK,GAAL;AACE,eAAKe,QAAL,CAAc;AAAEf,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACA;;AAEF,aAAK,GAAL;AACE,eAAKe,QAAL,CAAc;AAAEf,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACA;;AAEF,aAAK,GAAL;AACE,eAAKe,QAAL,CAAc;AAAEf,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACA;AAXJ,OAjB6B,CA+B7B;;;AACA,YAAMV,MAAM,GAAG,CAAC,GAAG,KAAKX,KAAL,CAAWW,MAAf,CAAf;AAEAA,MAAAA,MAAM,CAAC,CAAD,CAAN,CAAUE,IAAV,GAAiB,aAAjB;AAEA,WAAKuB,QAAL,CAAc;AAAEzB,QAAAA,MAAM,EAAEA;AAAV,OAAd;AACD,KA7LkB;;AAAA,SAgMnB6B,iBAhMmB,GAgMCC,SAAS,IAAI;AAC/BC,MAAAA,KAAK,CAAC,4CAAD,CAAL;AACA,WAAKN,QAAL,CAAc;AAAEpB,QAAAA,aAAa,EAAE;AAAjB,OAAd,EAF+B,CAI/B;;AACA,YAAMf,KAAK,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,KAAf,CAAd,CAL+B,CAO/B;;AACAA,MAAAA,KAAK,CAAC0C,MAAN,CAAaF,SAAb,EAAwB,CAAxB,EAR+B,CAU/B;;AACA,WAAKL,QAAL,CAAc;AAAEnC,QAAAA,KAAK,EAAEA;AAAT,OAAd,EAX+B,CAa/B;AACD,KA9MkB;;AAAA,SAiNnB2C,iBAjNmB,GAiNC,CAACd,KAAD,EAAQe,aAAR,KAA0B;AAC5C;AACA,YAAMC,WAAW,GAAG,KAAK9C,KAAL,CAAWC,KAAX,CAAiB8C,SAAjB,CAA2BC,SAAS,IAAI;AAC1D,eAAOA,SAAS,CAAC9C,EAAV,KAAiB2C,aAAxB;AACD,OAFmB,CAApB,CAF4C,CAM5C;;AACA,YAAMI,WAAW,qBAAQ,KAAKjD,KAAL,CAAWC,KAAX,CAAiB6C,WAAjB,CAAR,CAAjB;;AACAG,MAAAA,WAAW,CAAC9C,IAAZ,GAAmB2B,KAAK,CAACE,MAAN,CAAaC,KAAhC,CAR4C,CAU5C;;AACA,YAAMhC,KAAK,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,KAAf,CAAd,CAX4C,CAa5C;;AACAA,MAAAA,KAAK,CAAC6C,WAAD,CAAL,GAAqBG,WAArB,CAd4C,CAgB5C;;AACA,WAAKb,QAAL,CAAc;AAAEnC,QAAAA,KAAK,EAAEA;AAAT,OAAd;AACD,KAnOkB;;AAAA,SAuOnBiD,2BAvOmB,GAuOW,MAAM;AAClC,UAAI,KAAKlD,KAAL,CAAWW,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,aAAKyB,QAAL,CAAc;AAAE7B,UAAAA,oBAAoB,EAAE,KAAKP,KAAL,CAAWW,MAAX,CAAkB,CAAlB;AAAxB,SAAd;AACD,OAFD,MAEO;AACL,aAAKyB,QAAL,CAAc;AAAE7B,UAAAA,oBAAoB,EAAE,KAAKP,KAAL,CAAWO;AAAnC,SAAd;AACD,OALiC,CAOlC;AACA;AACA;AACA;AACA;;;AAEA,cAAQ,KAAKP,KAAL,CAAWqB,QAAnB;AACE,aAAK,GAAL;AACE,eAAKe,QAAL,CAAc;AAAEf,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACA;;AAEF,aAAK,GAAL;AACE,eAAKe,QAAL,CAAc;AAAEf,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACA;;AAEF,aAAK,GAAL;AACE,eAAKe,QAAL,CAAc;AAAEf,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACA;;AAEF,aAAK,GAAL;AACE,eAAKe,QAAL,CAAc;AAAEf,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACA;AAfJ,OAbkC,CA+BlC;;;AACA,YAAMV,MAAM,GAAG,CAAC,GAAG,KAAKX,KAAL,CAAWW,MAAf,CAAf,CAhCkC,CAkClC;;AACAA,MAAAA,MAAM,CAAC,CAAD,CAAN,CAAUE,IAAV,GAAiB,aAAjB;AAEA;;;;AAID,KAhRkB;;AAAA,SAkRnBsC,sBAlRmB,GAkRM,MAAM;AAC7B,aAAO,KAAKnD,KAAL,CAAWwB,QAAX,CAAoB4B,GAApB,CAAwB,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAAA,cACzCpD,EADyC,GAChBmD,OADgB,CACzCnD,EADyC;AAAA,cACrCuB,IADqC,GAChB4B,OADgB,CACrC5B,IADqC;AAAA,cAC/BC,GAD+B,GAChB2B,OADgB,CAC/B3B,GAD+B;AAAA,cAC1BC,KAD0B,GAChB0B,OADgB,CAC1B1B,KAD0B,EACP;;AAC1C,eACE;AAAI,UAAA,GAAG,EAAEzB,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,EAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKuB,IAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKC,GAAL,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKC,KAAL,CAJF,CADF;AAQD,OAVM,CAAP;AAWD,KA9RkB;;AAAA,SAgSnB4B,wBAhSmB,GAgSQ,MAAM;AAC/B,UAAIC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAK1D,KAAL,CAAWwB,QAAX,CAAoB,CAApB,CAAZ,CAAb;AACA,aAAOgC,MAAM,CAACJ,GAAP,CAAW,CAACO,GAAD,EAAML,KAAN,KAAgB;AAChC,eAAO;AAAI,UAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAiBK,GAAG,CAACC,WAAJ,EAAjB,CAAP;AACD,OAFM,CAAP;AAGD,KArSkB;;AAAA,SAuSnBC,sBAvSmB,GAuSMpB,SAAS,IAAI;AACpCC,MAAAA,KAAK,CAAC,4CAAD,CAAL;AACA,WAAKN,QAAL,CAAc;AAAEnB,QAAAA,kBAAkB,EAAE;AAAtB,OAAd,EAFoC,CAIpC;;AACA,YAAMN,MAAM,GAAG,CAAC,GAAG,KAAKX,KAAL,CAAWW,MAAf,CAAf,CALoC,CAOpC;;AACAA,MAAAA,MAAM,CAACgC,MAAP,CAAcF,SAAd,EAAyB,CAAzB,EARoC,CAUpC;;AACA,WAAKL,QAAL,CAAc;AAAEzB,QAAAA,MAAM,EAAEA;AAAV,OAAd,EAXoC,CAapC;AACD,KArTkB;;AAAA,SAuTnBmD,mBAvTmB,GAuTG,MAAM;AAC1B,UAAIvB,QAAQ,GAAG,KAAKvC,KAAL,CAAWuB,mBAA1B;AACA,WAAKa,QAAL,CAAc;AAAEb,QAAAA,mBAAmB,EAAE,CAACgB;AAAxB,OAAd;;AACA,cAAQ,KAAKvC,KAAL,CAAWqB,QAAnB;AACE,aAAK,GAAL;AACE,eAAKe,QAAL,CAAc;AAAEf,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACA;;AAEF,aAAK,GAAL;AACE,eAAKe,QAAL,CAAc;AAAEf,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACA;;AAEF,aAAK,GAAL;AACE,eAAKe,QAAL,CAAc;AAAEf,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACA;;AAEF,aAAK,GAAL;AACE,eAAKe,QAAL,CAAc;AAAEf,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACA;AAfJ;AAiBD,KA3UkB;AAIlB;;AAmED;AACA;AACA;AAEA;AAEA0C,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1C/B,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAD0C,CAE1C;AACA;AACA;AACA;;AACA,WAAO,IAAP;AACD;;AAED+B,EAAAA,iBAAiB,GAAG;AAClBhC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD;;AAEDgC,EAAAA,kBAAkB,CAACH,SAAD,EAAYC,SAAZ,EAAuB;AACvC/B,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;;AACA,QAAI8B,SAAS,CAAChE,KAAV,CAAgBmE,MAAhB,KAA2B,KAAKpE,KAAL,CAAWC,KAAX,CAAiBmE,MAAhD,EAAwD;AACtD,WAAKhC,QAAL,CAAc;AAAEpB,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACD;AACF,GAhGyB,CAkG1B;AACA;AACA;AAEA;AAEA;;;AAsOAqD,EAAAA,MAAM,GAAG;AACP,QAAIC,YAAY,GAAG,IAAnB,CADO,CAGP;AACA;;AAEA,YAAQ,KAAKtE,KAAL,CAAWqB,QAAnB;AACE,WAAK,GAAL;AACEiD,QAAAA,YAAY,GACV,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAgB,KAAKtE,KAAL,CAAWC,KAAX,CAAiBmE,MAAjC,CADF,EAEE,oBAAC,KAAD;AACE,UAAA,aAAa,EAAE,KAAKpE,KAAL,CAAWgB,aAD5B;AAEE,UAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWC,KAFpB;AAGE,UAAA,OAAO,EAAE,KAAKuC,iBAHhB;AAIE,UAAA,OAAO,EAAE,KAAKI,iBAJhB;AAKE,UAAA,UAAU,EAAE,KAAK5C,KAAL,CAAWM,UALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CADF;AAYA;;AAEF,WAAK,GAAL;AACEgE,QAAAA,YAAY,GACV,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,UAAD;AACE,UAAA,kBAAkB,EAAE,KAAKtE,KAAL,CAAWiB,kBADjC;AAEE,UAAA,oBAAoB,EAAE,KAAKjB,KAAL,CAAWO,oBAFnC;AAGE,UAAA,OAAO,EAAE,KAAKsD,sBAHhB;AAIE,UAAA,OAAO,EAAE,KAAKU,sBAJhB;AAKE,UAAA,MAAM,EAAE,KAAKvE,KAAL,CAAWW,MALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAWA;;AAEF,WAAK,GAAL;AACE2D,QAAAA,YAAY,GACV,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,QAAD;AACE,UAAA,mBAAmB,EAAE,KAAKtE,KAAL,CAAWuB,mBADlC;AAEE,UAAA,KAAK,EAAE,KAAKvB,KAAL,CAAWC,KAFpB;AAGE,UAAA,cAAc,EAAE,MAAM;AACpB,iBAAKmC,QAAL,CAAc;AAAEhB,cAAAA,YAAY,EAAE;AAAhB,aAAd;AACD,WALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AA/BJ;;AA4CA,QAAIoD,WAAW,GAAG,IAAlB;;AACA,QAAI,KAAKxE,KAAL,CAAWmB,WAAX,IAA0B,IAA9B,EAAoC;AAClCqD,MAAAA,WAAW,GACT,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,OAAD;AACE,QAAA,KAAK,EAAE,KAAKzE,KAAL,CAAW0E,QADpB;AAEE,QAAA,eAAe,EAAE,KAAKnC,sBAFxB;AAGE,QAAA,WAAW,EAAE,KAAKtC,KAAL,CAAWC,KAAX,CAAiBmE,MAHhC;AAIE,QAAA,iBAAiB,EAAE,KAAKlB,2BAJ1B;AAKE,QAAA,aAAa,EAAE,MAAM;AACnB,eAAKd,QAAL,CAAc;AAAEjB,YAAAA,WAAW,EAAE;AAAf,WAAd;AACD,SAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAaD;;AAED,QAAIuD,YAAY,GAAG,IAAnB;;AAEA,QAAI,KAAK1E,KAAL,CAAWoB,YAAX,IAA2B,IAA/B,EAAqC;AACnCsD,MAAAA,YAAY,GACV,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,mBAAmB,EAAE,KAAK1E,KAAL,CAAWuB,mBADlC;AAEE,QAAA,KAAK,EAAE,KAAKvB,KAAL,CAAWC,KAFpB;AAGE,QAAA,cAAc,EAAE,MAAM;AACpB,eAAKmC,QAAL,CAAc;AAAEhB,YAAAA,YAAY,EAAE;AAAhB,WAAd;AACD,SALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAWD;;AAED,QAAIuD,UAAU,GAAG,KAAK3E,KAAL,CAAWC,KAAX,CAAiBmE,MAAlC,CAnFO,CAqFP;;AAEA,QAAIQ,cAAc,GAAG,IAArB;;AAEA,YAAQ,KAAK5E,KAAL,CAAW4B,aAAnB;AACE,WAAK,GAAL;AACE;;AAEF,WAAK,GAAL;AACEgD,QAAAA,cAAc,GACZ,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DACc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAAgB,KAAK5E,KAAL,CAAWC,KAAX,CAAiBmE,MAAjC,CADd,sDAGE,oBAAC,KAAD;AACE,UAAA,aAAa,EAAE,KAAKpE,KAAL,CAAWgB,aAD5B;AAEE,UAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWC,KAFpB;AAGE,UAAA,OAAO,EAAE,KAAKuC,iBAHhB;AAIE,UAAA,OAAO,EAAE,KAAKI,iBAJhB;AAKE,UAAA,UAAU,EAAE,KAAK5C,KAAL,CAAWM,UALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,6CADF;AAcA;;AAEF,WAAK,GAAL;AACEsE,QAAAA,cAAc,GACZ,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAEE,oBAAC,UAAD;AACE,UAAA,kBAAkB,EAAE,KAAK5E,KAAL,CAAWiB,kBADjC;AAEE,UAAA,oBAAoB,EAAE,KAAKjB,KAAL,CAAWO,oBAFnC;AAGE,UAAA,OAAO,EAAE,KAAKsD,sBAHhB;AAIE,UAAA,OAAO,EAAE,KAAKU,sBAJhB;AAKE,UAAA,MAAM,EAAE,KAAKvE,KAAL,CAAWW,MALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,6CADF;AAaA;;AAEF,WAAK,GAAL;AACEiE,QAAAA,cAAc,GACZ,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAEE,oBAAC,QAAD;AACE,UAAA,mBAAmB,EAAE,KAAK5E,KAAL,CAAWuB,mBADlC;AAEE,UAAA,KAAK,EAAE,KAAKvB,KAAL,CAAWC,KAFpB;AAGE,UAAA,cAAc,EAAE,MAAM;AACpB,iBAAKmC,QAAL,CAAc;AAAEhB,cAAAA,YAAY,EAAE;AAAhB,aAAd;AACD,WALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,6CADF;AAaA;AAnDJ;;AAsDA,WACE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAE/B,KAAK,CAACQ,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AACE,MAAA,eAAe,EAAE,KAAKiE,mBADxB;AAEE,MAAA,KAAK,EAAE,KAAK/D,KAAL,CAAW0E,QAFpB;AAGE,MAAA,eAAe,EAAE,KAAKnC,sBAHxB;AAIE,MAAA,WAAW,EAAE,KAAKtC,KAAL,CAAWC,KAAX,CAAiBmE,MAJhC;AAKE,MAAA,iBAAiB,EAAE,KAAKvC,kBAL1B;AAME,MAAA,aAAa,EAAE,MAAM;AACnB,aAAKO,QAAL,CAAc;AAAEjB,UAAAA,WAAW,EAAE;AAAf,SAAd;AACD,OARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,4BAAf;AAA4C,qBAAY,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,SAAS,EAAC,2BAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,YAAY,EAAC,KAJf;AAKE,MAAA,OAAO,EAAEW,KAAK,IAAI,KAAKD,kBAAL,CAAwBC,KAAxB,CALpB;AAME,MAAA,KAAK,EAAC,GANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQK,GARL,YADF,EAaE;AAAO,MAAA,SAAS,EAAC,4BAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,YAAY,EAAC,KAJf;AAKE,MAAA,OAAO,EAAEA,KAAK,IAAI,KAAKD,kBAAL,CAAwBC,KAAxB,CALpB;AAME,MAAA,KAAK,EAAC,GANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQK,GARL,cAbF,EAyBE;AAAO,MAAA,SAAS,EAAC,6BAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,YAAY,EAAC,KAJf;AAKE,MAAA,OAAO,EAAEA,KAAK,IAAI,KAAKD,kBAAL,CAAwBC,KAAxB,CALpB;AAME,MAAA,KAAK,EAAC,GANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQK,GARL,iBAzBF,EAqCE;AAAO,MAAA,SAAS,EAAC,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,YAAY,EAAC,KAJf;AAKE,MAAA,OAAO,EAAEA,KAAK,IAAI,KAAKD,kBAAL,CAAwBC,KAAxB,CALpB;AAME,MAAA,KAAK,EAAC,GANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQK,GARL,mBArCF,CADF,CAZF,EAgEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,uCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuB0C,WAAvB,CADF,CADF,EAIE;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuBI,cAAvB,CADF,CAJF,CADF,CAhEF,CADF;AA6ED;;AA1iByB,C,CA4iB5B;AACA;;;AA7iBM/E,G,CAmEGgF,wB,GAA2B,CAAC7E,KAAD,EAAQD,KAAR,KAAkB;AAClDmC,EAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDpC,KAAjD;AACA,SAAOC,KAAP;AACD,C;;AAweH,eAAeH,GAAf,C,CACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport rocky from './App.module.css';\nimport Tasks from '../components/Tasks/Tasks';\n//import Task from '../components/Tasks/Task/Task'\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport Cockpit2 from '../components/Cockpit/Cockpit2';\nimport Navbar2 from '../components/Cockpit/Navbar/Navbar2';\nimport '../components/Tasks/Task/Task';\nimport TodayTasks from '../components/TodayTasks/TodayTasks';\n//import MaxReact from '../components/Syllabus/MaxReact'\nimport WithClass from '../hoc/WithClass';\nimport NewTaskContext from '../context/newTask-context';\n//import DataStructure from './DataStructure';\n//import Student from './Student.css';\n//import StudentTable from './StudentTable'\n// import StudentTable from './StudentTable';\n//import Navbar from '../components/Cockpit/navBar';\n//import Syllabus from '../components/Syllabus/Syllabus';\n\n//import for bootstraps\n// import axios from 'axios';\n// import { Container, Row, Col } from 'reactstrap';\n// import Post from '../components/Post';\n// import Header from '../components/Header';\n// import SideCard from '../components/SideCard';\n\nclass App extends Component {\n  constructor(props) {\n    // const bigDaddy = {...this.DataStructure}\n    // console.log(bigDaddy.state.ShowView)\n    super(props);\n  }\n\n  state = {\n    tasks: [\n      {\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      },\n      {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      },\n      {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }\n    ],\n    lastHeader: [],\n    lastTodayTasksHeader: [],\n    maxReact: [\n      { id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n      { id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n      {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    Monday: [\n      { id: 'morning', timeOfDay: '', task: '' },\n      { id: 'afternoon', timeOfDay: '', task: 'eat lunch' },\n      { id: 'evening', timeOfDay: '', task: 'play ball' }\n    ],\n    Tuesday: [\n      { id: 'morning', task: '' },\n      { id: 'afternoon', task: '' },\n      { id: 'evening', task: '' }\n    ],\n    showTasks: false,\n    reRenderTasks: false,\n    reRenderTodayTasks: false,\n    showTasksToday: false,\n    showCockpit: true,\n    showCockpit2: true,\n    showView: '0',\n    showNewTask: false,\n    showSyllabusFromNav: false,\n    students: [\n      { id: 1, name: 'Wasif', age: 21, email: 'wasif@email.com' },\n      { id: 2, name: 'Ali', age: 19, email: 'ali@email.com' },\n      { id: 3, name: 'Saad', age: 16, email: 'saad@email.com' },\n      { id: 4, name: 'Asad', age: 25, email: 'asad@email.com' }\n    ],\n    contentChoice: '0'\n  };\n\n  static getDerivedStateFromProps = (state, props) => {\n    console.log('[App.js] getDerivedStateFromProps', props);\n    return state;\n  };\n\n  // componentWillMount() {\n  //   console.log('[App.js] componentWillMount')\n  // }\n\n  //(year, month, day, hours, minutes, seconds, milliseconds)\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[App.js] shouldComponentUpdate');\n    // let currentShowTaskStatus = this.state.showTasksCounter;\n    // if (nextState.tasks.length !== this.state.tasks.length) {\n    //   this.setState({ showTasksCounter: false });\n    // }\n    return true;\n  }\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount');\n  }\n\n  componentDidUpdate(nextProps, nextState) {\n    console.log('[App.js] componentDidUpdate ');\n    if (nextState.tasks.length !== this.state.tasks.length) {\n      this.setState({ reRenderTasks: false });\n    }\n  }\n\n  // if (this.state.tasks.length >= 1) {\n  //   this.setState({ lastHeader: this.state.tasks[0] });\n  // }\n\n  // console.log(`I'm in the deleteTaskHandler ${this.state.lastHeader}`);\n\n  //show list of tasks\n\n  contentViewHandler = event => {\n    let newViewChoice = event.target.value;\n    console.log(newViewChoice);\n    //Comparing new contentChoice with previous contentChoice\n    //if newContentChoice === oldContentChoice\n    //turn off the view\n    if (newViewChoice === this.state.contentChoice) {\n      return this.setState({ contentChoice: '0' });\n    } else {\n      //Setting which Content view to show\n      //there will be only 1 contentChoice stored in state\n      switch (newViewChoice) {\n        case '0': //only cockpit\n          this.setState({ contentChoice: '0' });\n          break;\n        case '1': //All tasks\n          this.setState({ contentChoice: '1' });\n          break;\n        case '2': //TodaysTasks\n          this.setState({ contentChoice: '2' });\n          break;\n        case '3': //Syllabus\n          this.setState({ contentChoice: '3' });\n          break;\n      }\n    }\n\n    //Setting the lastHeader for each contentChoice\n    //there will be 3 diff. lastHeader depending on # of dif lists to be displayed\n    switch (this.state.contentChoice) {\n      case '0': //only cockpit\n        break;\n      case '1': //All tasks\n        if (!this.state.lastHeader) {\n          console.log('Yo MATE IM TESTING THE LASTHEADER');\n          this.setState({ lastHeader: this.state.tasks[0] });\n        }\n        break;\n      case '2': //TodaysTasks\n        this.setState({ lastTodayTasksHeader: this.state.Monday[0] });\n        break;\n      case '3': //Syllabus\n        this.setState({ lastSyllabusHeader: 'this.state.maxReact[0]' });\n        break;\n    }\n  };\n\n  toggleShowTasksHandler = () => {\n    if (this.state.tasks != 0) {\n      this.setState({ lastHeader: this.state.tasks[0] });\n    } else {\n      this.setState({ lastHeader: this.state.lastHeader });\n    }\n\n    //old way of showing all tasks\n    const doesShow = this.state.showTasks;\n    this.setState({ showTasks: !doesShow });\n\n    //this allows to either show <Tasks> or <TodayTasks> at one time (not both at the same time)\n\n    //showView = '0' => showing Regular rightcockpit\n    //showView = '1' => showing AllTasks\n    //showView = '2' => showing TodaysTasks\n    //showView = '0' => showing <cockpit2> Syllabus (Reactmax)\n    switch (this.state.showView) {\n      case '0':\n        this.setState({ showView: '1' });\n        break;\n\n      case '1':\n        this.setState({ showView: '0' });\n        break;\n\n      case '2':\n        this.setState({ showView: '1' });\n        break;\n    }\n\n    //tryout\n    const Monday = [...this.state.Monday];\n\n    Monday[0].task = 'higher love';\n\n    this.setState({ Monday: Monday });\n  };\n\n  //delete a task\n  deleteTaskhandler = taskIndex => {\n    alert('Are you sure you want to delete this task?');\n    this.setState({ reRenderTasks: true });\n\n    //get tasks array\n    const tasks = [...this.state.tasks];\n\n    //splice task of interst\n    tasks.splice(taskIndex, 1);\n\n    //update new list of tasks to state\n    this.setState({ tasks: tasks });\n\n    //this.setState({ showTasksCounter: false });\n  };\n\n  //dynamic edit task\n  taskChangeHandler = (event, taskChangedId) => {\n    //find the task that matches the taskChangedId\n    const foundTaskId = this.state.tasks.findIndex(currentId => {\n      return currentId.id === taskChangedId;\n    });\n\n    //create new task item that we will put into array\n    const updatedTask = { ...this.state.tasks[foundTaskId] };\n    updatedTask.todo = event.target.value;\n\n    //pull out the states tasks array\n    const tasks = [...this.state.tasks];\n\n    //update the task with id of interest w/ new task description\n    tasks[foundTaskId] = updatedTask;\n\n    //update the state\n    this.setState({ tasks: tasks });\n  };\n\n  //addTaskTodayHandler = (event, taskChangedId) => {};\n\n  displayTodayScheduleHandler = () => {\n    if (this.state.Monday != 0) {\n      this.setState({ lastTodayTasksHeader: this.state.Monday[0] });\n    } else {\n      this.setState({ lastTodayTasksHeader: this.state.lastTodayTasksHeader });\n    }\n\n    //this allows to either show <Tasks> or <TodayTasks> at one time (not both at the same time)\n    //showView = '0' => showing Regular rightcockpit\n    //showView = '1' => showing AllTasks\n    //showView = '2' => showing TodaysTasks\n    //showView = '0' => showing <cockpit2> Syllabus (Reactmax)\n\n    switch (this.state.showView) {\n      case '0':\n        this.setState({ showView: '2' });\n        break;\n\n      case '1':\n        this.setState({ showView: '2' });\n        break;\n\n      case '2':\n        this.setState({ showView: '0' });\n        break;\n\n      case '3':\n        this.setState({ showView: '2' });\n        break;\n    }\n\n    //pull out the states tasks array\n    const Monday = [...this.state.Monday];\n\n    //update the task with id of interest w/ new task description\n    Monday[0].task = 'higher love';\n\n    /*old way of showing Today's Tasks\n    const doesShowToday = this.state.showTasksToday;\n    this.setState({ showTasksToday: !doesShowToday });\n    */\n  };\n\n  renderTableDataHandler = () => {\n    return this.state.students.map((student, index) => {\n      const { id, name, age, email } = student; //destructuring\n      return (\n        <tr key={id}>\n          <td>{id}</td>\n          <td>{name}</td>\n          <td>{age}</td>\n          <td>{email}</td>\n        </tr>\n      );\n    });\n  };\n\n  renderTableHeaderHandler = () => {\n    let header = Object.keys(this.state.students[0]);\n    return header.map((key, index) => {\n      return <th key={index}>{key.toUpperCase()}</th>;\n    });\n  };\n\n  deleteTodayTaskhandler = taskIndex => {\n    alert('Are you sure you want to delete this task?');\n    this.setState({ reRenderTodayTasks: true });\n\n    //get tasks array\n    const Monday = [...this.state.Monday];\n\n    //splice task of interst\n    Monday.splice(taskIndex, 1);\n\n    //update new list of tasks to state\n    this.setState({ Monday: Monday });\n\n    //this.setState({ showTasksCounter: false });\n  };\n\n  showSyllabusHandler = () => {\n    let doesShow = this.state.showSyllabusFromNav;\n    this.setState({ showSyllabusFromNav: !doesShow });\n    switch (this.state.showView) {\n      case '0':\n        this.setState({ showView: '3' });\n        break;\n\n      case '1':\n        this.setState({ showView: '3' });\n        break;\n\n      case '2':\n        this.setState({ showView: '3' });\n        break;\n\n      case '3':\n        this.setState({ showView: '0' });\n        break;\n    }\n  };\n\n  render() {\n    let displayTasks = null;\n\n    //clicking on the show Tasks button to show available tasks\n    //tasks, clicked, changed will be sent to <Tasks>\n\n    switch (this.state.showView) {\n      case '1':\n        displayTasks = (\n          <React.Fragment>\n            <p>tasks has # {this.state.tasks.length}</p>\n            <Tasks\n              reRenderTasks={this.state.reRenderTasks}\n              tasks={this.state.tasks}\n              clicked={this.deleteTaskhandler}\n              changed={this.taskChangeHandler}\n              lastHeader={this.state.lastHeader}\n            />\n          </React.Fragment>\n        );\n        break;\n\n      case '2':\n        displayTasks = (\n          <React.Fragment>\n            <TodayTasks\n              reRenderTodayTasks={this.state.reRenderTodayTasks}\n              lastTodayTasksHeader={this.state.lastTodayTasksHeader}\n              clicked={this.deleteTodayTaskhandler}\n              changed={this.todayTaskChangeHandler}\n              monday={this.state.Monday}\n            />\n          </React.Fragment>\n        );\n        break;\n\n      case '3':\n        displayTasks = (\n          <React.Fragment>\n            <Cockpit2\n              showSyllabusFromNav={this.state.showSyllabusFromNav}\n              tasks={this.state.tasks}\n              deleteCockpit2={() => {\n                this.setState({ showCockpit2: false });\n              }}\n            />\n          </React.Fragment>\n        );\n    }\n\n    let leftCockpit = null;\n    if (this.state.showCockpit == true) {\n      leftCockpit = (\n        <React.Fragment>\n          <Cockpit\n            title={this.props.appTitle}\n            allTasksClicked={this.toggleShowTasksHandler}\n            tasksLength={this.state.tasks.length}\n            todayTasksClicked={this.displayTodayScheduleHandler}\n            deleteCockpit={() => {\n              this.setState({ showCockpit: false });\n            }}\n          />\n        </React.Fragment>\n      );\n    }\n\n    let rightCockpit = null;\n\n    if (this.state.showCockpit2 == true) {\n      rightCockpit = (\n        <React.Fragment>\n          <Cockpit2\n            showSyllabusFromNav={this.state.showSyllabusFromNav}\n            tasks={this.state.tasks}\n            deleteCockpit2={() => {\n              this.setState({ showCockpit2: false });\n            }}\n          />\n        </React.Fragment>\n      );\n    }\n\n    let tasklength = this.state.tasks.length;\n\n    //Trying out toggleShowTasksHandler\n\n    let displayContent = null;\n\n    switch (this.state.contentChoice) {\n      case '0':\n        break;\n\n      case '1':\n        displayContent = (\n          <React.Fragment>\n                        <p>tasks has # {this.state.tasks.length}</p>\n                        \n            <Tasks\n              reRenderTasks={this.state.reRenderTasks}\n              tasks={this.state.tasks}\n              clicked={this.deleteTaskhandler}\n              changed={this.taskChangeHandler}\n              lastHeader={this.state.lastHeader}\n            />\n                      \n          </React.Fragment>\n        );\n        break;\n\n      case '2':\n        displayContent = (\n          <React.Fragment>\n                        \n            <TodayTasks\n              reRenderTodayTasks={this.state.reRenderTodayTasks}\n              lastTodayTasksHeader={this.state.lastTodayTasksHeader}\n              clicked={this.deleteTodayTaskhandler}\n              changed={this.todayTaskChangeHandler}\n              monday={this.state.Monday}\n            />\n                      \n          </React.Fragment>\n        );\n        break;\n\n      case '3':\n        displayContent = (\n          <React.Fragment>\n                        \n            <Cockpit2\n              showSyllabusFromNav={this.state.showSyllabusFromNav}\n              tasks={this.state.tasks}\n              deleteCockpit2={() => {\n                this.setState({ showCockpit2: false });\n              }}\n            />\n                      \n          </React.Fragment>\n        );\n        break;\n    }\n\n    return (\n      <WithClass passClass={rocky.App}>\n        <Navbar2\n          syllabusClicked={this.showSyllabusHandler}\n          title={this.props.appTitle}\n          allTasksClicked={this.toggleShowTasksHandler}\n          tasksLength={this.state.tasks.length}\n          todayTasksClicked={this.contentViewHandler}\n          deleteCockpit={() => {\n            this.setState({ showCockpit: false });\n          }}\n        />\n\n        <div>\n          <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n            <label className=\"btn btn-danger m-1 active\">\n              <button\n                type=\"radio\"\n                name=\"options\"\n                id=\"option1\"\n                autoComplete=\"off\"\n                onClick={event => this.contentViewHandler(event)}\n                value=\"0\"\n              />{' '}\n              Cockpit\n            </label>\n\n            <label className=\"btn btn-primary m-1 active\">\n              <button\n                type=\"radio\"\n                name=\"options\"\n                id=\"option1\"\n                autoComplete=\"off\"\n                onClick={event => this.contentViewHandler(event)}\n                value=\"1\"\n              />{' '}\n              All Tasks\n            </label>\n\n            <label className=\"btn btn-success m-1 active \">\n              <button\n                type=\"radio\"\n                name=\"options\"\n                id=\"option2\"\n                autoComplete=\"off\"\n                onClick={event => this.contentViewHandler(event)}\n                value=\"2\"\n              />{' '}\n              Todays Tasks\n            </label>\n\n            <label className=\"btn btn-warning m-1 \">\n              <button\n                type=\"radio\"\n                name=\"options\"\n                id=\"option3\"\n                autoComplete=\"off\"\n                onClick={event => this.contentViewHandler(event)}\n                value=\"3\"\n              />{' '}\n              React Syllabus\n            </label>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"d-flex flex-row \">\n            <div className=\"card text-white bg-info m-1 p-1 col-3\">\n              <div className=\"p-1 \">{leftCockpit}</div>\n            </div>\n            <div className=\"card bg-light m-1 p-1 col-9\">\n              <div className=\"p-1 \">{displayContent}</div>\n            </div>\n          </div>\n        </div>\n      </WithClass>\n    );\n  }\n}\n//{displayContent}\n//{displayTasks}\nexport default App;\n//<div className=\"p-1 \">{rightCockpit}</div>\n//<div className=\"d-flex flex-column \"></div>;\n//<p className={rocky[classes]}>Things to Do!</p>\n\n//using css modules on multiple classNames\n//{classNames({[styles.foo]: true, [styles.bar]: true})}\n//<p className={classNames({[rocky[classes]]: true, [rocky.red]: true})}>Things to Do!</p>\n\n/*old way of displaying\n<WithClass passClass={rocky.App}>\n        <button\n          onClick={() => {\n            this.setState({ showCockpit: false });\n          }}\n        >\n          {' '}\n          Remove Cockpit\n        </button>\n\n        {this.state.showCockpit ? (\n          <Cockpit\n            title={this.props.appTitle}\n            clicked={this.toggleShowTasksHandler}\n            tasksLength={this.state.tasks.length}\n            todayClicked={this.displayTodayScheduleHandler}\n          />\n        ) : null}\n\n        {displayTasks}\n      </WithClass>\n      */\n\n//    <div>\n//    <h1 id=\"title\">React Dynamic Table</h1>\n//    <table id=\"students\">\n//      <tbody>\n//        <tr>{this.renderTableHeaderHandler()}</tr>\n//        {this.renderTableDataHandler()}\n//      </tbody>\n//    </table>\n//  </div>\n"]},"metadata":{},"sourceType":"module"}