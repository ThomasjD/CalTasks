{"ast":null,"code":"import _objectSpread from \"/Users/thomasjd/Desktop/caltask/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/containers/Store/CalendarData.js\";\nimport React, { Component } from 'react'; //import classes from '../../components/Cockpit/Cockpit.module.css';\n\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksContext from '../../context/tasksContext';\nimport DatePicker from 'react-datepicker';\nimport numToDay from '../../components/Calendar/numToDay';\nimport StoreContext from '../../context/StoreDataContext';\nimport { format, compareAsc } from 'date-fns';\n\nclass CalendarData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showChooseDate: false,\n      days: {\n        '200204Tue': {\n          unscheduledtasks: [{\n            id: 'task8',\n            title: 'homework;'\n          }]\n        }\n      }\n    };\n\n    this.createDayObjName = event => {\n      event.preventDefault();\n      alert('inside createDayObjName');\n      let day = this.state.startTimeDate.day;\n      let date = this.state.startTimeDate.toLocalString;\n      console.log(date);\n    };\n\n    this.newEventHandler = value => {\n      let newEvent = this.context.dataRequestDetails.value;\n      let startTimeDate = this.context.dataRequestDetails.value.startTimeDate;\n      let assignTask = {\n        id: newEvent.startTimeDate.dateObjectString,\n        timeOfDay: startTimeDate.time,\n        task: newEvent.eventTitle,\n        note: newEvent.eventNote,\n        deadline: newEvent.deadline,\n        category: newEvent.eventCategory,\n        assignedTimeStart: startTimeDate,\n        assignedTimeStop: newEvent.finishTimeDate\n      }; //Thur blocked out\n\n      let dataLocation = this.context.dataRequestDetails.dataLocation; // let availableObjects = Object.keys(this.state)\n\n      if (!this.state[dataLocation]) {\n        // object exists\n        let addNewEventToNewDataLocation = [assignTask];\n        this.setState({\n          [dataLocation]: addNewEventToNewDataLocation,\n          pickedDayTasksHeader: assignTask,\n          dataLocation: dataLocation\n        }, () => this.context.dataReceiverHandler(this.state));\n      } else {\n        let addNewEventToExistingDataLocation = this.state[dataLocation][0];\n        this.setState({\n          [dataLocation]: addNewEventToExistingDataLocation,\n          pickedDayTasksHeader: assignTask,\n          dataLocation: dataLocation\n        }, () => this.context.dataReceiverHandler(this.state));\n      }\n    };\n\n    this.newDayObj = dayObjName => {\n      console.log('inside newDayObj '); //empty obj if dayObjName doesn't exist\n\n      let dayObjName2 = {\n        unScheduledTask: dayObjName,\n        repeats: ['hello', 'there'],\n        hours: {\n          '00:00': '',\n          '00:30': '',\n          '01:00': '',\n          '01:30': '',\n          '02:00': '',\n          '02:30': '',\n          '03:00': '',\n          '03:30': '',\n          '04:00': '',\n          '04:30': '',\n          '05:00': '',\n          '05:30': '',\n          '06:00': '',\n          '06:30': '',\n          '07:00': '',\n          '08:30': '',\n          '08:00': '',\n          '08:30': '',\n          '09:00': '',\n          '09:30': '',\n          '10:00': '',\n          '10:30': '',\n          '11:00': '',\n          '11:30': '',\n          '12:00': '',\n          '12:30': '',\n          '13:00': '',\n          '13:30': '',\n          '14:00': '',\n          '14:30': '',\n          '15:00': '',\n          '15:30': '',\n          '16:00': '',\n          '16:30': '',\n          '17:00': '',\n          '17:30': '',\n          '18:00': '',\n          '18.30': '',\n          '19:00': '',\n          '19.30': '',\n          '20:00': '',\n          '20.30': '',\n          '21:00': '',\n          '21.30': '',\n          '02:00': '',\n          '22.30': '',\n          '23:00': '',\n          '23.30': '',\n          '24:00': '',\n          '24.30': ''\n        }\n      };\n\n      let updatedDayObj = _objectSpread({}, this.state.days, {\n        [dayObjName]: dayObjName2\n      });\n\n      this.setState({\n        days: updatedDayObj\n      });\n    };\n  }\n\n  handleStartTimeDateChange(date) {\n    let currentShowStartTimeDate = this.state.showStartTimeDate;\n    let day = format(date, 'E');\n    let dateDigit = format(date, 'dd');\n    let year = format(date, 'yy');\n    let month = format(date, 'MM');\n    let dayObjName = year + month + dateDigit + day;\n    console.log(`day: ${day} type: ${typeof day}`);\n    console.log(`date: ${dateDigit} type: ${typeof dateDigit}`);\n    console.log(`year: ${year} type: ${typeof year}`);\n    console.log(`month: ${month} type: ${typeof month}`);\n    console.log(`dayObjName: ${dayObjName} type: ${typeof dayObjName}`);\n    let currentDaysObj = this.state.days; //if there there is NO obj for that day\n\n    if (typeof currentDaysObj[dayObjName] == 'undefined') {\n      this.newDayObj(dayObjName);\n    } else {\n      //if there is an obj for that day\n      let newTask = {\n        id: 'task243',\n        title: 'groceries'\n      };\n      currentDaysObj[dayObjName].unscheduledtasks.push(newTask);\n      console.log(currentDaysObj[dayObjName]);\n      this.setState({\n        days: currentDaysObj\n      }, () => console.log(this.state.days[dayObjName]));\n    }\n  }\n\n  render() {\n    // console.dir(this.state);\n    if (this.context.dataRequestDetails && this.context.dataRequestDetails.typeOfData === 'events') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          //new Event\n          // alert(\n          //   `doogie inside TasksData events case 1 contentChoice: ${this.context.dataRequestDetails.handlerChoice}`\n          // );\n          this.context.resetHandlerChoice(this.newEventHandler(this.context.dataRequestDetails.value)); // this.context.resetHandlerChoice(() =>\n          //   this.lastTaskHeaderHandler(() =>\n          //     this.newEventHandler(this.context.dataRequestDetails.value)\n          //   )\n          // );\n          // this.context.resetHandlerChoice(this.lastTaskHeaderHandler());\n\n          break;\n      }\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(DatePicker, {\n      placeholderText: \"Choose Start Time\",\n      selected: this.state.startDate,\n      onChange: date => this.handleStartTimeDateChange(date),\n      showTimeSelect: true,\n      timeFormat: \"HH:mm\",\n      timeIntervals: 30,\n      timeCaption: \"Start\",\n      dateFormat: \"MMMM dd, yyyy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    })));\n  }\n\n}\n\nCalendarData.contextType = StoreContext;\nexport default CalendarData;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/containers/Store/CalendarData.js"],"names":["React","Component","RightCockpit","TasksContext","DatePicker","numToDay","StoreContext","format","compareAsc","CalendarData","constructor","props","state","showChooseDate","days","unscheduledtasks","id","title","createDayObjName","event","preventDefault","alert","day","startTimeDate","date","toLocalString","console","log","newEventHandler","value","newEvent","context","dataRequestDetails","assignTask","dateObjectString","timeOfDay","time","task","eventTitle","note","eventNote","deadline","category","eventCategory","assignedTimeStart","assignedTimeStop","finishTimeDate","dataLocation","addNewEventToNewDataLocation","setState","pickedDayTasksHeader","dataReceiverHandler","addNewEventToExistingDataLocation","newDayObj","dayObjName","dayObjName2","unScheduledTask","repeats","hours","updatedDayObj","handleStartTimeDateChange","currentShowStartTimeDate","showStartTimeDate","dateDigit","year","month","currentDaysObj","newTask","push","render","typeOfData","handlerChoice","resetHandlerChoice","startDate","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import classes from '../../components/Cockpit/Cockpit.module.css';\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksContext from '../../context/tasksContext';\nimport DatePicker from 'react-datepicker';\nimport numToDay from '../../components/Calendar/numToDay';\nimport StoreContext from '../../context/StoreDataContext';\n\nimport { format, compareAsc } from 'date-fns';\nclass CalendarData extends Component {\n  constructor(props) {\n    super(props);\n\n    this.newDayObj = dayObjName => {\n      console.log('inside newDayObj ');\n      //empty obj if dayObjName doesn't exist\n      let dayObjName2 = {\n        unScheduledTask: dayObjName,\n        repeats: ['hello', 'there'],\n        hours: {\n          '00:00': '',\n          '00:30': '',\n          '01:00': '',\n          '01:30': '',\n          '02:00': '',\n          '02:30': '',\n          '03:00': '',\n          '03:30': '',\n          '04:00': '',\n          '04:30': '',\n          '05:00': '',\n          '05:30': '',\n          '06:00': '',\n          '06:30': '',\n          '07:00': '',\n          '08:30': '',\n          '08:00': '',\n          '08:30': '',\n          '09:00': '',\n          '09:30': '',\n          '10:00': '',\n          '10:30': '',\n          '11:00': '',\n          '11:30': '',\n          '12:00': '',\n          '12:30': '',\n          '13:00': '',\n          '13:30': '',\n          '14:00': '',\n          '14:30': '',\n          '15:00': '',\n          '15:30': '',\n          '16:00': '',\n          '16:30': '',\n          '17:00': '',\n          '17:30': '',\n          '18:00': '',\n          '18.30': '',\n          '19:00': '',\n          '19.30': '',\n          '20:00': '',\n          '20.30': '',\n          '21:00': '',\n          '21.30': '',\n          '02:00': '',\n          '22.30': '',\n          '23:00': '',\n          '23.30': '',\n          '24:00': '',\n          '24.30': ''\n        }\n      };\n\n      let updatedDayObj = { ...this.state.days, [dayObjName]: dayObjName2 };\n      this.setState({ days: updatedDayObj });\n    };\n  }\n  state = {\n    showChooseDate: false,\n    days: {\n      '200204Tue': {\n        unscheduledtasks: [{ id: 'task8', title: 'homework;' }]\n      }\n    }\n  };\n  static contextType = StoreContext;\n  createDayObjName = event => {\n    event.preventDefault();\n    alert('inside createDayObjName');\n    let day = this.state.startTimeDate.day;\n\n    let date = this.state.startTimeDate.toLocalString;\n    console.log(date);\n  };\n\n  handleStartTimeDateChange(date) {\n    let currentShowStartTimeDate = this.state.showStartTimeDate;\n    let day = format(date, 'E');\n    let dateDigit = format(date, 'dd');\n    let year = format(date, 'yy');\n    let month = format(date, 'MM');\n    let dayObjName = year + month + dateDigit + day;\n\n    console.log(`day: ${day} type: ${typeof day}`);\n    console.log(`date: ${dateDigit} type: ${typeof dateDigit}`);\n    console.log(`year: ${year} type: ${typeof year}`);\n    console.log(`month: ${month} type: ${typeof month}`);\n    console.log(`dayObjName: ${dayObjName} type: ${typeof dayObjName}`);\n\n    let currentDaysObj = this.state.days;\n\n    //if there there is NO obj for that day\n    if (typeof currentDaysObj[dayObjName] == 'undefined') {\n      this.newDayObj(dayObjName);\n    } else {\n      //if there is an obj for that day\n\n      let newTask = { id: 'task243', title: 'groceries' };\n\n      currentDaysObj[dayObjName].unscheduledtasks.push(newTask);\n      console.log(currentDaysObj[dayObjName]);\n\n      this.setState(\n        {\n          days: currentDaysObj\n        },\n\n        () => console.log(this.state.days[dayObjName])\n      );\n    }\n  }\n\n  newEventHandler = value => {\n    let newEvent = this.context.dataRequestDetails.value;\n    let startTimeDate = this.context.dataRequestDetails.value.startTimeDate;\n\n    let assignTask = {\n      id: newEvent.startTimeDate.dateObjectString,\n      timeOfDay: startTimeDate.time,\n      task: newEvent.eventTitle,\n      note: newEvent.eventNote,\n      deadline: newEvent.deadline,\n      category: newEvent.eventCategory,\n      assignedTimeStart: startTimeDate,\n      assignedTimeStop: newEvent.finishTimeDate\n    };\n\n    //Thur blocked out\n    let dataLocation = this.context.dataRequestDetails.dataLocation;\n\n    // let availableObjects = Object.keys(this.state)\n\n    if (!this.state[dataLocation]) {\n      // object exists\n      let addNewEventToNewDataLocation = [assignTask];\n\n      this.setState(\n        {\n          [dataLocation]: addNewEventToNewDataLocation,\n          pickedDayTasksHeader: assignTask,\n          dataLocation: dataLocation\n        },\n\n        () => this.context.dataReceiverHandler(this.state)\n      );\n    } else {\n      let addNewEventToExistingDataLocation = this.state[dataLocation][0];\n\n      this.setState(\n        {\n          [dataLocation]: addNewEventToExistingDataLocation,\n          pickedDayTasksHeader: assignTask,\n          dataLocation: dataLocation\n        },\n\n        () => this.context.dataReceiverHandler(this.state)\n      );\n    }\n  };\n\n  render() {\n    // console.dir(this.state);\n    if (\n      this.context.dataRequestDetails &&\n      this.context.dataRequestDetails.typeOfData === 'events'\n    ) {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1': //new Event\n          // alert(\n          //   `doogie inside TasksData events case 1 contentChoice: ${this.context.dataRequestDetails.handlerChoice}`\n          // );\n\n          this.context.resetHandlerChoice(\n            this.newEventHandler(this.context.dataRequestDetails.value)\n          );\n\n          // this.context.resetHandlerChoice(() =>\n          //   this.lastTaskHeaderHandler(() =>\n          //     this.newEventHandler(this.context.dataRequestDetails.value)\n          //   )\n          // );\n\n          // this.context.resetHandlerChoice(this.lastTaskHeaderHandler());\n\n          break;\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <DatePicker\n            placeholderText=\"Choose Start Time\"\n            selected={this.state.startDate}\n            onChange={date => this.handleStartTimeDateChange(date)}\n            showTimeSelect\n            timeFormat=\"HH:mm\"\n            timeIntervals={30}\n            timeCaption=\"Start\"\n            dateFormat=\"MMMM dd, yyyy\"\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default CalendarData;\n"]},"metadata":{},"sourceType":"module"}