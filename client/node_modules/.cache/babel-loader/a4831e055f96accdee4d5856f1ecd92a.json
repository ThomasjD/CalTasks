{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/src/ResourceView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Icon from 'antd/lib/icon';\n\nclass ResourceView extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const _this$props = this.props,\n          schedulerData = _this$props.schedulerData,\n          contentScrollbarHeight = _this$props.contentScrollbarHeight,\n          slotClickedFunc = _this$props.slotClickedFunc,\n          slotItemTemplateResolver = _this$props.slotItemTemplateResolver,\n          toggleExpandFunc = _this$props.toggleExpandFunc;\n    const renderData = schedulerData.renderData;\n    let width = schedulerData.getResourceTableWidth() - 2;\n    let paddingBottom = contentScrollbarHeight;\n    let displayRenderData = renderData.filter(o => o.render);\n    let resourceList = displayRenderData.map(item => {\n      let indents = [];\n\n      for (let i = 0; i < item.indent; i++) {\n        indents.push(React.createElement(\"span\", {\n          key: \"es\".concat(i),\n          className: \"expander-space\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }));\n      }\n\n      let indent = React.createElement(\"span\", {\n        key: \"es\".concat(item.indent),\n        className: \"expander-space\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      });\n\n      if (item.hasChildren) {\n        indent = item.expanded ? React.createElement(Icon, {\n          type: \"minus-square\",\n          key: \"es\".concat(item.indent),\n          style: {},\n          className: \"\",\n          onClick: () => {\n            if (!!toggleExpandFunc) toggleExpandFunc(schedulerData, item.slotId);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }) : React.createElement(Icon, {\n          type: \"plus-square\",\n          key: \"es\".concat(item.indent),\n          style: {},\n          className: \"\",\n          onClick: () => {\n            if (!!toggleExpandFunc) toggleExpandFunc(schedulerData, item.slotId);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        });\n      }\n\n      indents.push(indent);\n      let a = slotClickedFunc != undefined ? React.createElement(\"span\", {\n        className: \"slot-cell\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, indents, React.createElement(\"a\", {\n        className: \"slot-text\",\n        onClick: () => {\n          slotClickedFunc(schedulerData, item);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, item.slotName)) : React.createElement(\"span\", {\n        className: \"slot-cell\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, indents, React.createElement(\"span\", {\n        className: \"slot-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, item.slotName));\n      let slotItem = React.createElement(\"div\", {\n        title: item.slotName,\n        className: \"overflow-text header2-text\",\n        style: {\n          textAlign: \"left\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, a);\n\n      if (!!slotItemTemplateResolver) {\n        let temp = slotItemTemplateResolver(schedulerData, item, slotClickedFunc, width, \"overflow-text header2-text\");\n        if (!!temp) slotItem = temp;\n      }\n\n      let tdStyle = {\n        height: item.rowHeight\n      };\n\n      if (item.groupOnly) {\n        tdStyle = _objectSpread({}, tdStyle, {\n          backgroundColor: schedulerData.config.groupOnlySlotColor\n        });\n      }\n\n      return React.createElement(\"tr\", {\n        key: item.slotId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        \"data-resource-id\": item.slotId,\n        style: tdStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, slotItem));\n    });\n    return React.createElement(\"div\", {\n      style: {\n        paddingBottom: paddingBottom\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"resource-table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, resourceList)));\n  }\n\n}\n\nResourceView.propTypes = {\n  schedulerData: PropTypes.object.isRequired,\n  contentScrollbarHeight: PropTypes.number.isRequired,\n  slotClickedFunc: PropTypes.func,\n  slotItemTemplateResolver: PropTypes.func,\n  toggleExpandFunc: PropTypes.func\n};\nexport default ResourceView;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/RightCockpit/src/ResourceView.js"],"names":["React","Component","PropTypes","Icon","ResourceView","constructor","props","render","schedulerData","contentScrollbarHeight","slotClickedFunc","slotItemTemplateResolver","toggleExpandFunc","renderData","width","getResourceTableWidth","paddingBottom","displayRenderData","filter","o","resourceList","map","item","indents","i","indent","push","hasChildren","expanded","slotId","a","undefined","slotName","slotItem","textAlign","temp","tdStyle","height","rowHeight","groupOnly","backgroundColor","config","groupOnlySlotColor","propTypes","object","isRequired","number","func"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {PropTypes} from 'prop-types'\r\nimport Icon from 'antd/lib/icon'\r\n\r\nclass ResourceView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    static propTypes = {\r\n        schedulerData: PropTypes.object.isRequired,\r\n        contentScrollbarHeight: PropTypes.number.isRequired,\r\n        slotClickedFunc: PropTypes.func,\r\n        slotItemTemplateResolver: PropTypes.func,\r\n        toggleExpandFunc: PropTypes.func\r\n    }\r\n\r\n    render() {\r\n\r\n        const {schedulerData, contentScrollbarHeight, slotClickedFunc, slotItemTemplateResolver, toggleExpandFunc} = this.props;\r\n        const {renderData} = schedulerData;\r\n\r\n        let width = schedulerData.getResourceTableWidth() - 2;\r\n        let paddingBottom = contentScrollbarHeight;\r\n        let displayRenderData = renderData.filter(o => o.render);\r\n        let resourceList = displayRenderData.map((item) => {\r\n            let indents = [];\r\n            for(let i=0;i<item.indent;i++) {\r\n                indents.push(<span key={`es${i}`} className=\"expander-space\"></span>);\r\n            }\r\n            let indent = <span key={`es${item.indent}`} className=\"expander-space\"></span>;\r\n            if(item.hasChildren) {\r\n                indent = item.expanded ? (\r\n                    <Icon type=\"minus-square\" key={`es${item.indent}`} style={{}} className=\"\"\r\n                        onClick={() => {\r\n                            if(!!toggleExpandFunc)\r\n                                toggleExpandFunc(schedulerData, item.slotId);\r\n                        }}/>\r\n                ) : (\r\n                    <Icon type=\"plus-square\" key={`es${item.indent}`} style={{}} className=\"\"\r\n                        onClick={() => {\r\n                            if(!!toggleExpandFunc)\r\n                                toggleExpandFunc(schedulerData, item.slotId);\r\n                        }}/>\r\n                );\r\n            }\r\n            indents.push(indent);\r\n                    \r\n            let a = slotClickedFunc != undefined ? <span className=\"slot-cell\">{indents}<a className=\"slot-text\" onClick={() => {\r\n                slotClickedFunc(schedulerData, item);\r\n            }}>{item.slotName}</a></span>\r\n                : <span className=\"slot-cell\">{indents}<span className=\"slot-text\">{item.slotName}</span></span>;\r\n            let slotItem = (\r\n                <div title={item.slotName} className=\"overflow-text header2-text\" style={{textAlign: \"left\"}}>\r\n                    {a}\r\n                </div>\r\n            );\r\n            if(!!slotItemTemplateResolver) {\r\n                let temp = slotItemTemplateResolver(schedulerData, item, slotClickedFunc, width, \"overflow-text header2-text\");\r\n                if(!!temp)\r\n                    slotItem = temp;\r\n            }\r\n\r\n            let tdStyle = {height: item.rowHeight};\r\n            if(item.groupOnly) {\r\n                tdStyle = {\r\n                    ...tdStyle,\r\n                    backgroundColor: schedulerData.config.groupOnlySlotColor\r\n                };\r\n            }\r\n\r\n            return (\r\n                <tr key={item.slotId}>\r\n                    <td data-resource-id={item.slotId} style={tdStyle}>\r\n                        {slotItem}\r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div style={{paddingBottom: paddingBottom}}>\r\n                <table className=\"resource-table\">\r\n                    <tbody>\r\n                        {resourceList}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResourceView"]},"metadata":{},"sourceType":"module"}