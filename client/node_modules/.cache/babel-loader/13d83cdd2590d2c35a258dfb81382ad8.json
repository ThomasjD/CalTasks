{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Task from './Task/Task';\nimport Radium, { StyleRoot } from 'radium';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tasks: [{\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes'\n      }, {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes'\n      }, {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves'\n      }],\n      showTasks: false\n    };\n\n    this.toggleShowTasksHandler = () => {\n      const doesShow = this.state.showTasks;\n      this.setState({\n        showTasks: !doesShow\n      });\n    };\n\n    this.deleteTaskhandler = taskIndex => {\n      //get tasks array\n      const tasks = [...this.state.tasks]; //splice task of interst\n\n      tasks.splice(taskIndex, 1);\n      this.setState({\n        tasks: tasks\n      });\n    };\n\n    this.taskChangeHandler = (event, taskChangedId) => {\n      //find the task that matches the taskChangedId\n      const foundTaskId = this.state.tasks.findIndex(currentId => {\n        return currentId.id === taskChangedId;\n      }); //create new task item that we will put into array\n\n      const updatedTask = _objectSpread({}, this.state.tasks[foundTaskId]);\n\n      updatedTask.todo = event.target.value; //pull out the states tasks array\n\n      const tasks = [...this.state.tasks]; //update the task with id of interest w/ new task description\n\n      tasks[foundTaskId] = updatedTask; //update the state\n\n      this.setState({\n        tasks: tasks\n      });\n    };\n  }\n\n  render() {\n    //console.log(this.state.tasks.length)\n    //inject this into the return statement for button \n    const style = {\n      backgroundColor: 'green',\n      color: 'white',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor: 'pointer',\n      ':hover': {\n        backgroundColor: 'lightgreen',\n        color: \"black\"\n      }\n    };\n    let displayTasks = null; //clicking on the show Tasks button to show available tasks\n\n    if (this.state.showTasks) {\n      displayTasks = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, this.state.tasks.map((task, index) => {\n        return React.createElement(Task, {\n          todo: task.todo,\n          deadline: task.deadline,\n          click: () => this.deleteTaskhandler(index),\n          key: task.id,\n          changed: event => this.taskChangeHandler(event, task.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, \"Change Task (below)\");\n      })); //button turns red when <Tasks> are shown, when you can delete them (it overide style for hover)\n\n      style.backgroundColor = 'red';\n    } //use switch case to determine color of button (depending on how many tasks left)\n    // console.log('before')\n    // console.log(classes)\n\n\n    let tasklength = this.state.tasks.length;\n    console.log(tasklength);\n    const classes = [];\n\n    switch (this.state.tasks.length) {\n      case 3:\n        classes.push('red bold');\n        break;\n\n      case 2:\n        classes.push('red');\n        break;\n\n      case 1:\n        classes.push('orange');\n        break;\n\n      default:\n        classes.push('green');\n        break;\n    }\n\n    console.log(classes); // if (this.state.tasks.length < 3) {\n    //   classes.push('red');\n    // }\n    // if (this.state.tasks.length < 2) {\n    //   classes.push('bold')\n    // }\n    // console.log(classes)\n    //\n\n    const classesFinal = classes.join(' ');\n    return React.createElement(StyleRoot, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Medellin\"), React.createElement(\"p\", {\n      className: classesFinal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Things to Do!\"), React.createElement(\"button\", {\n      style: style,\n      onClick: this.toggleShowTasksHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Show Task\"), displayTasks, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"this class is \", classes)));\n  }\n\n}\n\nexport default Radium(App);","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/App.js"],"names":["React","Component","Task","Radium","StyleRoot","App","state","tasks","id","todo","deadline","showTasks","toggleShowTasksHandler","doesShow","setState","deleteTaskhandler","taskIndex","splice","taskChangeHandler","event","taskChangedId","foundTaskId","findIndex","currentId","updatedTask","target","value","render","style","backgroundColor","color","font","border","padding","cursor","displayTasks","map","task","index","tasklength","length","console","log","classes","push","classesFinal","join"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Task from './Task/Task'\nimport Radium, {StyleRoot} from 'radium';\n\nclass App extends Component {\n  state = {\n    tasks: [\n      {id: 'qrwrwq', todo: 'Find work', deadline : 'Lunes'},\n      {id: 'egewhw', todo: 'buy shoes', deadline : 'Martes'},\n      {id: 'asfasv', todo: 'mail package', deadline : 'Jueves'}\n    ],\n    showTasks: false\n    \n  }\n\n  toggleShowTasksHandler = () => {\n    const doesShow = this.state.showTasks;\n\n    this.setState({showTasks: !doesShow})\n    \n    }\n\n  deleteTaskhandler = (taskIndex) => {\n    //get tasks array\n    const tasks = [...this.state.tasks];\n    //splice task of interst\n    tasks.splice(taskIndex, 1);\n    this.setState({tasks : tasks})\n  }\n\n  taskChangeHandler = (event, taskChangedId) => {\n    //find the task that matches the taskChangedId\n    const foundTaskId = this.state.tasks.findIndex(currentId => {\n      return currentId.id === taskChangedId\n    })\n\n    //create new task item that we will put into array\n    const updatedTask = {...this.state.tasks[foundTaskId]}\n    updatedTask.todo = event.target.value\n\n    //pull out the states tasks array\n    const tasks = [...this.state.tasks]\n    \n    //update the task with id of interest w/ new task description\n    tasks[foundTaskId] = updatedTask\n    \n    //update the state\n    this.setState({tasks: tasks})\n\n\n    }\n  \n\n  render() {\n\n    \n    //console.log(this.state.tasks.length)\n    //inject this into the return statement for button \n    const style = {\n      backgroundColor: 'green', \n      color: 'white',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor: 'pointer',\n      ':hover': {\n        backgroundColor: 'lightgreen',\n        color: \"black\"\n      }\n    }\n    \n    \n\n    let displayTasks = null;\n    //clicking on the show Tasks button to show available tasks\n    if (this.state.showTasks) {\n      displayTasks = (\n        <div>\n        {this.state.tasks.map((task, index) => {\n          return <Task \n          todo = {task.todo} \n          deadline = {task.deadline}\n          click = {() => this.deleteTaskhandler(index)}\n          key = {task.id}\n          changed = {(event) => this.taskChangeHandler (event, task.id)}>Change Task (below)</Task>\n        })}  \n      </div>\n      )\n      \n      //button turns red when <Tasks> are shown, when you can delete them (it overide style for hover)\n      style.backgroundColor = 'red'\n    }\n\n    //use switch case to determine color of button (depending on how many tasks left)\n    // console.log('before')\n    // console.log(classes)\n     let tasklength = this.state.tasks.length\n     console.log(tasklength)\n     const classes = [];\n    switch (this.state.tasks.length) {\n      case (3): \n        classes.push('red bold')\n         break\n      case (2): \n         classes.push('red')\n         break\n      case (1):\n         classes.push('orange')\n         break\n      default: \n      classes.push('green')\n       break\n    }\n    \n    console.log(classes)\n\n    \n    // if (this.state.tasks.length < 3) {\n    //   classes.push('red');\n    // }\n\n    // if (this.state.tasks.length < 2) {\n    //   classes.push('bold')\n    // }\n    // console.log(classes)\n\n    //\n    const classesFinal = classes.join(' ')\n    return (\n      <StyleRoot>\n      <div className=\"App\">\n        <h1>Medellin</h1>\n        <p className={classesFinal}>Things to Do!</p>\n        <button \n          style = {style}\n          onClick = {this.toggleShowTasksHandler}>Show Task</button>\n        {displayTasks}\n        <p>this class is {classes}</p>\n        \n      </div>\n      </StyleRoot>\n    );\n    \n  }\n}\n\nexport default Radium(App);\n"]},"metadata":{},"sourceType":"module"}