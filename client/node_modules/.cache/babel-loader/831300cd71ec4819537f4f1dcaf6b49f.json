{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/components/Cockpit/Cockpit2.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react'; //import rocky from '../../containers/App.module.css'\n\nimport classNames from 'classnames';\nimport classes from './Cockpit.module.css'; //import Navbar from './navBar';\n\nimport Lessons from '../Syllabus/MaxReact/Lessons';\n\nclass Cockpit2 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      maxReact: [{\n        id: 'xvlwil',\n        lesson: '90. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbskk',\n        lesson: '91. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      showLessons: '0',\n      showLessonsView: false,\n      lastLessonHeader: []\n    };\n\n    this.toggleShowLessonsHandler = () => {\n      if (this.state.maxReact !== 0) {\n        this.setState({\n          lastLessonHeader: this.state.maxReact[0]\n        });\n      } else {\n        this.setState({\n          lastLessonHeader: this.state.lastLessonHeader\n        });\n      } //reverting the status to show or not show\n\n\n      const doesShow = this.state.showLessonsView;\n      this.setState({\n        showLessonsView: !doesShow\n      }); //for handling headers\n\n      switch (this.state.showLessonsView) {\n        case true:\n          this.setState({\n            showLessons: '1'\n          });\n          break;\n\n        case false:\n          this.setState({\n            showLessons: '0'\n          });\n          break;\n      }\n    };\n\n    this.deleteLessonhandler = taskIndex => {\n      alert('Are you sure you want to delete this task?');\n      this.setState({\n        reRenderTasks: true\n      }); //get tasks array\n\n      const lessons = [...this.state.maxReact]; //splice task of interst\n\n      lessons.splice(taskIndex, 1); //update new list of tasks to state\n\n      this.setState({\n        maxReact: lessons\n      });\n    };\n\n    this.lessonChangeHandler = (event, taskChangeId) => {\n      const foundTaskId = this.state.maxReact.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReact[foundTaskId]); //using updated values to define the lesson of the particular pulled out lesson\n\n\n      updatedLessons.lesson = event.target.value; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReact]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskId] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReact: lessons\n      });\n    };\n  }\n\n  render() {\n    if (this.props.showSyllabusFromNav) {\n      this.setState({\n        showLessonsView: true\n      });\n    }\n\n    let displayLessons = null;\n\n    if (this.state.showLessonsView) {\n      displayLessons = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"tasks has # \", this.state.maxReact.length), React.createElement(Lessons, {\n        reRender: this.state.showLessons,\n        lessons: this.state.maxReact,\n        clicked: this.deleteLessonhandler,\n        changed: this.lessonChangeHandler,\n        lastLessonHeader: this.state.lastLessonHeader,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }));\n    }\n\n    let displayCockpit = null;\n\n    if (this.state.showLessons == true) {\n      displayCockpit = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Lessons, {\n        reRender: this.state.showLessons,\n        lessons: this.state.maxReact,\n        clicked: this.deleteLessonhandler,\n        changed: this.lessonChangeHandler,\n        lastLessonHeader: this.state.lastLessonHeader,\n        lessonsLength: this.state.maxReact.length,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, this.props.showSyllabusFromNav ? this.toggleShowLessonsHandler() : null, React.createElement(\"button\", {\n      onClick: this.toggleShowLessonsHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, ' ', \"Show Lessons for React Max\"), displayLessons, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"hey there buddy\"), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      type: \"button\",\n      onClick: this.props.deleteCockpit2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Delete Cockpit\"));\n  }\n\n}\n\nexport default Cockpit2; //Cockpit2 Functional Component\n// import React, { useEffect } from 'react';\n// //import rocky from '../../containers/App.module.css'\n// import classNames from 'classnames';\n// import classes from './Cockpit.module.css';\n// //import Navbar from './navBar';\n// const Cockpit2 = props => {\n//   //can do anything that componentDidUpdate can do\n//   //can send http request here\n//   useEffect(() => {\n//     // setTimeout(() => {\n//     //   alert('FUck yea alert');\n//     // }, 1000);\n//     console.log('I am inside of [Cockpit2.js] useffect');\n//     return () => {\n//       console.log('[Cockpit2.js] cleanup work in useEffect');\n//     };\n//     //getting rid of timer\n//     //const timer =\n//     // return () => {\n//     //   //clearTimeout(timer);\n//     //   console.log('[Cockpit2.js] cleanup work in useEffect');\n//     // };\n//   });\n//   //{classes.Cockpit}\n//   // {cockpitBootstrap}\n//   return (\n//     <React.Fragment>\n//       <p>hey there buddy</p>\n//       <button\n//         className=\"btn btn-primary\"\n//         type=\"button\"\n//         onClick={props.deleteCockpit2}\n//       >\n//         Delete Cockpit\n//       </button>\n//     </React.Fragment>\n//   );\n// };\n// //export default Cockpit;\n// export default React.memo(Cockpit2);","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/components/Cockpit/Cockpit2.js"],"names":["React","Component","classNames","classes","Lessons","Cockpit2","constructor","props","state","maxReact","id","lesson","completion","showLessons","showLessonsView","lastLessonHeader","toggleShowLessonsHandler","setState","doesShow","deleteLessonhandler","taskIndex","alert","reRenderTasks","lessons","splice","lessonChangeHandler","event","taskChangeId","foundTaskId","findIndex","currentId","updatedLessons","target","value","render","showSyllabusFromNav","displayLessons","length","displayCockpit","deleteCockpit2"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import rocky from '../../containers/App.module.css'\nimport classNames from 'classnames';\nimport classes from './Cockpit.module.css';\n//import Navbar from './navBar';\nimport Lessons from '../Syllabus/MaxReact/Lessons';\n\nclass Cockpit2 extends Component {\n  constructor(props) {\n    super(props);\n  }\n  state = {\n    maxReact: [\n      { id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n      { id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n      {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    showLessons: '0',\n    showLessonsView: false,\n    lastLessonHeader: []\n  };\n\n  toggleShowLessonsHandler = () => {\n    if (this.state.maxReact !== 0) {\n      this.setState({ lastLessonHeader: this.state.maxReact[0] });\n    } else {\n      this.setState({ lastLessonHeader: this.state.lastLessonHeader });\n    }\n\n    //reverting the status to show or not show\n    const doesShow = this.state.showLessonsView;\n    this.setState({ showLessonsView: !doesShow });\n\n    //for handling headers\n    switch (this.state.showLessonsView) {\n      case true:\n        this.setState({ showLessons: '1' });\n        break;\n\n      case false:\n        this.setState({ showLessons: '0' });\n        break;\n    }\n  };\n\n  deleteLessonhandler = taskIndex => {\n    alert('Are you sure you want to delete this task?');\n    this.setState({ reRenderTasks: true });\n\n    //get tasks array\n    const lessons = [...this.state.maxReact];\n\n    //splice task of interst\n    lessons.splice(taskIndex, 1);\n\n    //update new list of tasks to state\n    this.setState({ maxReact: lessons });\n  };\n\n  lessonChangeHandler = (event, taskChangeId) => {\n    const foundTaskId = this.state.maxReact.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReact[foundTaskId] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    updatedLessons.lesson = event.target.value;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReact];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskId] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReact: lessons });\n  };\n  render() {\n    if (this.props.showSyllabusFromNav) {\n      this.setState({ showLessonsView: true });\n    }\n    let displayLessons = null;\n\n    if (this.state.showLessonsView) {\n      displayLessons = (\n        <React.Fragment>\n          <p>tasks has # {this.state.maxReact.length}</p>\n          <Lessons\n            reRender={this.state.showLessons}\n            lessons={this.state.maxReact}\n            clicked={this.deleteLessonhandler}\n            changed={this.lessonChangeHandler}\n            lastLessonHeader={this.state.lastLessonHeader}\n          />\n        </React.Fragment>\n      );\n    }\n\n    let displayCockpit = null;\n    if (this.state.showLessons == true) {\n      displayCockpit = (\n        <React.Fragment>\n          <Lessons\n            reRender={this.state.showLessons}\n            lessons={this.state.maxReact}\n            clicked={this.deleteLessonhandler}\n            changed={this.lessonChangeHandler}\n            lastLessonHeader={this.state.lastLessonHeader}\n            lessonsLength={this.state.maxReact.length}\n          />\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {this.props.showSyllabusFromNav\n          ? this.toggleShowLessonsHandler()\n          : null}\n        <button onClick={this.toggleShowLessonsHandler}>\n          {' '}\n          Show Lessons for React Max\n        </button>\n        {displayLessons}\n        <p>hey there buddy</p>\n        <button\n          className=\"btn btn-primary\"\n          type=\"button\"\n          onClick={this.props.deleteCockpit2}\n        >\n          Delete Cockpit\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Cockpit2;\n\n//Cockpit2 Functional Component\n// import React, { useEffect } from 'react';\n// //import rocky from '../../containers/App.module.css'\n// import classNames from 'classnames';\n// import classes from './Cockpit.module.css';\n// //import Navbar from './navBar';\n\n// const Cockpit2 = props => {\n//   //can do anything that componentDidUpdate can do\n//   //can send http request here\n//   useEffect(() => {\n//     // setTimeout(() => {\n//     //   alert('FUck yea alert');\n//     // }, 1000);\n//     console.log('I am inside of [Cockpit2.js] useffect');\n\n//     return () => {\n//       console.log('[Cockpit2.js] cleanup work in useEffect');\n//     };\n//     //getting rid of timer\n\n//     //const timer =\n//     // return () => {\n//     //   //clearTimeout(timer);\n//     //   console.log('[Cockpit2.js] cleanup work in useEffect');\n//     // };\n//   });\n\n//   //{classes.Cockpit}\n//   // {cockpitBootstrap}\n//   return (\n//     <React.Fragment>\n//       <p>hey there buddy</p>\n//       <button\n//         className=\"btn btn-primary\"\n//         type=\"button\"\n//         onClick={props.deleteCockpit2}\n//       >\n//         Delete Cockpit\n//       </button>\n//     </React.Fragment>\n//   );\n// };\n// //export default Cockpit;\n\n// export default React.memo(Cockpit2);\n"]},"metadata":{},"sourceType":"module"}