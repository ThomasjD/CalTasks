{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/ViewContent/Syllabus/MaxReact/Lessons.js\";\nimport React, { Component } from 'react'; //import Task from './Task/Task';\n\nimport ErrorBoundary from '../../../ErrorBoundary/ErrorBoundary';\nimport student from '../../../../containers/Student.css';\nimport Lesson from './Lesson/Lesson';\nimport SyllabusContext from '../../../../context/syllabusContext';\nimport calendarObj from '../../../Calendar/calendarObj';\n\nclass Lessons extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clickToAddDelete: null\n    };\n\n    this.lessonChangeHandler = () => {\n      //let contentchoice = event.target.value;\n      let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n      let handlerChoice = ''; //string: '#' handler inside of database\n\n      let dataLocation = ''; // string: where obj found inside database\n\n      let infoType = ''; //string: index/id/\n\n      let info = ''; //string: actual info\n\n      let today = calendarObj(); // let value = '';\n\n      let dataRequestMessage = {};\n\n      switch (this.props.contentChoice) {\n        case '1':\n          break;\n\n        case '2':\n          break;\n\n        case '3':\n          // change\n          //   event,\n          //   'syllabus',\n          //   functionChoiceChange,\n          //   'id',\n          //   lesson.id\n          // )\n          contentchoice = event.target.value;\n          typeOfData = '';\n          handlerChoice = '';\n          dataLocation = '';\n          infoType = '';\n          info = '';\n          break;\n\n        case '4':\n          break;\n\n        case '5':\n          break;\n\n        case '6':\n          typeOfData = 'syllabus';\n          handlerChoice = '6';\n          dataLocation = 'maxReactWorkLeft';\n          infoType = null;\n          info = null;\n          break;\n      }\n\n      dataRequestMessage = {\n        typeOfData: typeOfData,\n        handlerChoice: handlerChoice,\n        dataLocation: dataLocation,\n        infoType: infoType,\n        info: info\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage);\n    };\n\n    this.lessonDeleteHandler = () => {};\n\n    this.requestDataHandler = event => {\n      let contentchoice = event.target.value;\n      let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n      let handlerChoice = ''; //string: '#' handler inside of database\n\n      let dataLocation = ''; // string: where obj found inside database\n\n      let infoType = ''; //string: index/id/\n\n      let info = ''; //string: actual info\n\n      let today = calendarObj(); // let value = '';\n\n      let dataRequestMessage = {};\n\n      switch (contentchoice) {\n        case '1':\n          break;\n\n        case '2':\n          break;\n\n        case '3':\n          // change\n          //   event,\n          //   'syllabus',\n          //   functionChoiceChange,\n          //   'id',\n          //   lesson.id\n          // )\n          break;\n\n        case '4':\n          break;\n\n        case '5':\n          break;\n\n        case '6':\n          typeOfData = 'syllabus';\n          handlerChoice = '6';\n          dataLocation = 'maxReactWorkLeft';\n          infoType = null;\n          info = null;\n          break;\n      }\n\n      dataRequestMessage = {\n        typeOfData: typeOfData,\n        handlerChoice: handlerChoice,\n        dataLocation: dataLocation,\n        infoType: infoType,\n        info: info\n      };\n      this.context.dataRequestHandler(event, dataRequestMessage);\n      let contentViewObject = {\n        target: {\n          value: contentchoice\n        }\n      };\n      this.props.contentViewHandler(contentViewObject);\n    };\n  }\n\n  renderAllLessonsTableHeaderHandler() {\n    //this is part of First row of table\n    let clickToAddDelete = null;\n\n    if (this.props.showLeftOverLessonsFromOrigSyllabus) {\n      clickToAddDelete = 'Click to schedule this lesson';\n    } else {\n      clickToAddDelete = 'Click to Delete Lesson';\n    }\n\n    let header = Object.keys(this.context.everythingSyllabus.syllabusData.lastLessonHeader); //lastLessonHeader;\n\n    return header.map((key, index) => {\n      //console.log(`this is the key: (${key}) and the index: (${index})`);\n      if (key === 'id') {\n        return React.createElement(\"th\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }, clickToAddDelete);\n      } else {\n        return React.createElement(\"th\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, key.toUpperCase());\n      }\n    });\n  } //rendering current lessons\n\n\n  allLessonssHandler() {\n    //let contentchoice = event.target.value;\n    let typeOfData = 'syllabus'; //string: syllabus,tasks,events,objectives\n\n    let handlerChoice = ''; //string: '#' handler inside of database\n\n    let dataLocation = ''; // string: where obj found inside database\n\n    let infoType = ''; //string: index/id/\n\n    let info = ''; //string: actual info\n\n    let handlerType = null;\n\n    switch (this.props.everything.contentChoice) {\n      case '3':\n        //show syllbus choice, then pick one to view\n        break;\n\n      case '6':\n        //from newSyllabus Component\n        this.props.showLeftOverLessonsFromOrigSyllabus ? handlerType = 'add' : handlerType = 'delete'; // this.props.showLeftOverLessonsFromOrigSyllabus\n        // ? handlerChoice =\n\n        break;\n    }\n\n    return this.props.lessons.map((lesson, index) => {\n      let functionChoiceDelete = null;\n      let functionChoiceChange = null;\n\n      if (this.props.everything.contentChoice === '3') {\n        handlerChoice = '3'; //functionChoiceDelete\n\n        handlerChoice = '4'; //functionChoiceChange\n      } else {\n        handlerChoice = '5'; //functionChoiceDelete\n\n        handlerChoice = '6'; //functionChoiceChange\n      }\n\n      let dataRequestMessage = {\n        typeOfData: typeOfData,\n        handlerChoice: handlerChoice,\n        dataLocation: dataLocation,\n        infoType: infoType,\n        info: info\n      };\n      return React.createElement(ErrorBoundary, {\n        key: lesson.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(Lesson, {\n        lesson: lesson.lesson,\n        completion: lesson.completion,\n        particularKey: lesson.id,\n        click: event => this.context.dataRequestHandler(event, 'syllabus', functionChoiceDelete, 'index', index) //changed={event => this.props.changed(event, handlerType, lesson.id)}\n        ,\n        changed: event => this.requestDataHandler(event, functionChoiceChange, index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }));\n    });\n  } // getSnapshotBeforeUpdate(prevProps, prevState) {\n  //   console.log('[Tasks] getSnapshotBeforeUpdate');\n  //   return { message: 'Snapshot' };\n  // }\n  // // componentWillUpdate() {\n  // //     return\n  // // }\n  // componentDidUpdate(prevProps, prevState, message) {\n  //   console.log('[Tasks] componentDidUpdate');\n  //   console.log(message);\n  // }\n  // componentWillUnmount() {\n  //   console.log('[Tasks.js] componentWillUnmount');\n  // }\n\n\n  render() {\n    console.log('[Lessons] rendering...'); //<p> contentChoice: {this.props.everything.contentChoice}</p>;\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      id: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \" Syllabus\"), React.createElement(\"table\", {\n      id: \"students\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, this.renderAllLessonsTableHeaderHandler()), this.allLessonssHandler())));\n  }\n\n}\n\nLessons.contextType = SyllabusContext;\nexport default Lessons;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/ViewContent/Syllabus/MaxReact/Lessons.js"],"names":["React","Component","ErrorBoundary","student","Lesson","SyllabusContext","calendarObj","Lessons","constructor","props","state","clickToAddDelete","lessonChangeHandler","typeOfData","handlerChoice","dataLocation","infoType","info","today","dataRequestMessage","contentChoice","contentchoice","event","target","value","context","dataRequestHandler","lessonDeleteHandler","requestDataHandler","contentViewObject","contentViewHandler","renderAllLessonsTableHeaderHandler","showLeftOverLessonsFromOrigSyllabus","header","Object","keys","everythingSyllabus","syllabusData","lastLessonHeader","map","key","index","toUpperCase","allLessonssHandler","handlerType","everything","lessons","lesson","functionChoiceDelete","functionChoiceChange","id","completion","render","console","log","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,eAAP,MAA4B,qCAA5B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;;AACA,MAAMC,OAAN,SAAsBN,SAAtB,CAAgC;AAC9BO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAGnBC,KAHmB,GAGX;AACNC,MAAAA,gBAAgB,EAAE;AADZ,KAHW;;AAAA,SAiBnBC,mBAjBmB,GAiBG,MAAM;AAC1B;AACA,UAAIC,UAAU,GAAG,EAAjB,CAF0B,CAEL;;AACrB,UAAIC,aAAa,GAAG,EAApB,CAH0B,CAGF;;AACxB,UAAIC,YAAY,GAAG,EAAnB,CAJ0B,CAIH;;AACvB,UAAIC,QAAQ,GAAG,EAAf,CAL0B,CAKP;;AACnB,UAAIC,IAAI,GAAG,EAAX,CAN0B,CAMX;;AACf,UAAIC,KAAK,GAAGZ,WAAW,EAAvB,CAP0B,CAQ1B;;AACA,UAAIa,kBAAkB,GAAG,EAAzB;;AACA,cAAQ,KAAKV,KAAL,CAAWW,aAAnB;AACE,aAAK,GAAL;AACE;;AACF,aAAK,GAAL;AACE;;AACF,aAAK,GAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,UAAAA,aAAa,GAAGC,KAAK,CAACC,MAAN,CAAaC,KAA7B;AACAX,UAAAA,UAAU,GAAG,EAAb;AACAC,UAAAA,aAAa,GAAG,EAAhB;AACAC,UAAAA,YAAY,GAAG,EAAf;AACAC,UAAAA,QAAQ,GAAG,EAAX;AACAC,UAAAA,IAAI,GAAG,EAAP;AACA;;AACF,aAAK,GAAL;AACE;;AACF,aAAK,GAAL;AACE;;AACF,aAAK,GAAL;AACEJ,UAAAA,UAAU,GAAG,UAAb;AACAC,UAAAA,aAAa,GAAG,GAAhB;AACAC,UAAAA,YAAY,GAAG,kBAAf;AACAC,UAAAA,QAAQ,GAAG,IAAX;AACAC,UAAAA,IAAI,GAAG,IAAP;AACA;AA/BJ;;AAiCAE,MAAAA,kBAAkB,GAAG;AACnBN,QAAAA,UAAU,EAAEA,UADO;AAEnBC,QAAAA,aAAa,EAAEA,aAFI;AAGnBC,QAAAA,YAAY,EAAEA,YAHK;AAInBC,QAAAA,QAAQ,EAAEA,QAJS;AAKnBC,QAAAA,IAAI,EAAEA;AALa,OAArB;AAQA,WAAKQ,OAAL,CAAaC,kBAAb,CAAgCJ,KAAhC,EAAuCH,kBAAvC;AACD,KArEkB;;AAAA,SAuEnBQ,mBAvEmB,GAuEG,MAAM,CAAE,CAvEX;;AAAA,SAwEnBC,kBAxEmB,GAwEEN,KAAK,IAAI;AAC5B,UAAID,aAAa,GAAGC,KAAK,CAACC,MAAN,CAAaC,KAAjC;AACA,UAAIX,UAAU,GAAG,EAAjB,CAF4B,CAEP;;AACrB,UAAIC,aAAa,GAAG,EAApB,CAH4B,CAGJ;;AACxB,UAAIC,YAAY,GAAG,EAAnB,CAJ4B,CAIL;;AACvB,UAAIC,QAAQ,GAAG,EAAf,CAL4B,CAKT;;AACnB,UAAIC,IAAI,GAAG,EAAX,CAN4B,CAMb;;AACf,UAAIC,KAAK,GAAGZ,WAAW,EAAvB,CAP4B,CAQ5B;;AACA,UAAIa,kBAAkB,GAAG,EAAzB;;AACA,cAAQE,aAAR;AACE,aAAK,GAAL;AACE;;AACF,aAAK,GAAL;AACE;;AACF,aAAK,GAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACF,aAAK,GAAL;AACE;;AACF,aAAK,GAAL;AACE;;AACF,aAAK,GAAL;AACER,UAAAA,UAAU,GAAG,UAAb;AACAC,UAAAA,aAAa,GAAG,GAAhB;AACAC,UAAAA,YAAY,GAAG,kBAAf;AACAC,UAAAA,QAAQ,GAAG,IAAX;AACAC,UAAAA,IAAI,GAAG,IAAP;AACA;AAxBJ;;AA0BAE,MAAAA,kBAAkB,GAAG;AACnBN,QAAAA,UAAU,EAAEA,UADO;AAEnBC,QAAAA,aAAa,EAAEA,aAFI;AAGnBC,QAAAA,YAAY,EAAEA,YAHK;AAInBC,QAAAA,QAAQ,EAAEA,QAJS;AAKnBC,QAAAA,IAAI,EAAEA;AALa,OAArB;AAQA,WAAKQ,OAAL,CAAaC,kBAAb,CAAgCJ,KAAhC,EAAuCH,kBAAvC;AAEA,UAAIU,iBAAiB,GAAG;AACtBN,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAEH;AADD;AADc,OAAxB;AAMA,WAAKZ,KAAL,CAAWqB,kBAAX,CAA8BD,iBAA9B;AACD,KA7HkB;AAElB;;AA6HDE,EAAAA,kCAAkC,GAAG;AACnC;AACA,QAAIpB,gBAAgB,GAAG,IAAvB;;AAEA,QAAI,KAAKF,KAAL,CAAWuB,mCAAf,EAAoD;AAClDrB,MAAAA,gBAAgB,GAAG,+BAAnB;AACD,KAFD,MAEO;AACLA,MAAAA,gBAAgB,GAAG,wBAAnB;AACD;;AAED,QAAIsB,MAAM,GAAGC,MAAM,CAACC,IAAP,CACX,KAAKV,OAAL,CAAaW,kBAAb,CAAgCC,YAAhC,CAA6CC,gBADlC,CAAb,CAVmC,CAanC;;AACA,WAAOL,MAAM,CAACM,GAAP,CAAW,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAChC;AAEA,UAAID,GAAG,KAAK,IAAZ,EAAkB;AAChB,eAAO;AAAI,UAAA,GAAG,EAAEC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAiB9B,gBAAjB,CAAP;AACD,OAFD,MAEO;AACL,eAAO;AAAI,UAAA,GAAG,EAAE8B,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAiBD,GAAG,CAACE,WAAJ,EAAjB,CAAP;AACD;AACF,KARM,CAAP;AASD,GAvJ6B,CAyJ9B;;;AACAC,EAAAA,kBAAkB,GAAG;AACnB;AACA,QAAI9B,UAAU,GAAG,UAAjB,CAFmB,CAEU;;AAC7B,QAAIC,aAAa,GAAG,EAApB,CAHmB,CAGK;;AACxB,QAAIC,YAAY,GAAG,EAAnB,CAJmB,CAII;;AACvB,QAAIC,QAAQ,GAAG,EAAf,CALmB,CAKA;;AACnB,QAAIC,IAAI,GAAG,EAAX,CANmB,CAMJ;;AAEf,QAAI2B,WAAW,GAAG,IAAlB;;AAEA,YAAQ,KAAKnC,KAAL,CAAWoC,UAAX,CAAsBzB,aAA9B;AACE,WAAK,GAAL;AAAU;AACR;;AACF,WAAK,GAAL;AAAU;AACR,aAAKX,KAAL,CAAWuB,mCAAX,GACKY,WAAW,GAAG,KADnB,GAEKA,WAAW,GAAG,QAFnB,CADF,CAIE;AACA;;AAEA;AAVJ;;AAaA,WAAO,KAAKnC,KAAL,CAAWqC,OAAX,CAAmBP,GAAnB,CAAuB,CAACQ,MAAD,EAASN,KAAT,KAAmB;AAC/C,UAAIO,oBAAoB,GAAG,IAA3B;AACA,UAAIC,oBAAoB,GAAG,IAA3B;;AAEA,UAAI,KAAKxC,KAAL,CAAWoC,UAAX,CAAsBzB,aAAtB,KAAwC,GAA5C,EAAiD;AAC/CN,QAAAA,aAAa,GAAG,GAAhB,CAD+C,CAC1B;;AACrBA,QAAAA,aAAa,GAAG,GAAhB,CAF+C,CAE1B;AACtB,OAHD,MAGO;AACLA,QAAAA,aAAa,GAAG,GAAhB,CADK,CACgB;;AACrBA,QAAAA,aAAa,GAAG,GAAhB,CAFK,CAEgB;AACtB;;AAED,UAAIK,kBAAkB,GAAG;AACvBN,QAAAA,UAAU,EAAEA,UADW;AAEvBC,QAAAA,aAAa,EAAEA,aAFQ;AAGvBC,QAAAA,YAAY,EAAEA,YAHS;AAIvBC,QAAAA,QAAQ,EAAEA,QAJa;AAKvBC,QAAAA,IAAI,EAAEA;AALiB,OAAzB;AAQA,aACE,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAE8B,MAAM,CAACG,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACE,QAAA,MAAM,EAAEH,MAAM,CAACA,MADjB;AAEE,QAAA,UAAU,EAAEA,MAAM,CAACI,UAFrB;AAGE,QAAA,aAAa,EAAEJ,MAAM,CAACG,EAHxB;AAIE,QAAA,KAAK,EAAE5B,KAAK,IACV,KAAKG,OAAL,CAAaC,kBAAb,CACEJ,KADF,EAEE,UAFF,EAGE0B,oBAHF,EAIE,OAJF,EAKEP,KALF,CALJ,CAaE;AAbF;AAeE,QAAA,OAAO,EAAEnB,KAAK,IACZ,KAAKM,kBAAL,CAAwBN,KAAxB,EAA+B2B,oBAA/B,EAAqDR,KAArD,CAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAuBD,KA3CM,CAAP;AA4CD,GA7N6B,CA+N9B;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEAW,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EADO,CAEP;;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAGE;AAAO,MAAA,EAAE,EAAC,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKvB,kCAAL,EAAL,CADF,EAEG,KAAKY,kBAAL,EAFH,CADF,CAHF,CADF;AAYD;;AAhQ6B;;AAA1BpC,O,CAOGgD,W,GAAclD,e;AA4PvB,eAAeE,OAAf","sourcesContent":["import React, { Component } from 'react';\n//import Task from './Task/Task';\nimport ErrorBoundary from '../../../ErrorBoundary/ErrorBoundary';\nimport student from '../../../../containers/Student.css';\nimport Lesson from './Lesson/Lesson';\nimport SyllabusContext from '../../../../context/syllabusContext';\nimport calendarObj from '../../../Calendar/calendarObj';\nclass Lessons extends Component {\n  constructor(props) {\n    super(props);\n  }\n  state = {\n    clickToAddDelete: null\n  };\n  static contextType = SyllabusContext;\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   console.log('[maxReact Lessons.js] shouldComponentUpdate');\n  //   if (nextProps.lessonsLength !== this.props.lessonsLength) {\n  //     return true;\n  //   } else {\n  //     return false;\n  //   }\n  // }\n\n  //rendering current lessons headers\n  lessonChangeHandler = () => {\n    //let contentchoice = event.target.value;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    let info = ''; //string: actual info\n    let today = calendarObj();\n    // let value = '';\n    let dataRequestMessage = {};\n    switch (this.props.contentChoice) {\n      case '1':\n        break;\n      case '2':\n        break;\n      case '3':\n        // change\n        //   event,\n        //   'syllabus',\n        //   functionChoiceChange,\n        //   'id',\n        //   lesson.id\n        // )\n\n        contentchoice = event.target.value;\n        typeOfData = '';\n        handlerChoice = '';\n        dataLocation = '';\n        infoType = '';\n        info = '';\n        break;\n      case '4':\n        break;\n      case '5':\n        break;\n      case '6':\n        typeOfData = 'syllabus';\n        handlerChoice = '6';\n        dataLocation = 'maxReactWorkLeft';\n        infoType = null;\n        info = null;\n        break;\n    }\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    this.context.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  lessonDeleteHandler = () => {};\n  requestDataHandler = event => {\n    let contentchoice = event.target.value;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    let info = ''; //string: actual info\n    let today = calendarObj();\n    // let value = '';\n    let dataRequestMessage = {};\n    switch (contentchoice) {\n      case '1':\n        break;\n      case '2':\n        break;\n      case '3':\n        // change\n        //   event,\n        //   'syllabus',\n        //   functionChoiceChange,\n        //   'id',\n        //   lesson.id\n        // )\n        break;\n      case '4':\n        break;\n      case '5':\n        break;\n      case '6':\n        typeOfData = 'syllabus';\n        handlerChoice = '6';\n        dataLocation = 'maxReactWorkLeft';\n        infoType = null;\n        info = null;\n        break;\n    }\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    this.context.dataRequestHandler(event, dataRequestMessage);\n\n    let contentViewObject = {\n      target: {\n        value: contentchoice\n      }\n    };\n\n    this.props.contentViewHandler(contentViewObject);\n  };\n\n  renderAllLessonsTableHeaderHandler() {\n    //this is part of First row of table\n    let clickToAddDelete = null;\n\n    if (this.props.showLeftOverLessonsFromOrigSyllabus) {\n      clickToAddDelete = 'Click to schedule this lesson';\n    } else {\n      clickToAddDelete = 'Click to Delete Lesson';\n    }\n\n    let header = Object.keys(\n      this.context.everythingSyllabus.syllabusData.lastLessonHeader\n    );\n    //lastLessonHeader;\n    return header.map((key, index) => {\n      //console.log(`this is the key: (${key}) and the index: (${index})`);\n\n      if (key === 'id') {\n        return <th key={index}>{clickToAddDelete}</th>;\n      } else {\n        return <th key={index}>{key.toUpperCase()}</th>;\n      }\n    });\n  }\n\n  //rendering current lessons\n  allLessonssHandler() {\n    //let contentchoice = event.target.value;\n    let typeOfData = 'syllabus'; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    let info = ''; //string: actual info\n\n    let handlerType = null;\n\n    switch (this.props.everything.contentChoice) {\n      case '3': //show syllbus choice, then pick one to view\n        break;\n      case '6': //from newSyllabus Component\n        this.props.showLeftOverLessonsFromOrigSyllabus\n          ? (handlerType = 'add')\n          : (handlerType = 'delete');\n        // this.props.showLeftOverLessonsFromOrigSyllabus\n        // ? handlerChoice =\n\n        break;\n    }\n\n    return this.props.lessons.map((lesson, index) => {\n      let functionChoiceDelete = null;\n      let functionChoiceChange = null;\n\n      if (this.props.everything.contentChoice === '3') {\n        handlerChoice = '3'; //functionChoiceDelete\n        handlerChoice = '4'; //functionChoiceChange\n      } else {\n        handlerChoice = '5'; //functionChoiceDelete\n        handlerChoice = '6'; //functionChoiceChange\n      }\n\n      let dataRequestMessage = {\n        typeOfData: typeOfData,\n        handlerChoice: handlerChoice,\n        dataLocation: dataLocation,\n        infoType: infoType,\n        info: info\n      };\n\n      return (\n        <ErrorBoundary key={lesson.id}>\n          <Lesson\n            lesson={lesson.lesson}\n            completion={lesson.completion}\n            particularKey={lesson.id}\n            click={event =>\n              this.context.dataRequestHandler(\n                event,\n                'syllabus',\n                functionChoiceDelete,\n                'index',\n                index\n              )\n            }\n            //changed={event => this.props.changed(event, handlerType, lesson.id)}\n\n            changed={event =>\n              this.requestDataHandler(event, functionChoiceChange, index)\n            }\n          ></Lesson>\n        </ErrorBoundary>\n      );\n    });\n  }\n\n  // getSnapshotBeforeUpdate(prevProps, prevState) {\n  //   console.log('[Tasks] getSnapshotBeforeUpdate');\n  //   return { message: 'Snapshot' };\n  // }\n\n  // // componentWillUpdate() {\n  // //     return\n  // // }\n\n  // componentDidUpdate(prevProps, prevState, message) {\n  //   console.log('[Tasks] componentDidUpdate');\n  //   console.log(message);\n  // }\n\n  // componentWillUnmount() {\n  //   console.log('[Tasks.js] componentWillUnmount');\n  // }\n\n  render() {\n    console.log('[Lessons] rendering...');\n    //<p> contentChoice: {this.props.everything.contentChoice}</p>;\n    return (\n      <div>\n        <h3 id=\"title\"> Syllabus</h3>\n\n        <table id=\"students\">\n          <tbody>\n            <tr>{this.renderAllLessonsTableHeaderHandler()}</tr>\n            {this.allLessonssHandler()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Lessons;\n"]},"metadata":{},"sourceType":"module"}