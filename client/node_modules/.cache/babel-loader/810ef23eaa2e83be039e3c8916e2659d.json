{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/containers/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport rocky from './App.module.css';\nimport Tasks from '../components/Tasks/Tasks'; //import Task from '../components/Tasks/Task/Task'\n\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport '../components/Tasks/Task/Task';\nimport TodayTasks from '../components/TodayTasks/TodayTasks'; //import MaxReact from '../components/Syllabus/MaxReact'\n\nimport WithClass from '../hoc/WithClass'; //import for bootstraps\n\nimport axios from 'axios';\nimport { Container, Row, Col } from 'reactstrap';\nimport Post from '../components/Post';\nimport Header from '../components/Header';\nimport SideCard from '../components/SideCard';\n\nclass App extends Component {\n  constructor(props) {\n    super(props); //console.log('[App.js] constructor')\n    //console.log(this.props.maxReact)\n\n    this.state = {\n      tasks: [{\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      }, {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      }, {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }],\n      // maxReact: [\n      //   {id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n      //   {id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n      //   {id: 'kjhck2', lesson: '92. Using useEffect() in Functional Components ', completion: false },\n      // ],\n      Monday: [{\n        id: 'morning',\n        task: ''\n      }, {\n        id: 'afternoon',\n        task: ''\n      }, {\n        id: 'evening',\n        task: ''\n      }],\n      Tuesday: [{\n        id: 'morning',\n        task: ''\n      }, {\n        id: 'afternoon',\n        task: ''\n      }, {\n        id: 'evening',\n        task: ''\n      }],\n      showTasks: false,\n      showTasksToday: false,\n      showCockpit: true,\n      showView: '0'\n    };\n\n    this.toggleShowTasksHandler = () => {\n      switch (this.state.showView) {\n        case '0':\n          this.setState({\n            showView: '1'\n          });\n          break;\n\n        case '1':\n          this.setState({\n            showView: '0'\n          });\n          break;\n\n        case '2':\n          this.setState({\n            showView: '1'\n          });\n          break;\n      } //old way of showing all tasks\n\n\n      const doesShow = this.state.showTasks;\n      this.setState({\n        showTasks: !doesShow\n      }); //tryout\n\n      const Monday = [...this.state.Monday];\n      Monday[0].task = 'higher love';\n      this.setState({\n        Monday: Monday\n      });\n    };\n\n    this.deleteTaskhandler = taskIndex => {\n      //get tasks array\n      const tasks = [...this.state.tasks]; //splice task of interst\n\n      tasks.splice(taskIndex, 1); //update new list of tasks to state\n\n      this.setState({\n        tasks: tasks\n      });\n    };\n\n    this.taskChangeHandler = (event, taskChangedId) => {\n      //find the task that matches the taskChangedId\n      const foundTaskId = this.state.tasks.findIndex(currentId => {\n        return currentId.id === taskChangedId;\n      }); //create new task item that we will put into array\n\n      const updatedTask = _objectSpread({}, this.state.tasks[foundTaskId]);\n\n      updatedTask.todo = event.target.value; //pull out the states tasks array\n\n      const tasks = [...this.state.tasks]; //update the task with id of interest w/ new task description\n\n      tasks[foundTaskId] = updatedTask; //update the state\n\n      this.setState({\n        tasks: tasks\n      });\n    };\n\n    this.addTaskTodayHandler = (event, taskChangedId) => {};\n\n    this.displayTodayScheduleHandler = () => {\n      switch (this.state.showView) {\n        case '0':\n          this.setState({\n            showView: '2'\n          });\n          break;\n\n        case '1':\n          this.setState({\n            showView: '2'\n          });\n          break;\n\n        case '2':\n          this.setState({\n            showView: '0'\n          });\n          break;\n      } //pull out the states tasks array\n\n\n      const Monday = [...this.state.Monday]; //update the task with id of interest w/ new task description\n\n      Monday[0].task = 'higher love';\n      /*old way of showing Today's Tasks\n      const doesShowToday = this.state.showTasksToday;\n      this.setState({ showTasksToday: !doesShowToday });\n      */\n    };\n  } //data\n\n\n  // componentWillMount() {\n  //   console.log('[App.js] componentWillMount')\n  // }\n  shouldComponentUpdate() {\n    console.log('[App.js] shouldComponentUpdate');\n    return true;\n  }\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount');\n  }\n\n  componentDidUpdate(nextProps, nextState) {\n    console.log('[App.js] componentDidUpdate ');\n  } //show list of tasks\n\n\n  render() {\n    //console.log(this.state.Monday[0])\n    //console.log(this.state.Monday[0])\n    //let newShit =\n    //this.setState (Monday: this.state.Monday[0].taskTime.afternoon) = thisData\n    //console.log(this.state.Monday[0].taskTime.afternoon)\n    let displayTasks = null; //clicking on the show Tasks button to show available tasks\n    //tasks, clicked, changed will be sent to <Tasks>\n\n    switch (this.state.showView) {\n      case '0':\n        displayTasks = React.createElement(Cockpit, {\n          title: this.props.appTitle,\n          clicked: this.toggleShowTasksHandler,\n          tasksLength: this.state.tasks.length,\n          todayClicked: this.displayTodayScheduleHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        });\n        break;\n\n      case '1':\n        displayTasks = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205\n          },\n          __self: this\n        }, React.createElement(Cockpit, {\n          title: this.props.appTitle,\n          clicked: this.toggleShowTasksHandler,\n          tasksLength: this.state.tasks.length,\n          todayClicked: this.displayTodayScheduleHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206\n          },\n          __self: this\n        }), React.createElement(Tasks, {\n          tasks: this.state.tasks,\n          clicked: this.deleteTaskhandler,\n          changed: this.taskChangeHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }));\n        break;\n\n      case '2':\n        displayTasks = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }, React.createElement(Cockpit, {\n          title: this.props.appTitle,\n          clicked: this.toggleShowTasksHandler,\n          tasksLength: this.state.tasks.length,\n          todayClicked: this.displayTodayScheduleHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }), React.createElement(\"table\", {\n          class: \"table\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231\n          },\n          __self: this\n        }, React.createElement(\"thead\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }, React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        }, React.createElement(\"th\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234\n          },\n          __self: this\n        }, \"#\"), React.createElement(\"th\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          },\n          __self: this\n        }, \"Time \"), React.createElement(\"th\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236\n          },\n          __self: this\n        }, \"Task\"))), React.createElement(\"tbody\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }, React.createElement(\"tr\", {\n          class: \"table-success\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }, React.createElement(TodayTasks, {\n          monday: this.state.Monday,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        })))));\n        break;\n    } // if (this.state.showTasks) {\n    //   displayTasks = (\n    //     <Tasks\n    //       tasks={this.state.tasks}\n    //       clicked={this.deleteTaskhandler}\n    //       changed={this.taskChangeHandler}\n    //     />\n    //   );\n    // }\n    // let displayTasksToday = null;\n    //{displayTasksToday}\n    // if (this.state.showTasksToday) {\n    //   displayTasksToday = <TodayTasks monday={this.state.Monday} />;\n    // }\n\n\n    let tasklength = this.state.tasks.length; //console.log(tasklength)\n    //<div className={rocky.App}> </div>\n\n    return React.createElement(WithClass, {\n      passClass: rocky.App,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => {\n        this.setState({\n          showCockpit: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, ' ', \"Remove Cockpit\"), displayTasks);\n  }\n\n} //<p>this class is {classes}</p>\n//export default Radium(App);\n\n\nApp.getDerivedStateFromProps = (state, props) => {\n  console.log('[App.js] getDerivedStateFromProps', props);\n  return state;\n};\n\nexport default App; //<p className={rocky[classes]}>Things to Do!</p>\n//using css modules on multiple classNames\n//{classNames({[styles.foo]: true, [styles.bar]: true})}\n//<p className={classNames({[rocky[classes]]: true, [rocky.red]: true})}>Things to Do!</p>\n\n/*old way of displaying\n<WithClass passClass={rocky.App}>\n        <button\n          onClick={() => {\n            this.setState({ showCockpit: false });\n          }}\n        >\n          {' '}\n          Remove Cockpit\n        </button>\n\n        {this.state.showCockpit ? (\n          <Cockpit\n            title={this.props.appTitle}\n            clicked={this.toggleShowTasksHandler}\n            tasksLength={this.state.tasks.length}\n            todayClicked={this.displayTodayScheduleHandler}\n          />\n        ) : null}\n\n        {displayTasks}\n      </WithClass>\n      */","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/App.js"],"names":["React","Component","rocky","Tasks","Cockpit","TodayTasks","WithClass","axios","Container","Row","Col","Post","Header","SideCard","App","constructor","props","state","tasks","id","todo","deadline","location","Monday","task","Tuesday","showTasks","showTasksToday","showCockpit","showView","toggleShowTasksHandler","setState","doesShow","deleteTaskhandler","taskIndex","splice","taskChangeHandler","event","taskChangedId","foundTaskId","findIndex","currentId","updatedTask","target","value","addTaskTodayHandler","displayTodayScheduleHandler","shouldComponentUpdate","console","log","componentDidMount","componentDidUpdate","nextProps","nextState","render","displayTasks","appTitle","length","tasklength","getDerivedStateFromProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport rocky from './App.module.css';\nimport Tasks from '../components/Tasks/Tasks';\n//import Task from '../components/Tasks/Task/Task'\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport '../components/Tasks/Task/Task';\nimport TodayTasks from '../components/TodayTasks/TodayTasks';\n//import MaxReact from '../components/Syllabus/MaxReact'\nimport WithClass from '../hoc/WithClass';\n\n//import for bootstraps\nimport axios from 'axios';\nimport { Container, Row, Col } from 'reactstrap';\nimport Post from '../components/Post';\nimport Header from '../components/Header';\nimport SideCard from '../components/SideCard';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    //console.log('[App.js] constructor')\n    //console.log(this.props.maxReact)\n  }\n  //data\n  state = {\n    tasks: [\n      {\n        id: 'qrwrwq',\n        todo: 'Find work',\n        deadline: 'Lunes',\n        location: 'Poplado'\n      },\n      {\n        id: 'egewhw',\n        todo: 'buy shoes',\n        deadline: 'Martes',\n        location: 'Floresta'\n      },\n      {\n        id: 'asfasv',\n        todo: 'mail package',\n        deadline: 'Jueves',\n        location: 'Laureles'\n      }\n    ],\n    // maxReact: [\n    //   {id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n    //   {id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n    //   {id: 'kjhck2', lesson: '92. Using useEffect() in Functional Components ', completion: false },\n    // ],\n    Monday: [\n      { id: 'morning', task: '' },\n      { id: 'afternoon', task: '' },\n      { id: 'evening', task: '' }\n    ],\n    Tuesday: [\n      { id: 'morning', task: '' },\n      { id: 'afternoon', task: '' },\n      { id: 'evening', task: '' }\n    ],\n    showTasks: false,\n    showTasksToday: false,\n    showCockpit: true,\n    showView: '0'\n  };\n\n  static getDerivedStateFromProps = (state, props) => {\n    console.log('[App.js] getDerivedStateFromProps', props);\n    return state;\n  };\n\n  // componentWillMount() {\n  //   console.log('[App.js] componentWillMount')\n  // }\n\n  shouldComponentUpdate() {\n    console.log('[App.js] shouldComponentUpdate');\n    return true;\n  }\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount');\n  }\n\n  componentDidUpdate(nextProps, nextState) {\n    console.log('[App.js] componentDidUpdate ');\n  }\n\n  //show list of tasks\n  toggleShowTasksHandler = () => {\n    switch (this.state.showView) {\n      case '0':\n        this.setState({ showView: '1' });\n\n        break;\n\n      case '1':\n        this.setState({ showView: '0' });\n        break;\n\n      case '2':\n        this.setState({ showView: '1' });\n        break;\n    }\n\n    //old way of showing all tasks\n    const doesShow = this.state.showTasks;\n    this.setState({ showTasks: !doesShow });\n\n    //tryout\n    const Monday = [...this.state.Monday];\n\n    Monday[0].task = 'higher love';\n\n    this.setState({ Monday: Monday });\n  };\n\n  //delete a task\n  deleteTaskhandler = taskIndex => {\n    //get tasks array\n    const tasks = [...this.state.tasks];\n    //splice task of interst\n    tasks.splice(taskIndex, 1);\n    //update new list of tasks to state\n    this.setState({ tasks: tasks });\n  };\n\n  //dynamic edit task\n  taskChangeHandler = (event, taskChangedId) => {\n    //find the task that matches the taskChangedId\n    const foundTaskId = this.state.tasks.findIndex(currentId => {\n      return currentId.id === taskChangedId;\n    });\n\n    //create new task item that we will put into array\n    const updatedTask = { ...this.state.tasks[foundTaskId] };\n    updatedTask.todo = event.target.value;\n\n    //pull out the states tasks array\n    const tasks = [...this.state.tasks];\n\n    //update the task with id of interest w/ new task description\n    tasks[foundTaskId] = updatedTask;\n\n    //update the state\n    this.setState({ tasks: tasks });\n  };\n\n  addTaskTodayHandler = (event, taskChangedId) => {};\n\n  displayTodayScheduleHandler = () => {\n    switch (this.state.showView) {\n      case '0':\n        this.setState({ showView: '2' });\n        break;\n\n      case '1':\n        this.setState({ showView: '2' });\n        break;\n\n      case '2':\n        this.setState({ showView: '0' });\n        break;\n    }\n\n    //pull out the states tasks array\n    const Monday = [...this.state.Monday];\n\n    //update the task with id of interest w/ new task description\n    Monday[0].task = 'higher love';\n\n    /*old way of showing Today's Tasks\n    const doesShowToday = this.state.showTasksToday;\n    this.setState({ showTasksToday: !doesShowToday });\n    */\n  };\n\n  render() {\n    //console.log(this.state.Monday[0])\n\n    //console.log(this.state.Monday[0])\n\n    //let newShit =\n    //this.setState (Monday: this.state.Monday[0].taskTime.afternoon) = thisData\n    //console.log(this.state.Monday[0].taskTime.afternoon)\n    let displayTasks = null;\n\n    //clicking on the show Tasks button to show available tasks\n    //tasks, clicked, changed will be sent to <Tasks>\n\n    switch (this.state.showView) {\n      case '0':\n        displayTasks = (\n          <Cockpit\n            title={this.props.appTitle}\n            clicked={this.toggleShowTasksHandler}\n            tasksLength={this.state.tasks.length}\n            todayClicked={this.displayTodayScheduleHandler}\n          />\n        );\n        break;\n\n      case '1':\n        displayTasks = (\n          <React.Fragment>\n            <Cockpit\n              title={this.props.appTitle}\n              clicked={this.toggleShowTasksHandler}\n              tasksLength={this.state.tasks.length}\n              todayClicked={this.displayTodayScheduleHandler}\n            />\n            <Tasks\n              tasks={this.state.tasks}\n              clicked={this.deleteTaskhandler}\n              changed={this.taskChangeHandler}\n            />\n          </React.Fragment>\n        );\n        break;\n\n      case '2':\n        displayTasks = (\n          <React.Fragment>\n            <Cockpit\n              title={this.props.appTitle}\n              clicked={this.toggleShowTasksHandler}\n              tasksLength={this.state.tasks.length}\n              todayClicked={this.displayTodayScheduleHandler}\n            />\n\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Time </th>\n                  <th>Task</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                <tr class=\"table-success\">\n                  <TodayTasks monday={this.state.Monday} />\n                </tr>\n              </tbody>\n            </table>\n          </React.Fragment>\n        );\n        break;\n    }\n\n    // if (this.state.showTasks) {\n    //   displayTasks = (\n    //     <Tasks\n    //       tasks={this.state.tasks}\n    //       clicked={this.deleteTaskhandler}\n    //       changed={this.taskChangeHandler}\n    //     />\n    //   );\n    // }\n\n    // let displayTasksToday = null;\n    //{displayTasksToday}\n\n    // if (this.state.showTasksToday) {\n    //   displayTasksToday = <TodayTasks monday={this.state.Monday} />;\n    // }\n\n    let tasklength = this.state.tasks.length;\n\n    //console.log(tasklength)\n    //<div className={rocky.App}> </div>\n    return (\n      <WithClass passClass={rocky.App}>\n        <button\n          onClick={() => {\n            this.setState({ showCockpit: false });\n          }}\n        >\n          {' '}\n          Remove Cockpit\n        </button>\n\n        {displayTasks}\n      </WithClass>\n    );\n  }\n}\n//<p>this class is {classes}</p>\n//export default Radium(App);\nexport default App;\n//<p className={rocky[classes]}>Things to Do!</p>\n\n//using css modules on multiple classNames\n//{classNames({[styles.foo]: true, [styles.bar]: true})}\n//<p className={classNames({[rocky[classes]]: true, [rocky.red]: true})}>Things to Do!</p>\n\n/*old way of displaying\n<WithClass passClass={rocky.App}>\n        <button\n          onClick={() => {\n            this.setState({ showCockpit: false });\n          }}\n        >\n          {' '}\n          Remove Cockpit\n        </button>\n\n        {this.state.showCockpit ? (\n          <Cockpit\n            title={this.props.appTitle}\n            clicked={this.toggleShowTasksHandler}\n            tasksLength={this.state.tasks.length}\n            todayClicked={this.displayTodayScheduleHandler}\n          />\n        ) : null}\n\n        {displayTasks}\n      </WithClass>\n      */\n"]},"metadata":{},"sourceType":"module"}