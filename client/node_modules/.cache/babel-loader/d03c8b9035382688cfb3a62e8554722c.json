{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/src/components/ViewContent/Tasks/Tasks.js\";\nimport React, { PureComponent } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../../ErrorBoundary/ErrorBoundary';\nimport student from '../../../containers/Student.css';\nimport TasksContext from '../../../context/tasksContext';\n\nclass Tasks extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //lastHeader: this.props.lastHeader\n      showMessageForEventValue: false\n    };\n\n    this.dataRequestHandler = (event, a, b, c) => {\n      console.log('[Tasks] rendering...'); // let currentMessageDiv = this.state.showMessageForEventValue;\n      // this.setState({ showMessageForEventValue: !currentMessageDiv });\n\n      let currentValue = JSON.stringify(event.target.value, null, 2);\n      this.setState({\n        showMessageForEventValue: true,\n        targetValue: currentValue\n      });\n    };\n  }\n\n  // setupLastTableHeader() {\n  //   if (this.props.tasks != 0) {\n  //     this.setState({ lastHeader: this.state.tasks[0] });\n  //   } else {\n  //     this.setState({ lastHeader: this.state.lastHeader });\n  //   }\n  // }\n  renderTableHeaderAllTasksHandler() {\n    console.log('Inside Tasks.js');\n    let clickToAddDelete = null;\n\n    if (this.props.showLeftOverTasksForWeek) {\n      clickToAddDelete = 'Click to schedule this task';\n    } else {\n      clickToAddDelete = 'Click to Delete Task';\n    }\n\n    if (this.context.tasksData.tasksData) {\n      let header = Object.keys(this.context.tasksData.tasksData.lastTaskHeader);\n      return header.map((key, index) => {\n        //console.log(`this is the key: (${key}) and the index: (${index})`);\n        if (key === 'id') {\n          return React.createElement(\"th\", {\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38\n            },\n            __self: this\n          }, \"Click\\xA0to\\xA0Delete\");\n        } else {\n          return React.createElement(\"th\", {\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40\n            },\n            __self: this\n          }, key.toUpperCase());\n        }\n      });\n    }\n  }\n\n  allTasksHandler() {\n    return this.context.tasksData.tasksData.unAssignedTasksForWeek.map((task, index) => {\n      let functionChoiceDelete = null;\n      let functionChoiceChange = null; //destructuring\n      // const { id, name, age, email } = student;\n\n      if (this.props.everything.contentChoice === '1') {\n        functionChoiceDelete = '3';\n        functionChoiceChange = '4';\n      } else {\n        functionChoiceDelete = '5';\n        functionChoiceChange = '6';\n      }\n\n      return React.createElement(ErrorBoundary, {\n        key: task.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Task, {\n        todo: task.todo,\n        deadline: task.deadline,\n        location: task.location,\n        particularKey: task.id,\n        click: event => this.dataRequestHandler(event, functionChoiceDelete, 'index', index),\n        changed: () => this.context.dataRequestHandler(event, functionChoiceChange, 'id', task.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }));\n    });\n  } //sendChangeRequestHandler = (event, functionChoiceDelete ) => {\n  //}\n  // static getDerivedStateFromProps(props, state) {\n  //     console.log('[Tasks] getDerivedStateFromProps')\n  //     return state\n  // }\n  //niche -removed\n  // componentWillReceiveProps(props) {\n  //    console.log('[Persons.js] componentWillReceiveProps', props);\n  // }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[Tasks] shouldComponentUpdate'); //comparing if props have changed\n\n    if (nextProps.unAssignedTasksForWeek !== this.context.tasksData.tasksData.unAssignedTasksForWeek) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('[Tasks] getSnapshotBeforeUpdate');\n    return {\n      message: 'Snapshot'\n    };\n  } // componentWillUpdate() {\n  //     return\n  // }\n\n\n  componentDidUpdate(prevProps, prevState, message) {\n    console.log('[Tasks] componentDidUpdate');\n    console.log(message);\n  }\n\n  componentWillUnmount() {\n    console.log('[Tasks.js] componentWillUnmount');\n  }\n\n  render() {\n    let messageDiv = null;\n\n    if (this.state.showMessageForEventValue === true) {\n      messageDiv = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"event.value is : \", this.state.targetValue);\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \" All Tasks\"), messageDiv, React.createElement(\"table\", {\n      id: \"students\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, this.renderTableHeaderAllTasksHandler()), this.allTasksHandler())));\n  }\n\n}\n\nTasks.contextType = TasksContext;\nexport default Tasks; //original\n\n/*\nthis.props.tasks.map((task, index) => {\n            return (<ErrorBoundary key = {task.id}>\n            <Task \n            todo = {task.todo} \n            deadline = {task.deadline}\n            location = {task.location}\n            key = {task.id}\n            click = {() => this.props.clicked(index)}\n            changed = {(event) => this.props.changed (event, task.id)}>Change Task (below)</Task>\n            </ErrorBoundary>\n            )\n          })\n*/\n//original functional component\n\n/*\nimport React, { useEffect, useState } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\n//import { isEmptyStatement } from '@babel/types';\n\nconst Tasks = props => {\n  console.log('[Tasks.js] rendering');\n\n  const allTasksHandler = () => {\n    return props.tasks.map((task, index) => {\n      return (\n        //<ErrorBoundary key={task.id}>\n        <Task\n          todo={task.todo}\n          deadline={task.deadline}\n          location={task.location}\n          key={task.id}\n          click={() => props.clicked(index)}\n          changed={event => props.changed(event, task.id)}\n        />\n        //</ErrorBoundary>\n      );\n    });\n  };\n\n  const renderTableHeaderAllTasksHandler = () => {\n    //props.tasks.length !== 0\n    //if (Object.keys(props.tasks !== 0)) {\n\n    //if there are still tasks left\n    if (props.tasks.length > 1) {\n      let header = Object.keys(props.tasks[0]);\n\n      return header.map((key, index) => {\n        console.log(`this is the key: (${key}) and the index: (${index})`);\n        if (key === 'id') {\n          return <th key={index}>Click to Delete</th>;\n        } else {\n          return <th key={index}>{key.toUpperCase()}</th>;\n        }\n      });\n    } else {\n      //if there are no tasks left then these will be used to print the log\n      // return (\n      //   <React.Fragment>\n      //     <th>Click To Delete</th>\n      //     <th>todo</th>\n      //     <th>deadline</th>\n      //     <th>location</th>\n      //   </React.Fragment>\n      // );\n      //console.log(Object.keys(lastTaskHeader.lastHeader));\n      let header = Object.keys(lastTaskHeader.lastHeader[0]);\n\n      return header.map((key, index) => {\n        console.log(`this is the key: (${key}) and the index: (${index})`);\n        if (key === 'id') {\n          return <th key={index}>Click to Delete</th>;\n        } else {\n          return <th key={index}>{key.toUpperCase()}</th>;\n        }\n      });\n    }\n  };\n\n  //console.log('we out of tasks');\n\n  //? console.log('still got some tasks')\n\n  //let header = Object.keys(props.tasks);\n\n  //console.log(`this is the header: ${header}`);\n  const [lastTaskHeader, setLastTaskHeader] = useState({\n    lastHeader: props.tasks\n  });\n\n  useEffect(() => {\n    // console.log(`this is the state of alert ${onCallDelete.signalAlert}`);\n    // if (onCallDelete.signalAlert === 'true') {\n\n    if (props.tasks.length === 1) {\n      //let savedHeader = Object.keys(props.tasks[0]);\n      //let savedHeader = props.tasks\n      console.log(props.tasks);\n      setLastTaskHeader({ lastHeader: props.tasks });\n\n      console.log(`this is the last task alert ${lastTaskHeader.lastHeader}`);\n    }\n    if (props.reRender === true) {\n      alert('Are you sure you want to delete this task?');\n      //return (props.reRender = {})\n    }\n\n    // }\n\n    return () => {\n      console.log('i am in the return of useEffect in TASKS');\n    };\n  }, [props.reRender]);\n  //\n  return (\n    <div>\n      <h1 id=\"title\"> All Tasks</h1>\n\n      <table id=\"students\">\n        <tbody>\n          <tr>{renderTableHeaderAllTasksHandler()}</tr>\n          {allTasksHandler()}\n        </tbody>\n      </table>\n    </div>\n  );\n\n  // return props.tasks.map((task, index) => {\n  //   return (\n  //     <ErrorBoundary key={task.id}>\n  //       <Task\n  //         todo={task.todo}\n  //         deadline={task.deadline}\n  //         location={task.location}\n  //         key={task.id}\n  //         click={() => props.clicked(index)}\n  //         changed={event => props.changed(event, task.id)}\n  //       >\n  //         Change Task (below)\n  //       </Task>\n  //     </ErrorBoundary>\n  //   );\n  // });\n};\nexport default Tasks;\n*/","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/components/ViewContent/Tasks/Tasks.js"],"names":["React","PureComponent","Task","ErrorBoundary","student","TasksContext","Tasks","constructor","props","state","showMessageForEventValue","dataRequestHandler","event","a","b","c","console","log","currentValue","JSON","stringify","target","value","setState","targetValue","renderTableHeaderAllTasksHandler","clickToAddDelete","showLeftOverTasksForWeek","context","tasksData","header","Object","keys","lastTaskHeader","map","key","index","toUpperCase","allTasksHandler","unAssignedTasksForWeek","task","functionChoiceDelete","functionChoiceChange","everything","contentChoice","id","todo","deadline","location","shouldComponentUpdate","nextProps","nextState","getSnapshotBeforeUpdate","prevProps","prevState","message","componentDidUpdate","componentWillUnmount","render","messageDiv","contextType"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../../ErrorBoundary/ErrorBoundary';\nimport student from '../../../containers/Student.css';\nimport TasksContext from '../../../context/tasksContext';\nclass Tasks extends PureComponent {\n  constructor(props) {\n    super(props);\n  }\n  state = {\n    //lastHeader: this.props.lastHeader\n    showMessageForEventValue: false\n  };\n\n  // setupLastTableHeader() {\n  //   if (this.props.tasks != 0) {\n  //     this.setState({ lastHeader: this.state.tasks[0] });\n  //   } else {\n  //     this.setState({ lastHeader: this.state.lastHeader });\n  //   }\n  // }\n\n  renderTableHeaderAllTasksHandler() {\n    console.log('Inside Tasks.js');\n    let clickToAddDelete = null;\n\n    if (this.props.showLeftOverTasksForWeek) {\n      clickToAddDelete = 'Click to schedule this task';\n    } else {\n      clickToAddDelete = 'Click to Delete Task';\n    }\n\n    if (this.context.tasksData.tasksData) {\n      let header = Object.keys(this.context.tasksData.tasksData.lastTaskHeader);\n      return header.map((key, index) => {\n        //console.log(`this is the key: (${key}) and the index: (${index})`);\n        if (key === 'id') {\n          return <th key={index}>Click to Delete</th>;\n        } else {\n          return <th key={index}>{key.toUpperCase()}</th>;\n        }\n      });\n    }\n  }\n\n  allTasksHandler() {\n    return this.context.tasksData.tasksData.unAssignedTasksForWeek.map(\n      (task, index) => {\n        let functionChoiceDelete = null;\n        let functionChoiceChange = null;\n        //destructuring\n        // const { id, name, age, email } = student;\n        if (this.props.everything.contentChoice === '1') {\n          functionChoiceDelete = '3';\n          functionChoiceChange = '4';\n        } else {\n          functionChoiceDelete = '5';\n          functionChoiceChange = '6';\n        }\n\n        return (\n          <ErrorBoundary key={task.id}>\n            <Task\n              todo={task.todo}\n              deadline={task.deadline}\n              location={task.location}\n              particularKey={task.id}\n              click={event =>\n                this.dataRequestHandler(\n                  event,\n                  functionChoiceDelete,\n                  'index',\n                  index\n                )\n              }\n              changed={() =>\n                this.context.dataRequestHandler(\n                  event,\n                  functionChoiceChange,\n                  'id',\n                  task.id\n                )\n              }\n            ></Task>\n          </ErrorBoundary>\n        );\n      }\n    );\n  }\n  //sendChangeRequestHandler = (event, functionChoiceDelete ) => {\n\n  //}\n\n  // static getDerivedStateFromProps(props, state) {\n  //     console.log('[Tasks] getDerivedStateFromProps')\n  //     return state\n  // }\n\n  //niche -removed\n  // componentWillReceiveProps(props) {\n  //    console.log('[Persons.js] componentWillReceiveProps', props);\n  // }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[Tasks] shouldComponentUpdate');\n    //comparing if props have changed\n    if (\n      nextProps.unAssignedTasksForWeek !==\n      this.context.tasksData.tasksData.unAssignedTasksForWeek\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('[Tasks] getSnapshotBeforeUpdate');\n    return { message: 'Snapshot' };\n  }\n\n  // componentWillUpdate() {\n  //     return\n  // }\n\n  componentDidUpdate(prevProps, prevState, message) {\n    console.log('[Tasks] componentDidUpdate');\n    console.log(message);\n  }\n\n  componentWillUnmount() {\n    console.log('[Tasks.js] componentWillUnmount');\n  }\n\n  dataRequestHandler = (event, a, b, c) => {\n    console.log('[Tasks] rendering...');\n\n    // let currentMessageDiv = this.state.showMessageForEventValue;\n    // this.setState({ showMessageForEventValue: !currentMessageDiv });\n    let currentValue = JSON.stringify(event.target.value, null, 2);\n    this.setState({\n      showMessageForEventValue: true,\n      targetValue: currentValue\n    });\n  };\n\n  static contextType = TasksContext;\n  render() {\n    let messageDiv = null;\n    if (this.state.showMessageForEventValue === true) {\n      messageDiv = <div>event.value is : {this.state.targetValue}</div>;\n    }\n\n    return (\n      <div>\n        <h1 id=\"title\"> All Tasks</h1>\n        {messageDiv}\n        <table id=\"students\">\n          <tbody>\n            <tr>{this.renderTableHeaderAllTasksHandler()}</tr>\n            {this.allTasksHandler()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Tasks;\n\n//original\n\n/*\nthis.props.tasks.map((task, index) => {\n            return (<ErrorBoundary key = {task.id}>\n            <Task \n            todo = {task.todo} \n            deadline = {task.deadline}\n            location = {task.location}\n            key = {task.id}\n            click = {() => this.props.clicked(index)}\n            changed = {(event) => this.props.changed (event, task.id)}>Change Task (below)</Task>\n            </ErrorBoundary>\n            )\n          })\n*/\n\n//original functional component\n\n/*\nimport React, { useEffect, useState } from 'react';\nimport Task from './Task/Task';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\n//import { isEmptyStatement } from '@babel/types';\n\nconst Tasks = props => {\n  console.log('[Tasks.js] rendering');\n\n  const allTasksHandler = () => {\n    return props.tasks.map((task, index) => {\n      return (\n        //<ErrorBoundary key={task.id}>\n        <Task\n          todo={task.todo}\n          deadline={task.deadline}\n          location={task.location}\n          key={task.id}\n          click={() => props.clicked(index)}\n          changed={event => props.changed(event, task.id)}\n        />\n        //</ErrorBoundary>\n      );\n    });\n  };\n\n  const renderTableHeaderAllTasksHandler = () => {\n    //props.tasks.length !== 0\n    //if (Object.keys(props.tasks !== 0)) {\n\n    //if there are still tasks left\n    if (props.tasks.length > 1) {\n      let header = Object.keys(props.tasks[0]);\n\n      return header.map((key, index) => {\n        console.log(`this is the key: (${key}) and the index: (${index})`);\n        if (key === 'id') {\n          return <th key={index}>Click to Delete</th>;\n        } else {\n          return <th key={index}>{key.toUpperCase()}</th>;\n        }\n      });\n    } else {\n      //if there are no tasks left then these will be used to print the log\n      // return (\n      //   <React.Fragment>\n      //     <th>Click To Delete</th>\n      //     <th>todo</th>\n      //     <th>deadline</th>\n      //     <th>location</th>\n      //   </React.Fragment>\n      // );\n      //console.log(Object.keys(lastTaskHeader.lastHeader));\n      let header = Object.keys(lastTaskHeader.lastHeader[0]);\n\n      return header.map((key, index) => {\n        console.log(`this is the key: (${key}) and the index: (${index})`);\n        if (key === 'id') {\n          return <th key={index}>Click to Delete</th>;\n        } else {\n          return <th key={index}>{key.toUpperCase()}</th>;\n        }\n      });\n    }\n  };\n\n  //console.log('we out of tasks');\n\n  //? console.log('still got some tasks')\n\n  //let header = Object.keys(props.tasks);\n\n  //console.log(`this is the header: ${header}`);\n  const [lastTaskHeader, setLastTaskHeader] = useState({\n    lastHeader: props.tasks\n  });\n\n  useEffect(() => {\n    // console.log(`this is the state of alert ${onCallDelete.signalAlert}`);\n    // if (onCallDelete.signalAlert === 'true') {\n\n    if (props.tasks.length === 1) {\n      //let savedHeader = Object.keys(props.tasks[0]);\n      //let savedHeader = props.tasks\n      console.log(props.tasks);\n      setLastTaskHeader({ lastHeader: props.tasks });\n\n      console.log(`this is the last task alert ${lastTaskHeader.lastHeader}`);\n    }\n    if (props.reRender === true) {\n      alert('Are you sure you want to delete this task?');\n      //return (props.reRender = {})\n    }\n\n    // }\n\n    return () => {\n      console.log('i am in the return of useEffect in TASKS');\n    };\n  }, [props.reRender]);\n  //\n  return (\n    <div>\n      <h1 id=\"title\"> All Tasks</h1>\n\n      <table id=\"students\">\n        <tbody>\n          <tr>{renderTableHeaderAllTasksHandler()}</tr>\n          {allTasksHandler()}\n        </tbody>\n      </table>\n    </div>\n  );\n\n  // return props.tasks.map((task, index) => {\n  //   return (\n  //     <ErrorBoundary key={task.id}>\n  //       <Task\n  //         todo={task.todo}\n  //         deadline={task.deadline}\n  //         location={task.location}\n  //         key={task.id}\n  //         click={() => props.clicked(index)}\n  //         changed={event => props.changed(event, task.id)}\n  //       >\n  //         Change Task (below)\n  //       </Task>\n  //     </ErrorBoundary>\n  //   );\n  // });\n};\nexport default Tasks;\n*/\n"]},"metadata":{},"sourceType":"module"}