{"ast":null,"code":"import _objectSpread from \"/Users/thomasjd/Desktop/caltask/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/ViewContent/PickedDayTasks/PickedDayTasks.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport PickedDayTask from './PickedDayTask/PickedDayTask';\nimport student from '../../../containers/Student.css';\nimport StoreContext from '../../../context/StoreDataContext';\n\nconst PickedDayTasks = props => {\n  const storeContext = useContext(StoreContext);\n\n  const taskDeleteHandler = (event, info) => {\n    let typeOfData = 'tasks'; //string: syllabus,tasks,events,objectives\n\n    let handlerChoice = '5'; //string: '#' handler inside of database\n\n    let dataLocation = storeContext.tasksData.tasksData.dataLocation; // string: where obj found inside database\n\n    let infoType = 'index'; //string: index/id/\n    //let info = ''; //string: actual info\n    // let value = '';\n\n    let dataRequestMessage = {}; //let today = calendarObj();\n\n    switch (storeContext.contentChoice) {\n      case '9':\n        typeOfData = 'tasks';\n        handlerChoice = '';\n        dataLocation = dataLocation;\n        infoType = 'index'; //info = null;\n\n        break;\n\n      case '5':\n        break;\n    }\n\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n    storeContext.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  const taskChangeHandler = (event, info) => {\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n    let handlerChoice = ''; //string: '#' handler inside of database\n\n    let dataLocation = ''; // string: where obj found inside database\n\n    let infoType = ''; //string: index/id/\n\n    let dataRequestMessage = {};\n\n    switch (storeContext.contentChoice) {\n      case '9':\n        typeOfData = 'tasks';\n        handlerChoice = '6';\n        dataLocation = storeContext.tasksData.tasksData.dataLocation;\n        infoType = 'id'; //info = null;\n\n        break;\n\n      case '4':\n        break;\n\n      case '5':\n        break;\n    }\n\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n    alert(`inside [PickedDayTasks]  taskChangeHandler()\n    typeOfData: ${dataRequestMessage.typeOfData}\n    handlerChoice: ${dataRequestMessage.handlerChoice}\n    dataLocation: ${dataRequestMessage.dataLocation}\n    infoType?: ${dataRequestMessage.infoType}\n    info: ${dataRequestMessage.info}`);\n    storeContext.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  const renderTableHeaderHandler = () => {\n    let tasksData = _objectSpread({}, storeContext.tasksData.tasksData);\n\n    if (tasksData) {\n      let pickedDayTasksHeader = _objectSpread({}, tasksData.pickedDayTasksHeader); //let tasksDataObj = { ...tasksData };\n\n\n      let pickedDayTasksHeaderObj = _objectSpread({}, pickedDayTasksHeader); // let timeOfDay = { ...pickedDayTasksHeader };\n\n\n      console.dir(`tasksData: ${pickedDayTasksHeader}`);\n      let header = Object.keys(pickedDayTasksHeaderObj);\n      return header.map((key, index) => {\n        switch (key) {\n          case 'id':\n            return React.createElement(\"th\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 98\n              },\n              __self: this\n            }, \"Click\\xA0to\\xA0Delete\");\n            break;\n\n          case 'task':\n            return React.createElement(\"th\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 102\n              },\n              __self: this\n            }, key.toUpperCase());\n            break;\n\n          case 'timeOfDay':\n            return React.createElement(\"th\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 106\n              },\n              __self: this\n            }, \"Schedule Task\");\n            break;\n\n          case 'deadline':\n            return React.createElement(\"th\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 110\n              },\n              __self: this\n            }, key.toUpperCase());\n            break;\n\n          case 'category':\n            return React.createElement(\"th\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 114\n              },\n              __self: this\n            }, key.toUpperCase());\n            break;\n        }\n      });\n    }\n  };\n\n  const tasksOfSelectedDayHandler = () => {\n    if (storeContext.tasksData.tasksData) {\n      let dataLocation = storeContext.tasksData.tasksData.dataLocation;\n\n      let tasksData = _objectSpread({}, storeContext.tasksData.tasksData);\n\n      if (!tasksData[dataLocation]) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, \"No tasks Scheduled for this Day\");\n      } else {\n        return tasksData[dataLocation].map((day, index) => {\n          return React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 131\n            },\n            __self: this\n          }, React.createElement(PickedDayTask, {\n            key: day.id,\n            id: day.id,\n            timeOfDay: day.timeOfDay,\n            task: day.task,\n            deleteTodayTask: props.clicked,\n            deadline: day.deadline,\n            category: day.category,\n            click: event => taskDeleteHandler(event, index),\n            changed: event => taskChangeHandler(event, day.id),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132\n            },\n            __self: this\n          }));\n        });\n      }\n    }\n  }; // const [lastTaskHeader, setLastTaskHeader] = useState({\n  //   lastHeader: props.monday\n  // });\n  // useEffect(() => {\n  //   let dataLocation = props.dataLocation\n  //   // console.log(`this is the state of alert ${onCallDelete.signalAlert}`);\n  //   // if (onCallDelete.signalAlert === 'true') {\n  //   if (\n  //     tasksContext.tasksData.tasksData == true &&\n  //     tasksContext.tasksData.tasksData[dataLocation].length === 1\n  //   ) {\n  //     //let savedHeader = Object.keys(props.tasks[0]);\n  //     //let savedHeader = props.tasks\n  //     console.log(props.monday);\n  //     setLastTaskHeader({ lastHeader: props.monday });\n  //     console.log(`this is the last task alert ${lastTaskHeader.lastHeader}`);\n  //   }\n  //   if (props.reRenderTodayTasks === true) {\n  //     // alert('Are you sure you want to delete this task?');\n  //     //return (props.reRender = {})\n  //   }\n  // });\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    id: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, \" Tasks for The Day\"), React.createElement(\"table\", {\n    id: \"students\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, renderTableHeaderHandler()), tasksOfSelectedDayHandler())));\n};\n\nexport default PickedDayTasks;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/ViewContent/PickedDayTasks/PickedDayTasks.js"],"names":["React","useState","useEffect","useContext","PickedDayTask","student","StoreContext","PickedDayTasks","props","storeContext","taskDeleteHandler","event","info","typeOfData","handlerChoice","dataLocation","tasksData","infoType","dataRequestMessage","contentChoice","dataRequestHandler","taskChangeHandler","alert","renderTableHeaderHandler","pickedDayTasksHeader","pickedDayTasksHeaderObj","console","dir","header","Object","keys","map","key","index","toUpperCase","tasksOfSelectedDayHandler","day","id","timeOfDay","task","clicked","deadline","category"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,OAAP,MAAoB,iCAApB;AAEA,OAAOC,YAAP,MAAyB,mCAAzB;;AAEA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B,QAAMC,YAAY,GAAGN,UAAU,CAACG,YAAD,CAA/B;;AAEA,QAAMI,iBAAiB,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACzC,QAAIC,UAAU,GAAG,OAAjB,CADyC,CACf;;AAC1B,QAAIC,aAAa,GAAG,GAApB,CAFyC,CAEhB;;AACzB,QAAIC,YAAY,GAAGN,YAAY,CAACO,SAAb,CAAuBA,SAAvB,CAAiCD,YAApD,CAHyC,CAIzC;;AACA,QAAIE,QAAQ,GAAG,OAAf,CALyC,CAKjB;AACxB;AAEA;;AACA,QAAIC,kBAAkB,GAAG,EAAzB,CATyC,CAUzC;;AAEA,YAAQT,YAAY,CAACU,aAArB;AACE,WAAK,GAAL;AACEN,QAAAA,UAAU,GAAG,OAAb;AACAC,QAAAA,aAAa,GAAG,EAAhB;AACAC,QAAAA,YAAY,GAAGA,YAAf;AACAE,QAAAA,QAAQ,GAAG,OAAX,CAJF,CAKE;;AAEA;;AACF,WAAK,GAAL;AACE;AAVJ;;AAaAC,IAAAA,kBAAkB,GAAG;AACnBL,MAAAA,UAAU,EAAEA,UADO;AAEnBC,MAAAA,aAAa,EAAEA,aAFI;AAGnBC,MAAAA,YAAY,EAAEA,YAHK;AAInBE,MAAAA,QAAQ,EAAEA,QAJS;AAKnBL,MAAAA,IAAI,EAAEA;AALa,KAArB;AAQAH,IAAAA,YAAY,CAACW,kBAAb,CAAgCT,KAAhC,EAAuCO,kBAAvC;AACD,GAlCD;;AAoCA,QAAMG,iBAAiB,GAAG,CAACV,KAAD,EAAQC,IAAR,KAAiB;AACzC,QAAIC,UAAU,GAAG,EAAjB,CADyC,CACpB;;AACrB,QAAIC,aAAa,GAAG,EAApB,CAFyC,CAEjB;;AACxB,QAAIC,YAAY,GAAG,EAAnB,CAHyC,CAGlB;;AACvB,QAAIE,QAAQ,GAAG,EAAf,CAJyC,CAItB;;AAEnB,QAAIC,kBAAkB,GAAG,EAAzB;;AACA,YAAQT,YAAY,CAACU,aAArB;AACE,WAAK,GAAL;AACEN,QAAAA,UAAU,GAAG,OAAb;AACAC,QAAAA,aAAa,GAAG,GAAhB;AAEAC,QAAAA,YAAY,GAAGN,YAAY,CAACO,SAAb,CAAuBA,SAAvB,CAAiCD,YAAhD;AACAE,QAAAA,QAAQ,GAAG,IAAX,CALF,CAME;;AACA;;AACF,WAAK,GAAL;AACE;;AACF,WAAK,GAAL;AACE;AAZJ;;AAcAC,IAAAA,kBAAkB,GAAG;AACnBL,MAAAA,UAAU,EAAEA,UADO;AAEnBC,MAAAA,aAAa,EAAEA,aAFI;AAGnBC,MAAAA,YAAY,EAAEA,YAHK;AAInBE,MAAAA,QAAQ,EAAEA,QAJS;AAKnBL,MAAAA,IAAI,EAAEA;AALa,KAArB;AAOAU,IAAAA,KAAK,CAAE;kBACOJ,kBAAkB,CAACL,UAAW;qBAC3BK,kBAAkB,CAACJ,aAAc;oBAClCI,kBAAkB,CAACH,YAAa;iBACnCG,kBAAkB,CAACD,QAAS;YACjCC,kBAAkB,CAACN,IAAK,EAL3B,CAAL;AAOAH,IAAAA,YAAY,CAACW,kBAAb,CAAgCT,KAAhC,EAAuCO,kBAAvC;AACD,GApCD;;AAsCA,QAAMK,wBAAwB,GAAG,MAAM;AACrC,QAAIP,SAAS,qBAAQP,YAAY,CAACO,SAAb,CAAuBA,SAA/B,CAAb;;AAEA,QAAIA,SAAJ,EAAe;AACb,UAAIQ,oBAAoB,qBAAQR,SAAS,CAACQ,oBAAlB,CAAxB,CADa,CAEb;;;AACA,UAAIC,uBAAuB,qBAAQD,oBAAR,CAA3B,CAHa,CAIb;;;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAa,cAAaH,oBAAqB,EAA/C;AACA,UAAII,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYL,uBAAZ,CAAb;AAEA,aAAOG,MAAM,CAACG,GAAP,CAAW,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAChC,gBAAQD,GAAR;AACE,eAAK,IAAL;AACE,mBAAO;AAAI,cAAA,GAAG,EAAEC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAP;AACA;;AAEF,eAAK,MAAL;AACE,mBAAO;AAAI,cAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAiBD,GAAG,CAACE,WAAJ,EAAjB,CAAP;AACA;;AAEF,eAAK,WAAL;AACE,mBAAO;AAAI,cAAA,GAAG,EAAED,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACA;;AAEF,eAAK,UAAL;AACE,mBAAO;AAAI,cAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAiBD,GAAG,CAACE,WAAJ,EAAjB,CAAP;AACA;;AAEF,eAAK,UAAL;AACE,mBAAO;AAAI,cAAA,GAAG,EAAED,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAiBD,GAAG,CAACE,WAAJ,EAAjB,CAAP;AACA;AAnBJ;AAqBD,OAtBM,CAAP;AAuBD;AACF,GAnCD;;AAqCA,QAAMC,yBAAyB,GAAG,MAAM;AACtC,QAAI1B,YAAY,CAACO,SAAb,CAAuBA,SAA3B,EAAsC;AACpC,UAAID,YAAY,GAAGN,YAAY,CAACO,SAAb,CAAuBA,SAAvB,CAAiCD,YAApD;;AACA,UAAIC,SAAS,qBAAQP,YAAY,CAACO,SAAb,CAAuBA,SAA/B,CAAb;;AAEA,UAAI,CAACA,SAAS,CAACD,YAAD,CAAd,EAA8B;AAC5B,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAP;AACD,OAFD,MAEO;AACL,eAAOC,SAAS,CAACD,YAAD,CAAT,CAAwBgB,GAAxB,CAA4B,CAACK,GAAD,EAAMH,KAAN,KAAgB;AACjD,iBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,aAAD;AACE,YAAA,GAAG,EAAEG,GAAG,CAACC,EADX;AAEE,YAAA,EAAE,EAAED,GAAG,CAACC,EAFV;AAGE,YAAA,SAAS,EAAED,GAAG,CAACE,SAHjB;AAIE,YAAA,IAAI,EAAEF,GAAG,CAACG,IAJZ;AAKE,YAAA,eAAe,EAAE/B,KAAK,CAACgC,OALzB;AAME,YAAA,QAAQ,EAAEJ,GAAG,CAACK,QANhB;AAOE,YAAA,QAAQ,EAAEL,GAAG,CAACM,QAPhB;AAQE,YAAA,KAAK,EAAE/B,KAAK,IAAID,iBAAiB,CAACC,KAAD,EAAQsB,KAAR,CARnC;AASE,YAAA,OAAO,EAAEtB,KAAK,IAAIU,iBAAiB,CAACV,KAAD,EAAQyB,GAAG,CAACC,EAAZ,CATrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AAeD,SAhBM,CAAP;AAiBD;AACF;AACF,GA3BD,CAlH8B,CA+I9B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEE;AAAO,IAAA,EAAE,EAAC,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKd,wBAAwB,EAA7B,CADF,EAEGY,yBAAyB,EAF5B,CADF,CAFF,CADF;AAWD,CAnLD;;AAqLA,eAAe5B,cAAf","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport PickedDayTask from './PickedDayTask/PickedDayTask';\nimport student from '../../../containers/Student.css';\n\nimport StoreContext from '../../../context/StoreDataContext';\n\nconst PickedDayTasks = props => {\n  const storeContext = useContext(StoreContext);\n\n  const taskDeleteHandler = (event, info) => {\n    let typeOfData = 'tasks'; //string: syllabus,tasks,events,objectives\n    let handlerChoice = '5'; //string: '#' handler inside of database\n    let dataLocation = storeContext.tasksData.tasksData.dataLocation;\n    // string: where obj found inside database\n    let infoType = 'index'; //string: index/id/\n    //let info = ''; //string: actual info\n\n    // let value = '';\n    let dataRequestMessage = {};\n    //let today = calendarObj();\n\n    switch (storeContext.contentChoice) {\n      case '9':\n        typeOfData = 'tasks';\n        handlerChoice = '';\n        dataLocation = dataLocation;\n        infoType = 'index';\n        //info = null;\n\n        break;\n      case '5':\n        break;\n    }\n\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    storeContext.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  const taskChangeHandler = (event, info) => {\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n\n    let dataRequestMessage = {};\n    switch (storeContext.contentChoice) {\n      case '9':\n        typeOfData = 'tasks';\n        handlerChoice = '6';\n\n        dataLocation = storeContext.tasksData.tasksData.dataLocation;\n        infoType = 'id';\n        //info = null;\n        break;\n      case '4':\n        break;\n      case '5':\n        break;\n    }\n    dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n    alert(`inside [PickedDayTasks]  taskChangeHandler()\n    typeOfData: ${dataRequestMessage.typeOfData}\n    handlerChoice: ${dataRequestMessage.handlerChoice}\n    dataLocation: ${dataRequestMessage.dataLocation}\n    infoType?: ${dataRequestMessage.infoType}\n    info: ${dataRequestMessage.info}`);\n\n    storeContext.dataRequestHandler(event, dataRequestMessage);\n  };\n\n  const renderTableHeaderHandler = () => {\n    let tasksData = { ...storeContext.tasksData.tasksData };\n\n    if (tasksData) {\n      let pickedDayTasksHeader = { ...tasksData.pickedDayTasksHeader };\n      //let tasksDataObj = { ...tasksData };\n      let pickedDayTasksHeaderObj = { ...pickedDayTasksHeader };\n      // let timeOfDay = { ...pickedDayTasksHeader };\n      console.dir(`tasksData: ${pickedDayTasksHeader}`);\n      let header = Object.keys(pickedDayTasksHeaderObj);\n\n      return header.map((key, index) => {\n        switch (key) {\n          case 'id':\n            return <th key={index}>Click to Delete</th>;\n            break;\n\n          case 'task':\n            return <th key={index}>{key.toUpperCase()}</th>;\n            break;\n\n          case 'timeOfDay':\n            return <th key={index}>Schedule Task</th>;\n            break;\n\n          case 'deadline':\n            return <th key={index}>{key.toUpperCase()}</th>;\n            break;\n\n          case 'category':\n            return <th key={index}>{key.toUpperCase()}</th>;\n            break;\n        }\n      });\n    }\n  };\n\n  const tasksOfSelectedDayHandler = () => {\n    if (storeContext.tasksData.tasksData) {\n      let dataLocation = storeContext.tasksData.tasksData.dataLocation;\n      let tasksData = { ...storeContext.tasksData.tasksData };\n\n      if (!tasksData[dataLocation]) {\n        return <div>No tasks Scheduled for this Day</div>;\n      } else {\n        return tasksData[dataLocation].map((day, index) => {\n          return (\n            <React.Fragment>\n              <PickedDayTask\n                key={day.id}\n                id={day.id}\n                timeOfDay={day.timeOfDay}\n                task={day.task}\n                deleteTodayTask={props.clicked}\n                deadline={day.deadline}\n                category={day.category}\n                click={event => taskDeleteHandler(event, index)}\n                changed={event => taskChangeHandler(event, day.id)}\n              />\n            </React.Fragment>\n          );\n        });\n      }\n    }\n  };\n\n  // const [lastTaskHeader, setLastTaskHeader] = useState({\n  //   lastHeader: props.monday\n  // });\n  // useEffect(() => {\n  //   let dataLocation = props.dataLocation\n  //   // console.log(`this is the state of alert ${onCallDelete.signalAlert}`);\n  //   // if (onCallDelete.signalAlert === 'true') {\n\n  //   if (\n  //     tasksContext.tasksData.tasksData == true &&\n  //     tasksContext.tasksData.tasksData[dataLocation].length === 1\n  //   ) {\n  //     //let savedHeader = Object.keys(props.tasks[0]);\n  //     //let savedHeader = props.tasks\n  //     console.log(props.monday);\n  //     setLastTaskHeader({ lastHeader: props.monday });\n\n  //     console.log(`this is the last task alert ${lastTaskHeader.lastHeader}`);\n  //   }\n  //   if (props.reRenderTodayTasks === true) {\n  //     // alert('Are you sure you want to delete this task?');\n  //     //return (props.reRender = {})\n  //   }\n  // });\n\n  return (\n    <div>\n      <h1 id=\"title\"> Tasks for The Day</h1>\n      <table id=\"students\">\n        <tbody>\n          <tr>{renderTableHeaderHandler()}</tr>\n          {tasksOfSelectedDayHandler()}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default PickedDayTasks;\n"]},"metadata":{},"sourceType":"module"}