{"ast":null,"code":"var _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/containers/Store/EventsData.js\";\nimport React, { Component } from 'react';\nimport StoreContext from '../../context/StoreDataContext';\n\nclass EventsData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      word: 'toy'\n    };\n\n    this.newEventHandler = () => {};\n\n    this.toy = 'ball';\n\n    this.toyCapability = () => {\n      console.log(this.toy);\n    };\n  }\n\n  render() {\n    if (this.context.dataRequestDetails.typeOfData === 'EventsData') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          //newEvent\n          console.log('inside EventData case 1');\n          break;\n      }\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    });\n  }\n\n}\n\nEventsData.contextType = StoreContext;\nexport default EventsData; // eventId: '',\n// eventTitle: '',\n// eventNote: '',\n// eventCategory: '',\n// eventStartTimeDate: '',\n// eventFinishTimeDate: '',\n// //later: If one-day event\n// eventDuration: '',\n// //Later:\n// //T -> schedule it on calendarData\n// //F--> put into unScheduledEventsList for that day\n// blockOffTimeSlot: false,\n// showStartTimeDate: false,\n// showFinishTimeDate: false,\n// eventDeadline: '',\n// //later: show multiday non-continous event\n// showMultidayNonContinousDate: false","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/containers/Store/EventsData.js"],"names":["React","Component","StoreContext","EventsData","constructor","props","state","word","newEventHandler","toy","toyCapability","console","log","render","context","dataRequestDetails","typeOfData","handlerChoice","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,gCAAzB;;AAEA,MAAMC,UAAN,SAAyBF,SAAzB,CAAmC;AACjCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAQnBC,KARmB,GAQX;AACNC,MAAAA,IAAI,EAAE;AADA,KARW;;AAAA,SAWnBC,eAXmB,GAWD,MAAM,CAAE,CAXP;;AAEjB,SAAKC,GAAL,GAAW,MAAX;;AACA,SAAKC,aAAL,GAAqB,MAAM;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,GAAjB;AACD,KAFD;AAGD;;AAMDI,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKC,OAAL,CAAaC,kBAAb,CAAgCC,UAAhC,KAA+C,YAAnD,EAAiE;AAC/D,cAAQ,KAAKF,OAAL,CAAaC,kBAAb,CAAgCE,aAAxC;AACE,aAAK,GAAL;AAAU;AACRN,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA;AAHJ;AAKD;;AACD,WAAO,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAtBgC;;AAA7BT,U,CAQGe,W,GAAchB,Y;AAiBvB,eAAeC,UAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport StoreContext from '../../context/StoreDataContext';\n\nclass EventsData extends Component {\n  constructor(props) {\n    super(props);\n    this.toy = 'ball';\n    this.toyCapability = () => {\n      console.log(this.toy);\n    };\n  }\n  static contextType = StoreContext;\n  state = {\n    word: 'toy'\n  };\n  newEventHandler = () => {};\n  render() {\n    if (this.context.dataRequestDetails.typeOfData === 'EventsData') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1': //newEvent\n          console.log('inside EventData case 1');\n          break;\n      }\n    }\n    return <React.Fragment></React.Fragment>;\n  }\n}\n\nexport default EventsData;\n\n// eventId: '',\n// eventTitle: '',\n// eventNote: '',\n// eventCategory: '',\n// eventStartTimeDate: '',\n// eventFinishTimeDate: '',\n// //later: If one-day event\n// eventDuration: '',\n// //Later:\n// //T -> schedule it on calendarData\n// //F--> put into unScheduledEventsList for that day\n// blockOffTimeSlot: false,\n// showStartTimeDate: false,\n// showFinishTimeDate: false,\n// eventDeadline: '',\n// //later: show multiday non-continous event\n// showMultidayNonContinousDate: false\n"]},"metadata":{},"sourceType":"module"}