{"ast":null,"code":"import _defineProperty from \"/Users/thomasjd/Desktop/caltask/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react'; //import classes from '../../components/Cockpit/Cockpit.module.css';\n\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport Store from './Store';\nimport EventsData from './EventsData';\nimport SyllabusContext from '../../context/syllabusContext';\n\nclass Syllabus extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataBaseName: 'syllabus',\n      maxReact: [{\n        id: 'xvlwil',\n        lesson: '90. (for props Changes)',\n        completion: false\n      }, {\n        id: 'bbbskk',\n        lesson: '91. (for state Changes)',\n        completion: false\n      }, {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }],\n      maxReactWorkLeft: [{\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      }, {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      }, {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }],\n      Monday: [{\n        id: 'morning1',\n        lesson: '96. Using shouldComponentUpdate for Optimization (Class-Components)',\n        completion: false\n      }, {\n        id: 'afternoon1',\n        lesson: '97. Optimizing Functional Components with React.memo()',\n        completion: false\n      }, {\n        id: 'evening1',\n        lesson: '98. When should you optimize',\n        completion: false\n      }],\n      Tuesday: [{\n        id: 'morning2',\n        lesson: '99. PureComponents instead of shouldComponentUpdate',\n        completion: false\n      }, {\n        id: 'afternoon2',\n        lesson: '100. How React Updates the DOM',\n        completion: false\n      }, {\n        id: 'evening2',\n        lesson: '101. Rendering Adjacent JSX Elements',\n        completion: false\n      }],\n      Wednesday: [{\n        id: 'morning3',\n        lesson: '',\n        completion: false\n      }, {\n        id: 'afternoon3',\n        lesson: '',\n        completion: false\n      }, {\n        id: 'evening3',\n        lesson: '',\n        completion: false\n      }],\n      Thursday: [{\n        id: 'morning4',\n        lesson: '',\n        completion: false\n      }, {\n        id: 'afternoon4',\n        lesson: '',\n        completion: false\n      }, {\n        id: 'evening4',\n        lesson: '',\n        completion: false\n      }],\n      Friday: [{\n        id: 'morning5',\n        lesson: '',\n        completion: false\n      }, {\n        id: 'afternoon5',\n        lesson: '',\n        completion: false\n      }, {\n        id: 'evening5',\n        lesson: '',\n        completion: false\n      }],\n      Saturday: [{\n        id: 'morning6',\n        lesson: '',\n        completion: false\n      }, {\n        id: 'afternoon6',\n        lesson: '',\n        completion: false\n      }, {\n        id: 'evening6',\n        lesson: '',\n        completion: false\n      }],\n      Sunday: [{\n        id: 'morning7',\n        lesson: '',\n        completion: false\n      }, {\n        id: 'afternoon7',\n        lesson: '',\n        completion: false\n      }, {\n        id: 'evening7',\n        lesson: '',\n        completion: false\n      }],\n      lastLessonHeader: [],\n      realNum: 9,\n      crunk: 'Hootie',\n      showLeftOverLessonsFromSyllabus: false,\n      TasksData: 'd',\n      nothing: 'nothing',\n      showData2: false\n    };\n\n    this.assignLessonFromSyllabus = () => {\n      this.setState({\n        showLeftOverLessonsFromSyllabus: true\n      });\n\n      if (this.state.maxReact.length != 0) {\n        this.setState({\n          lastLessonHeader: this.state.maxReact[0]\n        });\n      } else {\n        this.setState({\n          lastLessonHeader: this.state.lastLessonHeader\n        });\n      }\n    };\n\n    this.deleteLessonFromOriginalSyllabusHandler = taskIndex => {\n      alert('Are you sure you want to add this lesson?');\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      currentOriginalLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReactWorkLeft: currentOriginalLessons\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n\n    this.addLessonFromOriginalSyllabusHandler = taskIndex => {\n      let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n      let lessonToAdd = currentOriginalLessons[taskIndex]; //add to maxReact the picked lesson\n\n      console.log('I am inside addNewLesonHandler');\n      let currentMaxReactSyllabus = [...this.state.maxReact];\n      currentMaxReactSyllabus.push(lessonToAdd); //currentMaxReactSyllabus.push(newLesson);\n\n      console.log(currentMaxReactSyllabus);\n      let currentShowLeftOverLessonsFromSyllabus = this.state.showLeftOverLessonsFromSyllabus; //showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus,\n      //Showing current left over Lessons from Syllabus (after addition/deletion)\n\n      this.setState({\n        maxReact: currentMaxReactSyllabus\n      }, this.deleteLessonFromOriginalSyllabusHandler(taskIndex));\n    };\n\n    this.lastLessonHeaderHandler = () => {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          if (this.state.maxReact.length != 0) {\n            this.setState({\n              lastLessonHeader: this.state.maxReact[0]\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          } else {\n            this.setState({\n              lastLessonHeader: this.state.lastLessonHeader\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          }\n\n          break;\n\n        case '2':\n          alert('In case 2 of lastHeader()');\n\n          if (this.state.Monday.length != 0) {\n            this.setState({\n              lastLessonHeader: this.state.Monday[0]\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          } else {\n            this.setState({\n              lastLessonHeader: this.state.lastLessonHeader\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          }\n\n          break;\n\n        case '6':\n          if (this.state.maxReactWorkLeft.length != 0) {\n            this.setState({\n              lastLessonHeader: this.state.maxReactWorkLeft[0]\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          } else {\n            this.setState({\n              lastLessonHeader: this.state.lastLessonHeader\n            }, () => {\n              this.context.resetHandlerChoice(this.context.dataReceiverHandler(this.state));\n            });\n          }\n\n          break;\n      }\n    };\n\n    this.showLeftOverLessonsFromSyllabusHandler = () => {// this.setState(\n      //   { showLeftOverLessonsFromSyllabus: true },\n      //   () => this.lastLessonHeaderHandler(),\n      //   () => {\n      //     this.props.receiveSyllabusDataHandler(this.state);\n      //   }\n      // );\n      // this.lastLessonHeaderHandler();\n      // if(this.state.)\n      // this.props.receiveSyllabusDataHandler(this.state);\n    };\n\n    this.deleteLessonFromAssignedSyllabusHandler = taskIndex => {\n      let currentScheduledLessons = [...this.state.maxReact];\n      currentScheduledLessons.splice(taskIndex, 1);\n      this.setState({\n        maxReact: currentScheduledLessons\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n\n    this.leftOverLessonChangeHandler = (lessonValue, taskChangeId) => {\n      const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReactWorkLeft[foundTaskId]); //using updated values to define the lesson of the particular pulled out lesson\n\n\n      updatedLessons.lesson = lessonValue; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReactWorkLeft]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskId] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReactWorkLeft: lessons,\n        showLeftOverLessonsFromSyllabus: true\n      }, () => this.lastLessonHeaderHandler(this.context.dataReceiverHandler(this.state)));\n    };\n\n    this.lessonChangeHandler = (lessonValue, taskChangeId) => {\n      //Find the index of the lessons that matches the id sent in\n      const foundTaskIndex = this.state.maxReact.findIndex(currentId => {\n        return currentId.id === taskChangeId;\n      }); //createnew task item to put into array\n\n      const updatedLessons = _objectSpread({}, this.state.maxReact[foundTaskIndex]); //using updated values to define the lesson of the particular pulled out lesson\n      //updatedLessons.lesson = event.target.value;\n\n\n      updatedLessons.lesson = lessonValue; //pull out of states maxReact array\n\n      const lessons = [...this.state.maxReact]; //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n\n      lessons[foundTaskIndex] = updatedLessons; //final update of lessons\n\n      this.setState({\n        maxReact: lessons\n      }, () => this.context.dataReceiverHandler(this.state));\n    };\n  }\n\n  render() {\n    //syllabusHandlerChoice\n    if (this.context.dataRequestDetails.typeOfData === 'syllabus') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          this.lastLessonHeaderHandler();\n          break;\n\n        case '2':\n          this.lastLessonHeaderHandler();\n          break;\n\n        case '3':\n          // alert(\n          //   `case 3 syllabusData for delete index:  ${this.context.dataRequestDetails['index']}`\n          // );\n          this.context.resetHandlerChoice(this.deleteLessonFromAssignedSyllabusHandler(this.context.dataRequestDetails.index));\n          break;\n\n        case '4':\n          //this.props.resetSyllabusHandlerChoice(\n          this.context.resetHandlerChoice(this.lessonChangeHandler(this.context.dataRequestDetails['value'], this.context.dataRequestDetails.id));\n          break;\n\n        case '5':\n          this.context.resetHandlerChoice(this.addLessonFromOriginalSyllabusHandler(this.context.dataRequestDetails.index));\n          break;\n\n        case '6':\n          // leftOverLessonChangeHandler;\n          //this.context.resetSyllabusHandlerChoice();\n          this.leftOverLessonChangeHandler(this.context.dataRequestDetails.value, this.context.dataRequestDetails.id);\n          break;\n\n        case '7':\n          //let index = this.props.index;\n          //this.addLessonFromOriginalSyllabusHandler(index);\n          this.props.resetSyllabusHandlerChoice(this.addLessonFromOriginalSyllabusHandler(this.props.index));\n          break;\n\n        case '8':\n      }\n    }\n\n    return null;\n  }\n\n}\n\nSyllabus.contextType = SyllabusContext;\nexport default Syllabus;","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/src/containers/Store/SyllabusData.js"],"names":["React","Component","RightCockpit","TasksData","Store","EventsData","SyllabusContext","Syllabus","state","dataBaseName","maxReact","id","lesson","completion","maxReactWorkLeft","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday","lastLessonHeader","realNum","crunk","showLeftOverLessonsFromSyllabus","nothing","showData2","assignLessonFromSyllabus","setState","length","deleteLessonFromOriginalSyllabusHandler","taskIndex","alert","currentOriginalLessons","splice","context","dataReceiverHandler","addLessonFromOriginalSyllabusHandler","lessonToAdd","console","log","currentMaxReactSyllabus","push","currentShowLeftOverLessonsFromSyllabus","lastLessonHeaderHandler","dataRequestDetails","handlerChoice","resetHandlerChoice","showLeftOverLessonsFromSyllabusHandler","deleteLessonFromAssignedSyllabusHandler","currentScheduledLessons","leftOverLessonChangeHandler","lessonValue","taskChangeId","foundTaskId","findIndex","currentId","updatedLessons","lessons","lessonChangeHandler","foundTaskIndex","render","typeOfData","index","value","props","resetSyllabusHandlerChoice","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import classes from '../../components/Cockpit/Cockpit.module.css';\nimport RightCockpit from '../RightCockpit/RightCockpit';\nimport TasksData from './TasksData';\nimport Store from './Store';\nimport EventsData from './EventsData';\nimport SyllabusContext from '../../context/syllabusContext';\n\nclass Syllabus extends Component {\n  state = {\n    dataBaseName: 'syllabus',\n    maxReact: [\n      { id: 'xvlwil', lesson: '90. (for props Changes)', completion: false },\n      { id: 'bbbskk', lesson: '91. (for state Changes)', completion: false },\n      {\n        id: 'kjhck2',\n        lesson: '92. Using useEffect() in Functional Components ',\n        completion: false\n      }\n    ],\n    maxReactWorkLeft: [\n      {\n        lesson: '93. Controlling the useEffect() Behavior',\n        id: 'this.state.contentChoice.lesson.bind(this)',\n        completion: false\n      },\n      {\n        lesson: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        id: '94. Cleaning up with Lifecycle Hooks & useEffect()',\n        completion: false\n      },\n      {\n        lesson: '95. Cleanup Work with useEffect() - Ex',\n        id: '95. Cleanup Work with useEffect() - Ex',\n        completion: false\n      }\n    ],\n    Monday: [\n      {\n        id: 'morning1',\n        lesson:\n          '96. Using shouldComponentUpdate for Optimization (Class-Components)',\n        completion: false\n      },\n      {\n        id: 'afternoon1',\n        lesson: '97. Optimizing Functional Components with React.memo()',\n        completion: false\n      },\n      {\n        id: 'evening1',\n        lesson: '98. When should you optimize',\n        completion: false\n      }\n    ],\n    Tuesday: [\n      {\n        id: 'morning2',\n        lesson: '99. PureComponents instead of shouldComponentUpdate',\n        completion: false\n      },\n      {\n        id: 'afternoon2',\n        lesson: '100. How React Updates the DOM',\n        completion: false\n      },\n      {\n        id: 'evening2',\n        lesson: '101. Rendering Adjacent JSX Elements',\n        completion: false\n      }\n    ],\n    Wednesday: [\n      { id: 'morning3', lesson: '', completion: false },\n      { id: 'afternoon3', lesson: '', completion: false },\n      { id: 'evening3', lesson: '', completion: false }\n    ],\n    Thursday: [\n      { id: 'morning4', lesson: '', completion: false },\n      { id: 'afternoon4', lesson: '', completion: false },\n      { id: 'evening4', lesson: '', completion: false }\n    ],\n    Friday: [\n      { id: 'morning5', lesson: '', completion: false },\n      { id: 'afternoon5', lesson: '', completion: false },\n      { id: 'evening5', lesson: '', completion: false }\n    ],\n    Saturday: [\n      { id: 'morning6', lesson: '', completion: false },\n      { id: 'afternoon6', lesson: '', completion: false },\n      { id: 'evening6', lesson: '', completion: false }\n    ],\n    Sunday: [\n      { id: 'morning7', lesson: '', completion: false },\n      { id: 'afternoon7', lesson: '', completion: false },\n      { id: 'evening7', lesson: '', completion: false }\n    ],\n    lastLessonHeader: [],\n    realNum: 9,\n    crunk: 'Hootie',\n    showLeftOverLessonsFromSyllabus: false,\n    TasksData: 'd',\n    nothing: 'nothing',\n    showData2: false\n  };\n\n  static contextType = SyllabusContext;\n  assignLessonFromSyllabus = () => {\n    this.setState({ showLeftOverLessonsFromSyllabus: true });\n\n    if (this.state.maxReact.length != 0) {\n      this.setState({ lastLessonHeader: this.state.maxReact[0] });\n    } else {\n      this.setState({ lastLessonHeader: this.state.lastLessonHeader });\n    }\n  };\n\n  deleteLessonFromOriginalSyllabusHandler = taskIndex => {\n    alert('Are you sure you want to add this lesson?');\n\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n\n    currentOriginalLessons.splice(taskIndex, 1);\n\n    this.setState({ maxReactWorkLeft: currentOriginalLessons }, () =>\n      this.context.dataReceiverHandler(this.state)\n    );\n  };\n\n  addLessonFromOriginalSyllabusHandler = taskIndex => {\n    let currentOriginalLessons = [...this.state.maxReactWorkLeft];\n    let lessonToAdd = currentOriginalLessons[taskIndex];\n\n    //add to maxReact the picked lesson\n    console.log('I am inside addNewLesonHandler');\n    let currentMaxReactSyllabus = [...this.state.maxReact];\n    currentMaxReactSyllabus.push(lessonToAdd);\n\n    //currentMaxReactSyllabus.push(newLesson);\n    console.log(currentMaxReactSyllabus);\n    let currentShowLeftOverLessonsFromSyllabus = this.state\n      .showLeftOverLessonsFromSyllabus;\n    //showLeftOverLessonsFromSyllabus: !currentShowLeftOverLessonsFromSyllabus,\n    //Showing current left over Lessons from Syllabus (after addition/deletion)\n    this.setState(\n      {\n        maxReact: currentMaxReactSyllabus\n      },\n      this.deleteLessonFromOriginalSyllabusHandler(taskIndex)\n    );\n  };\n\n  lastLessonHeaderHandler = () => {\n    switch (this.context.dataRequestDetails.handlerChoice) {\n      case '1':\n        if (this.state.maxReact.length != 0) {\n          this.setState(\n            { lastLessonHeader: this.state.maxReact[0] },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        } else {\n          this.setState(\n            { lastLessonHeader: this.state.lastLessonHeader },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        }\n\n        break;\n\n      case '2':\n        alert('In case 2 of lastHeader()');\n        if (this.state.Monday.length != 0) {\n          this.setState(\n            { lastLessonHeader: this.state.Monday[0] },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        } else {\n          this.setState(\n            { lastLessonHeader: this.state.lastLessonHeader },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        }\n        break;\n\n      case '6':\n        if (this.state.maxReactWorkLeft.length != 0) {\n          this.setState(\n            {\n              lastLessonHeader: this.state.maxReactWorkLeft[0]\n            },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        } else {\n          this.setState(\n            { lastLessonHeader: this.state.lastLessonHeader },\n\n            () => {\n              this.context.resetHandlerChoice(\n                this.context.dataReceiverHandler(this.state)\n              );\n            }\n          );\n        }\n        break;\n    }\n  };\n\n  showLeftOverLessonsFromSyllabusHandler = () => {\n    // this.setState(\n    //   { showLeftOverLessonsFromSyllabus: true },\n    //   () => this.lastLessonHeaderHandler(),\n    //   () => {\n    //     this.props.receiveSyllabusDataHandler(this.state);\n    //   }\n    // );\n    // this.lastLessonHeaderHandler();\n    // if(this.state.)\n    // this.props.receiveSyllabusDataHandler(this.state);\n  };\n\n  deleteLessonFromAssignedSyllabusHandler = taskIndex => {\n    let currentScheduledLessons = [...this.state.maxReact];\n    currentScheduledLessons.splice(taskIndex, 1);\n    this.setState({ maxReact: currentScheduledLessons }, () =>\n      this.context.dataReceiverHandler(this.state)\n    );\n  };\n\n  leftOverLessonChangeHandler = (lessonValue, taskChangeId) => {\n    const foundTaskId = this.state.maxReactWorkLeft.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReactWorkLeft[foundTaskId] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    updatedLessons.lesson = lessonValue;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReactWorkLeft];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskId] = updatedLessons;\n\n    //final update of lessons\n    this.setState(\n      { maxReactWorkLeft: lessons, showLeftOverLessonsFromSyllabus: true },\n      () =>\n        this.lastLessonHeaderHandler(\n          this.context.dataReceiverHandler(this.state)\n        )\n    );\n  };\n\n  lessonChangeHandler = (lessonValue, taskChangeId) => {\n    //Find the index of the lessons that matches the id sent in\n    const foundTaskIndex = this.state.maxReact.findIndex(currentId => {\n      return currentId.id === taskChangeId;\n    });\n\n    //createnew task item to put into array\n    const updatedLessons = { ...this.state.maxReact[foundTaskIndex] };\n\n    //using updated values to define the lesson of the particular pulled out lesson\n    //updatedLessons.lesson = event.target.value;\n    updatedLessons.lesson = lessonValue;\n\n    //pull out of states maxReact array\n    const lessons = [...this.state.maxReact];\n\n    //update the new lesson w/ ID of interest from the copy of MaxReact (lessons)\n    lessons[foundTaskIndex] = updatedLessons;\n\n    //final update of lessons\n    this.setState({ maxReact: lessons }, () =>\n      this.context.dataReceiverHandler(this.state)\n    );\n  };\n  render() {\n    //syllabusHandlerChoice\n    if (this.context.dataRequestDetails.typeOfData === 'syllabus') {\n      switch (this.context.dataRequestDetails.handlerChoice) {\n        case '1':\n          this.lastLessonHeaderHandler();\n\n          break;\n\n        case '2':\n          this.lastLessonHeaderHandler();\n          break;\n\n        case '3':\n          // alert(\n          //   `case 3 syllabusData for delete index:  ${this.context.dataRequestDetails['index']}`\n          // );\n          this.context.resetHandlerChoice(\n            this.deleteLessonFromAssignedSyllabusHandler(\n              this.context.dataRequestDetails.index\n            )\n          );\n          break;\n\n        case '4':\n          //this.props.resetSyllabusHandlerChoice(\n\n          this.context.resetHandlerChoice(\n            this.lessonChangeHandler(\n              this.context.dataRequestDetails['value'],\n              this.context.dataRequestDetails.id\n            )\n          );\n          break;\n\n        case '5':\n          this.context.resetHandlerChoice(\n            this.addLessonFromOriginalSyllabusHandler(\n              this.context.dataRequestDetails.index\n            )\n          );\n\n          break;\n\n        case '6':\n          // leftOverLessonChangeHandler;\n          //this.context.resetSyllabusHandlerChoice();\n\n          this.leftOverLessonChangeHandler(\n            this.context.dataRequestDetails.value,\n            this.context.dataRequestDetails.id\n          );\n\n          break;\n\n        case '7':\n          //let index = this.props.index;\n          //this.addLessonFromOriginalSyllabusHandler(index);\n          this.props.resetSyllabusHandlerChoice(\n            this.addLessonFromOriginalSyllabusHandler(this.props.index)\n          );\n\n          break;\n        case '8':\n      }\n    }\n\n    return null;\n  }\n}\n\nexport default Syllabus;\n"]},"metadata":{},"sourceType":"module"}