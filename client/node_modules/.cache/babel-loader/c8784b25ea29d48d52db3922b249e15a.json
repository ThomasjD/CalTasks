{"ast":null,"code":"import _slicedToArray from \"/Users/thomasjd/Desktop/caltask/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/thomasjd/Desktop/caltask/client/src/components/Cockpit/Cockpit.js\";\n// import React, { useEffect, useState, useContext } from 'react';\n// //import rocky from '../../containers/App.module.css'\n// import classNames from 'classnames';\n// import classes from './Cockpit.module.css';\n// import Navbar from './navBar';\n// import DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\n// import Template from '../../Template/Template';\n// import TasksContext from '../../context/tasksContext';\n// import HowBusyThisWeek from './HowBusyThisWeek/HowBusyThisWeek';\n// import WeeklyTimeBudget from '../Creation/WeeklyTimeBudget/WeeklyTimeBudget';\n// const Cockpit = props => {\n//   //can do anything that componentDidUpdate can do\n//   //can send http request here\n//   const tasksContext = useContext(TasksContext);\n//   useEffect(() => {\n//     console.log('I am inside of [Cockpit.js] useffect');\n//     //getting rid of timer\n//     // const timer = setTimeout(() => {\n//     //   alert('Cockpit timer alert');\n//     // }, 1000);\n//     return () => {\n//       //clearTimeout(timer);\n//       console.log('[Cockpit.js] cleanup work in useEffect');\n//     };\n//   }, []);\n//   /*\n//     setTimeout(() => {\n//       alert('Saved data to cloud')\n//     }, 1000);\n//     return () => { //don't have to have a return statement\n//       console.log('[Cockpit.js] cleanup work in useEffect')\n//     }\n//   }, []);\n//   */\n//   //if 2nd argument [props.tasks] it doesn't involve tasks -> it won't run this again\n//   //[props.tasks]\n//   useEffect(() => {\n//     console.log('[Cockpit.js] 2nd useEffect');\n//     return () => {\n//       console.log('[Cockpit.js] cleanup work in 2nd UseEffect');\n//     };\n//   });\n//   //styling the 'Things to Do' using strings for classnames\n//   const assignedClasses = [];\n//   let btnClass = '';\n//   switch (props.tasksLength) {\n//     case 3:\n//       assignedClasses.push('bold', 'red');\n//       break;\n//     case 2:\n//       assignedClasses.push('red');\n//       break;\n//     case 1:\n//       assignedClasses.push('orange');\n//       break;\n//     default:\n//       assignedClasses.push('green');\n//       break;\n//   }\n//   //console.log(assignedClasses[0])\n//   //add multiple classes for <p> w/ strings\n//   //const classesFinal = classes.join(' ')\n//   const classesFinal = 'rocky.' + assignedClasses;\n//   const [cockpitViewOptions, setCockpitViewOptions] = useState({\n//     showTasksNumEachDay: true,\n//     showTimeBudgetForWeek: false\n//   });\n//   const setHowBusyToggleHandler = () => {\n//     let currentToggleStatus = cockpitViewOptions.showTasksNumEachDay;\n//     setCockpitViewOptions({\n//       showTasksNumEachDay: !currentToggleStatus\n//     });\n//   };\n//   const requestDataHandler = event => {\n//     let viewOptionChoice = event.target.value; //'' number used in displayContent component\n//     let contentChoice = null;\n//     let typeOfData = ''; //string: syllabus,tasks,events,objectives\n//     let handlerChoice = ''; //string: '#' handler inside of database\n//     let dataLocation = ''; // string: where obj found inside database\n//     let infoType = ''; //string: index/id/\n//     let info = ''; //string: actual info\n//     //let today = calendarObj();\n//     switch (viewOptionChoice) {\n//       case '0': //Unscheduled Tasks for Week\n//         let currentShowTasksNumEachDay = cockpitViewOptions.showTasksNumEachDay;\n//         setCockpitViewOptions({\n//           showTasksNumEachDay: !currentShowTasksNumEachDay\n//         });\n//         typeOfData = 'tasks';\n//         handlerChoice = '7';\n//         dataLocation = '';\n//         infoType = 'howBusy';\n//         info = null;\n//         //contentChoice = '7';\n//         let dataRequestMessage = {\n//           typeOfData: typeOfData,\n//           handlerChoice: handlerChoice,\n//           dataLocation: dataLocation,\n//           infoType: infoType,\n//           info: info\n//         };\n//         tasksContext.dataRequestHandler(event, dataRequestMessage);\n//         break;\n//       case '1': //TimeBudget for Week\n//         let currentShowTimeBudgetForWeek =\n//           cockpitViewOptions.showTimeBudgetForWeek;\n//         setCockpitViewOptions({\n//           showTimeBudgetForWeek: !currentShowTimeBudgetForWeek\n//         });\n//         //reconnect to UiData after forming universal Store\n//         // contentChoice = '12';\n//         // let contentViewObject = {\n//         //   target: {\n//         //     value: contentChoice\n//         //   }\n//         // };\n//         // props.contentViewHandler(contentViewObject);\n//         break;\n//     }\n//     // alert(`typeOfData: ${typeOfData}`);\n//     // alert(`handlerChoice ${handlerChoice}`);\n//     // alert(`dataLocation ${dataLocation}`);\n//     // alert(`infoType ${infoType}`);\n//     // alert(`info ${info}`);\n//     //props.contentViewHandler(contentViewObject);\n//   };\n//   let displayHowBusyThisWeek = null;\n//   if (\n//     tasksContext.tasksData.tasksData &&\n//     cockpitViewOptions.showTasksNumEachDay\n//     // tasksContext.tasksData.tasksData.showHowBusyWeek\n//   ) {\n//     displayHowBusyThisWeek = (\n//       <React.Fragment>\n//         <HowBusyThisWeek\n//           showHowBusyThisWeek={cockpitViewOptions.showTasksNumEachDay}\n//           deadline={tasksContext.tasksData.numTasksThisWeek}\n//         />\n//       </React.Fragment>\n//     );\n//   }\n//   let displayShowTimeBudgetForWeek = null;\n//   if (cockpitViewOptions.showTimeBudgetForWeek) {\n//     displayShowTimeBudgetForWeek = <WeeklyTimeBudget />;\n//   }\n//   return (\n//     <React.Fragment>\n//       <div>\n//         <img\n//           className={classes.leftCockpitIcon}\n//           src={require('../../Assets/aptIcon.png')}\n//         />\n//         <h5>Pick Content View!</h5>\n//         <br></br>\n//         <br></br>\n//         <div className=\"btn-group-toggle d-flex-between\" data-toggle=\"buttons\">\n//           <label className=\"btn btn-danger m-2 active\">\n//             <button\n//               // type=\"radio\"\n//               name=\"options\"\n//               id=\"option1\"\n//               autoComplete=\"off\"\n//               // onClick={props.viewContent}\n//               onClick={event => requestDataHandler(event)}\n//               value=\"0\"\n//             />{' '}\n//             Click to see # of Tasks/Day\n//           </label>\n//           <label className=\"btn btn-danger m-2 active\">\n//             <button\n//               // type=\"radio\"\n//               name=\"options\"\n//               id=\"option1\"\n//               autoComplete=\"off\"\n//               onClick={event => requestDataHandler(event)}\n//               value=\"1\"\n//               // onClick={event =>\n//               //   setHowBusyToggleHandler(\n//               //     tasksContext.dataRequestHandler(event, 'tasks', '7', null, null)\n//               //   )\n//               // }\n//               // value=\"0\"\n//             />{' '}\n//             Click to see Time Budget For Week\n//           </label>\n//         </div>\n//         <br></br>\n//         <br></br>\n//         {displayHowBusyThisWeek}\n//         {displayShowTimeBudgetForWeek}\n//         {cockpitViewOptions.showTasksNumEachDay ? (\n//           <React.Fragment>\n//             <Template />\n//             <p\n//               className={classNames({\n//                 [classes[assignedClasses[0]]]: true,\n//                 [classes[assignedClasses[1]]]: true\n//               })}\n//             ></p>\n//           </React.Fragment>\n//         ) : null}\n//         <DatePickerPicker />\n//       </div>\n//     </React.Fragment>\n//   );\n// };\nimport React, { useEffect, useState, useContext } from 'react'; //import rocky from '../../containers/App.module.css'\n\nimport classNames from 'classnames';\nimport classes from './Cockpit.module.css';\nimport Navbar from './navBar';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport Template from '../../Template/Template';\nimport TasksContext from '../../context/tasksContext';\nimport HowBusyThisWeek from './HowBusyThisWeek/HowBusyThisWeek'; // export default React.memo(Cockpit);\n\nconst Cockpit = props => {\n  //can do anything that componentDidUpdate can do\n  //can send http request here\n  const tasksContext = useContext(TasksContext);\n  useEffect(() => {\n    console.log('I am inside of [Cockpit.js] useffect'); //getting rid of timer\n    // const timer = setTimeout(() => {\n    //   alert('Cockpit timer alert');\n    // }, 1000);\n\n    return () => {\n      //clearTimeout(timer);\n      console.log('[Cockpit.js] cleanup work in useEffect');\n    };\n  }, []);\n  /*\n    setTimeout(() => {\n      alert('Saved data to cloud')\n    }, 1000);\n    return () => { //don't have to have a return statement\n      console.log('[Cockpit.js] cleanup work in useEffect')\n    }\n  }, []); \n  */\n  //if 2nd argument [props.tasks] it doesn't involve tasks -> it won't run this again\n  //[props.tasks]\n\n  useEffect(() => {\n    console.log('[Cockpit.js] 2nd useEffect');\n    return () => {\n      console.log('[Cockpit.js] cleanup work in 2nd UseEffect');\n    };\n  }); //styling the 'Things to Do' using strings for classnames\n\n  const assignedClasses = [];\n  let btnClass = '';\n\n  switch (props.tasksLength) {\n    case 3:\n      assignedClasses.push('bold', 'red');\n      break;\n\n    case 2:\n      assignedClasses.push('red');\n      break;\n\n    case 1:\n      assignedClasses.push('orange');\n      break;\n\n    default:\n      assignedClasses.push('green');\n      break;\n  } //console.log(assignedClasses[0])\n  //add multiple classes for <p> w/ strings\n  //const classesFinal = classes.join(' ')\n\n\n  const classesFinal = 'rocky.' + assignedClasses;\n\n  const _useState = useState({\n    showTasksNumEachDay: true\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        cockpitViewOptions = _useState2[0],\n        setCockpitViewOptions = _useState2[1]; //tasksContext.dataRequestHandler(event, 'tasks', '7', null, null)\n\n\n  const setHowBusyToggleHandler = () => {\n    let currentToggleStatus = cockpitViewOptions.showTasksNumEachDay;\n    setCockpitViewOptions({\n      showTasksNumEachDay: !currentToggleStatus\n    }); // if (howBusyToggle.showTasksNumEachDay) {\n    // } else {\n    //   let currentToggleStatus = howBusyToggle.showTasksNumEachDay;\n    //   setHowBusyToggle(\n    //     () => tasksContext.dataRequestHandler(event, 'tasks', '7', null, null),\n    //     {\n    //       showTasksNumEachDay: !currentToggleStatus\n    //     }\n    //   );\n    // }\n  }; //tasksContext = useContext(TasksContext);\n  //.numTasksThisWeek['Monday']showHowBusyWeeek\n  // if (tasksContext.tasksData.tasksData['showHowBusyWeeek'] == !null) {\n  //   alert('inside of cockpit');\n  // }\n  //if (tasksContext.tasksData.tasksData) {\n  //console.log('inside if (!howBusyToggle.showTasksNumEachDay) statement');\n\n\n  const requestDataHandler = event => {\n    let viewOptionChoice = event.target.value; //'' number used in displayContent component\n\n    let contentChoice = null;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n\n    let handlerChoice = ''; //string: '#' handler inside of database\n\n    let dataLocation = ''; // string: where obj found inside database\n\n    let infoType = ''; //string: index/id/\n\n    let info = ''; //string: actual info\n    // let today = calendarObj();\n\n    switch (viewOptionChoice) {\n      case '0':\n        //Unscheduled Tasks for Week\n        typeOfData = 'tasks';\n        handlerChoice = '7';\n        dataLocation = '';\n        infoType = null;\n        info = null;\n        contentChoice = '7';\n        let currentShowTimeBudgetForWeek = cockpitViewOptions.showTimeBudgetForWeek;\n        setCockpitViewOptions({\n          showTimeBudgetForWeek: !currentShowTimeBudgetForWeek\n        });\n        break;\n\n      case '1':\n        //Today's Tasks\n        typeOfData = 'timeBudget';\n        handlerChoice = '2';\n        dataLocation = '';\n        infoType = null;\n        info = null;\n        break;\n    }\n\n    let dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n    let contentViewObject = {\n      target: {\n        value: contentChoice\n      }\n    }; // alert(`typeOfData: ${typeOfData}`);\n    // alert(`handlerChoice ${handlerChoice}`);\n    // alert(`dataLocation ${dataLocation}`);\n    // alert(`infoType ${infoType}`);\n    // alert(`info ${info}`);\n\n    tasksContext.dataRequestHandler(event, dataRequestMessage);\n    props.contentViewHandler(contentViewObject);\n  };\n\n  let displayHowBusyThisWeek = null; //console.log(tasksContext.tasksData.tasksData.numTasksThisWeek.Monday);\n\n  if (tasksContext.tasksData.tasksData && tasksContext.tasksData.tasksData.showHowBusyWeek) {\n    displayHowBusyThisWeek = React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, React.createElement(HowBusyThisWeek, {\n      showHowBusyThisWeek: howBusyToggle.showTasksNumEachDay,\n      deadline: tasksContext.tasksData.numTasksThisWeek,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410\n    },\n    __self: this\n  }, displayHowBusyThisWeek, React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: classes.leftCockpitIcon,\n    src: require('../../Assets/aptIcon.png'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413\n    },\n    __self: this\n  }), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418\n    },\n    __self: this\n  }, \"Pick Content View!\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"btn-group-toggle d-flex-between\",\n    \"data-toggle\": \"buttons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"btn btn-danger m-2 active\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"radio\",\n    name: \"options\",\n    id: \"option1\",\n    autoComplete: \"off\" // onClick={props.viewContent}\n    ,\n    onClick: setHowBusyToggleHandler(event => requestDataHandler(event)),\n    value: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423\n    },\n    __self: this\n  }), ' ', \"Click to see # of Tasks/Day\"), React.createElement(\"label\", {\n    className: \"btn btn-danger m-2 active\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"radio\",\n    name: \"options\",\n    id: \"option1\",\n    autoComplete: \"off\",\n    onClick: event => requestDataHandler(event),\n    value: \"1\" // onClick={event =>\n    //   setHowBusyToggleHandler(\n    //     tasksContext.dataRequestHandler(event, 'tasks', '7', null, null)\n    //   )\n    // }\n    // value=\"0\"\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438\n    },\n    __self: this\n  }), ' ', \"Click to see # of Tasks/Day\")), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455\n    },\n    __self: this\n  }, \"Click to see # of Tasks/Day\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457\n    },\n    __self: this\n  }), howBusyToggle.showTasksNumEachDay ? React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460\n    },\n    __self: this\n  }, React.createElement(Template, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: classNames({\n      [classes[assignedClasses[0]]]: true,\n      [classes[assignedClasses[1]]]: true\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463\n    },\n    __self: this\n  })) : null, React.createElement(DatePickerPicker, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471\n    },\n    __self: this\n  })));\n};\n\nexport default React.memo(Cockpit);","map":{"version":3,"sources":["/Users/thomasjd/Desktop/caltask/client/src/components/Cockpit/Cockpit.js"],"names":["React","useEffect","useState","useContext","classNames","classes","Navbar","DatePickerPicker","Template","TasksContext","HowBusyThisWeek","Cockpit","props","tasksContext","console","log","assignedClasses","btnClass","tasksLength","push","classesFinal","showTasksNumEachDay","cockpitViewOptions","setCockpitViewOptions","setHowBusyToggleHandler","currentToggleStatus","requestDataHandler","event","viewOptionChoice","target","value","contentChoice","typeOfData","handlerChoice","dataLocation","infoType","info","currentShowTimeBudgetForWeek","showTimeBudgetForWeek","dataRequestMessage","contentViewObject","dataRequestHandler","contentViewHandler","displayHowBusyThisWeek","tasksData","showHowBusyWeek","howBusyToggle","numTasksThisWeek","leftCockpitIcon","require","memo"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD,C,CACA;;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,eAAP,MAA4B,mCAA5B,C,CACA;;AAEA,MAAMC,OAAO,GAAGC,KAAK,IAAI;AACvB;AACA;AACA,QAAMC,YAAY,GAAGV,UAAU,CAACM,YAAD,CAA/B;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EADc,CAGd;AACA;AACA;AACA;;AAEA,WAAO,MAAM;AACX;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACD,KAHD;AAID,GAZQ,EAYN,EAZM,CAAT;AAcA;;;;;;;;;AASA;AACA;;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,WAAO,MAAM;AACXD,MAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACD,KAFD;AAGD,GALQ,CAAT,CA/BuB,CAsCvB;;AACA,QAAMC,eAAe,GAAG,EAAxB;AACA,MAAIC,QAAQ,GAAG,EAAf;;AAEA,UAAQL,KAAK,CAACM,WAAd;AACE,SAAK,CAAL;AACEF,MAAAA,eAAe,CAACG,IAAhB,CAAqB,MAArB,EAA6B,KAA7B;AACA;;AACF,SAAK,CAAL;AACEH,MAAAA,eAAe,CAACG,IAAhB,CAAqB,KAArB;AACA;;AACF,SAAK,CAAL;AACEH,MAAAA,eAAe,CAACG,IAAhB,CAAqB,QAArB;AACA;;AACF;AACEH,MAAAA,eAAe,CAACG,IAAhB,CAAqB,OAArB;AACA;AAZJ,GA1CuB,CAyDvB;AACA;AACA;;;AACA,QAAMC,YAAY,GAAG,WAAWJ,eAAhC;;AA5DuB,oBA6D6Bd,QAAQ,CAAC;AAC3DmB,IAAAA,mBAAmB,EAAE;AADsC,GAAD,CA7DrC;AAAA;AAAA,QA6DhBC,kBA7DgB;AAAA,QA6DIC,qBA7DJ,kBAgEvB;;;AACA,QAAMC,uBAAuB,GAAG,MAAM;AACpC,QAAIC,mBAAmB,GAAGH,kBAAkB,CAACD,mBAA7C;AACAE,IAAAA,qBAAqB,CAAC;AACpBF,MAAAA,mBAAmB,EAAE,CAACI;AADF,KAAD,CAArB,CAFoC,CAMpC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAjBD,CAjEuB,CAoFvB;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,QAAMC,kBAAkB,GAAGC,KAAK,IAAI;AAClC,QAAIC,gBAAgB,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAApC,CADkC,CACS;;AAC3C,QAAIC,aAAa,GAAG,IAApB;AACA,QAAIC,UAAU,GAAG,EAAjB,CAHkC,CAGb;;AACrB,QAAIC,aAAa,GAAG,EAApB,CAJkC,CAIV;;AACxB,QAAIC,YAAY,GAAG,EAAnB,CALkC,CAKX;;AACvB,QAAIC,QAAQ,GAAG,EAAf,CANkC,CAMf;;AACnB,QAAIC,IAAI,GAAG,EAAX,CAPkC,CAOnB;AACf;;AAEA,YAAQR,gBAAR;AACE,WAAK,GAAL;AAAU;AACRI,QAAAA,UAAU,GAAG,OAAb;AACAC,QAAAA,aAAa,GAAG,GAAhB;AACAC,QAAAA,YAAY,GAAG,EAAf;AACAC,QAAAA,QAAQ,GAAG,IAAX;AACAC,QAAAA,IAAI,GAAG,IAAP;AACAL,QAAAA,aAAa,GAAG,GAAhB;AAEA,YAAIM,4BAA4B,GAC9Bf,kBAAkB,CAACgB,qBADrB;AAEAf,QAAAA,qBAAqB,CAAC;AACpBe,UAAAA,qBAAqB,EAAE,CAACD;AADJ,SAAD,CAArB;AAGA;;AAEF,WAAK,GAAL;AAAU;AACRL,QAAAA,UAAU,GAAG,YAAb;AACAC,QAAAA,aAAa,GAAG,GAAhB;AACAC,QAAAA,YAAY,GAAG,EAAf;AACAC,QAAAA,QAAQ,GAAG,IAAX;AACAC,QAAAA,IAAI,GAAG,IAAP;AACA;AAtBJ;;AAyBA,QAAIG,kBAAkB,GAAG;AACvBP,MAAAA,UAAU,EAAEA,UADW;AAEvBC,MAAAA,aAAa,EAAEA,aAFQ;AAGvBC,MAAAA,YAAY,EAAEA,YAHS;AAIvBC,MAAAA,QAAQ,EAAEA,QAJa;AAKvBC,MAAAA,IAAI,EAAEA;AALiB,KAAzB;AAQA,QAAII,iBAAiB,GAAG;AACtBX,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAEC;AADD;AADc,KAAxB,CA3CkC,CAgDlC;AACA;AACA;AACA;AACA;;AACAlB,IAAAA,YAAY,CAAC4B,kBAAb,CAAgCd,KAAhC,EAAuCY,kBAAvC;AAEA3B,IAAAA,KAAK,CAAC8B,kBAAN,CAAyBF,iBAAzB;AACD,GAxDD;;AA0DA,MAAIG,sBAAsB,GAAG,IAA7B,CAvJuB,CAwJvB;;AAEA,MACE9B,YAAY,CAAC+B,SAAb,CAAuBA,SAAvB,IACA/B,YAAY,CAAC+B,SAAb,CAAuBA,SAAvB,CAAiCC,eAFnC,EAGE;AACAF,IAAAA,sBAAsB,GACpB,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,eAAD;AACE,MAAA,mBAAmB,EAAEG,aAAa,CAACzB,mBADrC;AAEE,MAAA,QAAQ,EAAER,YAAY,CAAC+B,SAAb,CAAuBG,gBAFnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAQD;;AACD,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,sBADH,EAEE;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAEtC,OAAO,CAAC2C,eADrB;AAEE,IAAA,GAAG,EAAEC,OAAO,CAAC,0BAAD,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASE;AAAK,IAAA,SAAS,EAAC,iCAAf;AAAiD,mBAAY,SAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,SAAS,EAAC,2BAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,EAAE,EAAC,SAHL;AAIE,IAAA,YAAY,EAAC,KAJf,CAKE;AALF;AAME,IAAA,OAAO,EAAEzB,uBAAuB,CAACG,KAAK,IACpCD,kBAAkB,CAACC,KAAD,CADY,CANlC;AASE,IAAA,KAAK,EAAC,GATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAWK,GAXL,gCADF,EAgBE;AAAO,IAAA,SAAS,EAAC,2BAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,EAAE,EAAC,SAHL;AAIE,IAAA,YAAY,EAAC,KAJf;AAKE,IAAA,OAAO,EAAEA,KAAK,IAAID,kBAAkB,CAACC,KAAD,CALtC;AAME,IAAA,KAAK,EAAC,GANR,CAOE;AACA;AACA;AACA;AACA;AACA;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAcK,GAdL,gCAhBF,CATF,EA2CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCA3CF,EA4CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5CF,EA6CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7CF,EA+CGmB,aAAa,CAACzB,mBAAd,GACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGE;AACE,IAAA,SAAS,EAAEjB,UAAU,CAAC;AACpB,OAACC,OAAO,CAACW,eAAe,CAAC,CAAD,CAAhB,CAAR,GAA+B,IADX;AAEpB,OAACX,OAAO,CAACW,eAAe,CAAC,CAAD,CAAhB,CAAR,GAA+B;AAFX,KAAD,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADD,GAWG,IA1DN,EA2DE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3DF,CAFF,CADF;AAkED,CAzOD;;AA0OA,eAAehB,KAAK,CAACkD,IAAN,CAAWvC,OAAX,CAAf","sourcesContent":["// import React, { useEffect, useState, useContext } from 'react';\n// //import rocky from '../../containers/App.module.css'\n// import classNames from 'classnames';\n// import classes from './Cockpit.module.css';\n// import Navbar from './navBar';\n// import DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\n// import Template from '../../Template/Template';\n// import TasksContext from '../../context/tasksContext';\n// import HowBusyThisWeek from './HowBusyThisWeek/HowBusyThisWeek';\n// import WeeklyTimeBudget from '../Creation/WeeklyTimeBudget/WeeklyTimeBudget';\n\n// const Cockpit = props => {\n//   //can do anything that componentDidUpdate can do\n//   //can send http request here\n//   const tasksContext = useContext(TasksContext);\n\n//   useEffect(() => {\n//     console.log('I am inside of [Cockpit.js] useffect');\n\n//     //getting rid of timer\n//     // const timer = setTimeout(() => {\n//     //   alert('Cockpit timer alert');\n//     // }, 1000);\n\n//     return () => {\n//       //clearTimeout(timer);\n//       console.log('[Cockpit.js] cleanup work in useEffect');\n//     };\n//   }, []);\n\n//   /*\n//     setTimeout(() => {\n//       alert('Saved data to cloud')\n//     }, 1000);\n//     return () => { //don't have to have a return statement\n//       console.log('[Cockpit.js] cleanup work in useEffect')\n//     }\n//   }, []);\n//   */\n//   //if 2nd argument [props.tasks] it doesn't involve tasks -> it won't run this again\n//   //[props.tasks]\n\n//   useEffect(() => {\n//     console.log('[Cockpit.js] 2nd useEffect');\n//     return () => {\n//       console.log('[Cockpit.js] cleanup work in 2nd UseEffect');\n//     };\n//   });\n\n//   //styling the 'Things to Do' using strings for classnames\n//   const assignedClasses = [];\n//   let btnClass = '';\n\n//   switch (props.tasksLength) {\n//     case 3:\n//       assignedClasses.push('bold', 'red');\n//       break;\n//     case 2:\n//       assignedClasses.push('red');\n//       break;\n//     case 1:\n//       assignedClasses.push('orange');\n//       break;\n//     default:\n//       assignedClasses.push('green');\n//       break;\n//   }\n\n//   //console.log(assignedClasses[0])\n//   //add multiple classes for <p> w/ strings\n//   //const classesFinal = classes.join(' ')\n//   const classesFinal = 'rocky.' + assignedClasses;\n\n//   const [cockpitViewOptions, setCockpitViewOptions] = useState({\n//     showTasksNumEachDay: true,\n//     showTimeBudgetForWeek: false\n//   });\n\n//   const setHowBusyToggleHandler = () => {\n//     let currentToggleStatus = cockpitViewOptions.showTasksNumEachDay;\n//     setCockpitViewOptions({\n//       showTasksNumEachDay: !currentToggleStatus\n//     });\n//   };\n\n//   const requestDataHandler = event => {\n//     let viewOptionChoice = event.target.value; //'' number used in displayContent component\n//     let contentChoice = null;\n//     let typeOfData = ''; //string: syllabus,tasks,events,objectives\n//     let handlerChoice = ''; //string: '#' handler inside of database\n//     let dataLocation = ''; // string: where obj found inside database\n//     let infoType = ''; //string: index/id/\n//     let info = ''; //string: actual info\n//     //let today = calendarObj();\n\n//     switch (viewOptionChoice) {\n//       case '0': //Unscheduled Tasks for Week\n//         let currentShowTasksNumEachDay = cockpitViewOptions.showTasksNumEachDay;\n//         setCockpitViewOptions({\n//           showTasksNumEachDay: !currentShowTasksNumEachDay\n//         });\n//         typeOfData = 'tasks';\n//         handlerChoice = '7';\n//         dataLocation = '';\n//         infoType = 'howBusy';\n//         info = null;\n//         //contentChoice = '7';\n//         let dataRequestMessage = {\n//           typeOfData: typeOfData,\n//           handlerChoice: handlerChoice,\n//           dataLocation: dataLocation,\n//           infoType: infoType,\n//           info: info\n//         };\n//         tasksContext.dataRequestHandler(event, dataRequestMessage);\n//         break;\n\n//       case '1': //TimeBudget for Week\n//         let currentShowTimeBudgetForWeek =\n//           cockpitViewOptions.showTimeBudgetForWeek;\n//         setCockpitViewOptions({\n//           showTimeBudgetForWeek: !currentShowTimeBudgetForWeek\n//         });\n//         //reconnect to UiData after forming universal Store\n//         // contentChoice = '12';\n//         // let contentViewObject = {\n//         //   target: {\n//         //     value: contentChoice\n//         //   }\n//         // };\n//         // props.contentViewHandler(contentViewObject);\n//         break;\n//     }\n\n//     // alert(`typeOfData: ${typeOfData}`);\n//     // alert(`handlerChoice ${handlerChoice}`);\n//     // alert(`dataLocation ${dataLocation}`);\n//     // alert(`infoType ${infoType}`);\n//     // alert(`info ${info}`);\n\n//     //props.contentViewHandler(contentViewObject);\n//   };\n//   let displayHowBusyThisWeek = null;\n\n//   if (\n//     tasksContext.tasksData.tasksData &&\n//     cockpitViewOptions.showTasksNumEachDay\n//     // tasksContext.tasksData.tasksData.showHowBusyWeek\n//   ) {\n//     displayHowBusyThisWeek = (\n//       <React.Fragment>\n//         <HowBusyThisWeek\n//           showHowBusyThisWeek={cockpitViewOptions.showTasksNumEachDay}\n//           deadline={tasksContext.tasksData.numTasksThisWeek}\n//         />\n//       </React.Fragment>\n//     );\n//   }\n\n//   let displayShowTimeBudgetForWeek = null;\n//   if (cockpitViewOptions.showTimeBudgetForWeek) {\n//     displayShowTimeBudgetForWeek = <WeeklyTimeBudget />;\n//   }\n\n//   return (\n//     <React.Fragment>\n//       <div>\n//         <img\n//           className={classes.leftCockpitIcon}\n//           src={require('../../Assets/aptIcon.png')}\n//         />\n\n//         <h5>Pick Content View!</h5>\n//         <br></br>\n//         <br></br>\n//         <div className=\"btn-group-toggle d-flex-between\" data-toggle=\"buttons\">\n//           <label className=\"btn btn-danger m-2 active\">\n//             <button\n//               // type=\"radio\"\n//               name=\"options\"\n//               id=\"option1\"\n//               autoComplete=\"off\"\n//               // onClick={props.viewContent}\n//               onClick={event => requestDataHandler(event)}\n//               value=\"0\"\n//             />{' '}\n//             Click to see # of Tasks/Day\n//           </label>\n\n//           <label className=\"btn btn-danger m-2 active\">\n//             <button\n//               // type=\"radio\"\n//               name=\"options\"\n//               id=\"option1\"\n//               autoComplete=\"off\"\n//               onClick={event => requestDataHandler(event)}\n//               value=\"1\"\n//               // onClick={event =>\n//               //   setHowBusyToggleHandler(\n//               //     tasksContext.dataRequestHandler(event, 'tasks', '7', null, null)\n//               //   )\n//               // }\n//               // value=\"0\"\n//             />{' '}\n//             Click to see Time Budget For Week\n//           </label>\n//         </div>\n\n//         <br></br>\n//         <br></br>\n//         {displayHowBusyThisWeek}\n//         {displayShowTimeBudgetForWeek}\n//         {cockpitViewOptions.showTasksNumEachDay ? (\n//           <React.Fragment>\n//             <Template />\n\n//             <p\n//               className={classNames({\n//                 [classes[assignedClasses[0]]]: true,\n//                 [classes[assignedClasses[1]]]: true\n//               })}\n//             ></p>\n//           </React.Fragment>\n//         ) : null}\n//         <DatePickerPicker />\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n\nimport React, { useEffect, useState, useContext } from 'react';\n//import rocky from '../../containers/App.module.css'\nimport classNames from 'classnames';\nimport classes from './Cockpit.module.css';\nimport Navbar from './navBar';\nimport DatePickerPicker from '../../containers/RightCockpit/DatePicker.js';\nimport Template from '../../Template/Template';\nimport TasksContext from '../../context/tasksContext';\nimport HowBusyThisWeek from './HowBusyThisWeek/HowBusyThisWeek';\n// export default React.memo(Cockpit);\n\nconst Cockpit = props => {\n  //can do anything that componentDidUpdate can do\n  //can send http request here\n  const tasksContext = useContext(TasksContext);\n\n  useEffect(() => {\n    console.log('I am inside of [Cockpit.js] useffect');\n\n    //getting rid of timer\n    // const timer = setTimeout(() => {\n    //   alert('Cockpit timer alert');\n    // }, 1000);\n\n    return () => {\n      //clearTimeout(timer);\n      console.log('[Cockpit.js] cleanup work in useEffect');\n    };\n  }, []);\n\n  /*\n    setTimeout(() => {\n      alert('Saved data to cloud')\n    }, 1000);\n    return () => { //don't have to have a return statement\n      console.log('[Cockpit.js] cleanup work in useEffect')\n    }\n  }, []); \n  */\n  //if 2nd argument [props.tasks] it doesn't involve tasks -> it won't run this again\n  //[props.tasks]\n\n  useEffect(() => {\n    console.log('[Cockpit.js] 2nd useEffect');\n    return () => {\n      console.log('[Cockpit.js] cleanup work in 2nd UseEffect');\n    };\n  });\n\n  //styling the 'Things to Do' using strings for classnames\n  const assignedClasses = [];\n  let btnClass = '';\n\n  switch (props.tasksLength) {\n    case 3:\n      assignedClasses.push('bold', 'red');\n      break;\n    case 2:\n      assignedClasses.push('red');\n      break;\n    case 1:\n      assignedClasses.push('orange');\n      break;\n    default:\n      assignedClasses.push('green');\n      break;\n  }\n\n  //console.log(assignedClasses[0])\n  //add multiple classes for <p> w/ strings\n  //const classesFinal = classes.join(' ')\n  const classesFinal = 'rocky.' + assignedClasses;\n  const [cockpitViewOptions, setCockpitViewOptions] = useState({\n    showTasksNumEachDay: true\n  });\n  //tasksContext.dataRequestHandler(event, 'tasks', '7', null, null)\n  const setHowBusyToggleHandler = () => {\n    let currentToggleStatus = cockpitViewOptions.showTasksNumEachDay;\n    setCockpitViewOptions({\n      showTasksNumEachDay: !currentToggleStatus\n    });\n\n    // if (howBusyToggle.showTasksNumEachDay) {\n\n    // } else {\n    //   let currentToggleStatus = howBusyToggle.showTasksNumEachDay;\n    //   setHowBusyToggle(\n    //     () => tasksContext.dataRequestHandler(event, 'tasks', '7', null, null),\n    //     {\n    //       showTasksNumEachDay: !currentToggleStatus\n    //     }\n    //   );\n    // }\n  };\n\n  //tasksContext = useContext(TasksContext);\n  //.numTasksThisWeek['Monday']showHowBusyWeeek\n  // if (tasksContext.tasksData.tasksData['showHowBusyWeeek'] == !null) {\n  //   alert('inside of cockpit');\n  // }\n\n  //if (tasksContext.tasksData.tasksData) {\n  //console.log('inside if (!howBusyToggle.showTasksNumEachDay) statement');\n\n  const requestDataHandler = event => {\n    let viewOptionChoice = event.target.value; //'' number used in displayContent component\n    let contentChoice = null;\n    let typeOfData = ''; //string: syllabus,tasks,events,objectives\n    let handlerChoice = ''; //string: '#' handler inside of database\n    let dataLocation = ''; // string: where obj found inside database\n    let infoType = ''; //string: index/id/\n    let info = ''; //string: actual info\n    // let today = calendarObj();\n\n    switch (viewOptionChoice) {\n      case '0': //Unscheduled Tasks for Week\n        typeOfData = 'tasks';\n        handlerChoice = '7';\n        dataLocation = '';\n        infoType = null;\n        info = null;\n        contentChoice = '7';\n\n        let currentShowTimeBudgetForWeek =\n          cockpitViewOptions.showTimeBudgetForWeek;\n        setCockpitViewOptions({\n          showTimeBudgetForWeek: !currentShowTimeBudgetForWeek\n        });\n        break;\n\n      case '1': //Today's Tasks\n        typeOfData = 'timeBudget';\n        handlerChoice = '2';\n        dataLocation = '';\n        infoType = null;\n        info = null;\n        break;\n    }\n\n    let dataRequestMessage = {\n      typeOfData: typeOfData,\n      handlerChoice: handlerChoice,\n      dataLocation: dataLocation,\n      infoType: infoType,\n      info: info\n    };\n\n    let contentViewObject = {\n      target: {\n        value: contentChoice\n      }\n    };\n    // alert(`typeOfData: ${typeOfData}`);\n    // alert(`handlerChoice ${handlerChoice}`);\n    // alert(`dataLocation ${dataLocation}`);\n    // alert(`infoType ${infoType}`);\n    // alert(`info ${info}`);\n    tasksContext.dataRequestHandler(event, dataRequestMessage);\n\n    props.contentViewHandler(contentViewObject);\n  };\n\n  let displayHowBusyThisWeek = null;\n  //console.log(tasksContext.tasksData.tasksData.numTasksThisWeek.Monday);\n\n  if (\n    tasksContext.tasksData.tasksData &&\n    tasksContext.tasksData.tasksData.showHowBusyWeek\n  ) {\n    displayHowBusyThisWeek = (\n      <React.Fragment>\n        <HowBusyThisWeek\n          showHowBusyThisWeek={howBusyToggle.showTasksNumEachDay}\n          deadline={tasksContext.tasksData.numTasksThisWeek}\n        />\n      </React.Fragment>\n    );\n  }\n  return (\n    <React.Fragment>\n      {displayHowBusyThisWeek}\n      <div className=\"\">\n        <img\n          className={classes.leftCockpitIcon}\n          src={require('../../Assets/aptIcon.png')}\n        />\n\n        <h5>Pick Content View!</h5>\n        <br></br>\n        <br></br>\n        <div className=\"btn-group-toggle d-flex-between\" data-toggle=\"buttons\">\n          <label className=\"btn btn-danger m-2 active\">\n            <button\n              type=\"radio\"\n              name=\"options\"\n              id=\"option1\"\n              autoComplete=\"off\"\n              // onClick={props.viewContent}\n              onClick={setHowBusyToggleHandler(event =>\n                requestDataHandler(event)\n              )}\n              value=\"0\"\n            />{' '}\n            Click to see # of Tasks/Day\n          </label>\n\n          <label className=\"btn btn-danger m-2 active\">\n            <button\n              type=\"radio\"\n              name=\"options\"\n              id=\"option1\"\n              autoComplete=\"off\"\n              onClick={event => requestDataHandler(event)}\n              value=\"1\"\n              // onClick={event =>\n              //   setHowBusyToggleHandler(\n              //     tasksContext.dataRequestHandler(event, 'tasks', '7', null, null)\n              //   )\n              // }\n              // value=\"0\"\n            />{' '}\n            Click to see # of Tasks/Day\n          </label>\n        </div>\n        <button>Click to see # of Tasks/Day</button>\n        <br></br>\n        <br></br>\n\n        {howBusyToggle.showTasksNumEachDay ? (\n          <React.Fragment>\n            <Template />\n\n            <p\n              className={classNames({\n                [classes[assignedClasses[0]]]: true,\n                [classes[assignedClasses[1]]]: true\n              })}\n            ></p>\n          </React.Fragment>\n        ) : null}\n        <DatePickerPicker />\n      </div>\n    </React.Fragment>\n  );\n};\nexport default React.memo(Cockpit);\n"]},"metadata":{},"sourceType":"module"}